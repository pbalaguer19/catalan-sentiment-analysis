/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SEMmentionType swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_const_iterator swig_types[3]
#define SWIGTYPE_p_const_preorder_iterator swig_types[4]
#define SWIGTYPE_p_const_sibling_iterator swig_types[5]
#define SWIGTYPE_p_coref_model swig_types[6]
#define SWIGTYPE_p_difference_type swig_types[7]
#define SWIGTYPE_p_first_type swig_types[8]
#define SWIGTYPE_p_freeling__RE_map swig_types[9]
#define SWIGTYPE_p_freeling__alternatives swig_types[10]
#define SWIGTYPE_p_freeling__analysis swig_types[11]
#define SWIGTYPE_p_freeling__argument swig_types[12]
#define SWIGTYPE_p_freeling__chart_parser swig_types[13]
#define SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t swig_types[14]
#define SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t swig_types[15]
#define SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t swig_types[16]
#define SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t swig_types[17]
#define SWIGTYPE_p_freeling__dates swig_types[18]
#define SWIGTYPE_p_freeling__dep_tree swig_types[19]
#define SWIGTYPE_p_freeling__dep_treeler swig_types[20]
#define SWIGTYPE_p_freeling__dep_txala swig_types[21]
#define SWIGTYPE_p_freeling__depnode swig_types[22]
#define SWIGTYPE_p_freeling__dictionary swig_types[23]
#define SWIGTYPE_p_freeling__document swig_types[24]
#define SWIGTYPE_p_freeling__foma_FSM swig_types[25]
#define SWIGTYPE_p_freeling__hmm_tagger swig_types[26]
#define SWIGTYPE_p_freeling__io__input_conll swig_types[27]
#define SWIGTYPE_p_freeling__io__input_freeling swig_types[28]
#define SWIGTYPE_p_freeling__io__output_conll swig_types[29]
#define SWIGTYPE_p_freeling__io__output_freeling swig_types[30]
#define SWIGTYPE_p_freeling__io__output_json swig_types[31]
#define SWIGTYPE_p_freeling__io__output_naf swig_types[32]
#define SWIGTYPE_p_freeling__io__output_train swig_types[33]
#define SWIGTYPE_p_freeling__io__output_xml swig_types[34]
#define SWIGTYPE_p_freeling__lang_ident swig_types[35]
#define SWIGTYPE_p_freeling__locutions swig_types[36]
#define SWIGTYPE_p_freeling__maco swig_types[37]
#define SWIGTYPE_p_freeling__maco_options swig_types[38]
#define SWIGTYPE_p_freeling__mention swig_types[39]
#define SWIGTYPE_p_freeling__nec swig_types[40]
#define SWIGTYPE_p_freeling__ner swig_types[41]
#define SWIGTYPE_p_freeling__node swig_types[42]
#define SWIGTYPE_p_freeling__numbers swig_types[43]
#define SWIGTYPE_p_freeling__paragraph swig_types[44]
#define SWIGTYPE_p_freeling__parse_tree swig_types[45]
#define SWIGTYPE_p_freeling__phonetics swig_types[46]
#define SWIGTYPE_p_freeling__predicate swig_types[47]
#define SWIGTYPE_p_freeling__probabilities swig_types[48]
#define SWIGTYPE_p_freeling__punts swig_types[49]
#define SWIGTYPE_p_freeling__quantities swig_types[50]
#define SWIGTYPE_p_freeling__regexp swig_types[51]
#define SWIGTYPE_p_freeling__relax_tagger swig_types[52]
#define SWIGTYPE_p_freeling__relaxcor swig_types[53]
#define SWIGTYPE_p_freeling__semanticDB swig_types[54]
#define SWIGTYPE_p_freeling__semgraph__SG_argument swig_types[55]
#define SWIGTYPE_p_freeling__semgraph__SG_entity swig_types[56]
#define SWIGTYPE_p_freeling__semgraph__SG_frame swig_types[57]
#define SWIGTYPE_p_freeling__semgraph__SG_mention swig_types[58]
#define SWIGTYPE_p_freeling__semgraph__entityType swig_types[59]
#define SWIGTYPE_p_freeling__semgraph__semantic_graph swig_types[60]
#define SWIGTYPE_p_freeling__semgraph_extract swig_types[61]
#define SWIGTYPE_p_freeling__sense_info swig_types[62]
#define SWIGTYPE_p_freeling__senses swig_types[63]
#define SWIGTYPE_p_freeling__sentence swig_types[64]
#define SWIGTYPE_p_freeling__splitter swig_types[65]
#define SWIGTYPE_p_freeling__tagset swig_types[66]
#define SWIGTYPE_p_freeling__tokenizer swig_types[67]
#define SWIGTYPE_p_freeling__traces swig_types[68]
#define SWIGTYPE_p_freeling__treeT_freeling__depnode_t swig_types[69]
#define SWIGTYPE_p_freeling__treeT_freeling__node_t swig_types[70]
#define SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t swig_types[71]
#define SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t swig_types[72]
#define SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t swig_types[73]
#define SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t swig_types[74]
#define SWIGTYPE_p_freeling__ukb swig_types[75]
#define SWIGTYPE_p_freeling__util swig_types[76]
#define SWIGTYPE_p_freeling__word swig_types[77]
#define SWIGTYPE_p_iterator swig_types[78]
#define SWIGTYPE_p_key_type swig_types[79]
#define SWIGTYPE_p_long_double swig_types[80]
#define SWIGTYPE_p_mentionType swig_types[81]
#define SWIGTYPE_p_p_PyObject swig_types[82]
#define SWIGTYPE_p_predicates swig_types[83]
#define SWIGTYPE_p_preorder_iterator swig_types[84]
#define SWIGTYPE_p_second_type swig_types[85]
#define SWIGTYPE_p_sibling_iterator swig_types[86]
#define SWIGTYPE_p_size_type swig_types[87]
#define SWIGTYPE_p_splitter_status swig_types[88]
#define SWIGTYPE_p_std__allocatorT_freeling__analysis_t swig_types[89]
#define SWIGTYPE_p_std__allocatorT_freeling__argument_t swig_types[90]
#define SWIGTYPE_p_std__allocatorT_freeling__paragraph_t swig_types[91]
#define SWIGTYPE_p_std__allocatorT_freeling__predicate_t swig_types[92]
#define SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_argument_t swig_types[93]
#define SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_entity_t swig_types[94]
#define SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_frame_t swig_types[95]
#define SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_mention_t swig_types[96]
#define SWIGTYPE_p_std__allocatorT_freeling__sentence_t swig_types[97]
#define SWIGTYPE_p_std__allocatorT_freeling__word_t swig_types[98]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[99]
#define SWIGTYPE_p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t swig_types[100]
#define SWIGTYPE_p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t swig_types[101]
#define SWIGTYPE_p_std__allocatorT_std__pairT_double_std__wstring_t_t swig_types[102]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__wstring_double_t_t swig_types[103]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t swig_types[104]
#define SWIGTYPE_p_std__allocatorT_std__wstring_t swig_types[105]
#define SWIGTYPE_p_std__invalid_argument swig_types[106]
#define SWIGTYPE_p_std__lessT_std__wstring_t swig_types[107]
#define SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t swig_types[108]
#define SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t swig_types[109]
#define SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t swig_types[110]
#define SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t swig_types[111]
#define SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t swig_types[112]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t swig_types[113]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t swig_types[114]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator swig_types[115]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator swig_types[116]
#define SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t swig_types[117]
#define SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t swig_types[118]
#define SWIGTYPE_p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t swig_types[119]
#define SWIGTYPE_p_std__pairT_double_std__wstring_t swig_types[120]
#define SWIGTYPE_p_std__pairT_std__wstring_double_t swig_types[121]
#define SWIGTYPE_p_std__pairT_std__wstring_int_t swig_types[122]
#define SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t swig_types[123]
#define SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator swig_types[126]
#define SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator swig_types[127]
#define SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t swig_types[138]
#define SWIGTYPE_p_std__wistream swig_types[139]
#define SWIGTYPE_p_std__wostream swig_types[140]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[141]
#define SWIGTYPE_p_unsigned_long swig_types[142]
#define SWIGTYPE_p_value_type swig_types[143]
#define SWIGTYPE_p_wchar_t swig_types[144]
static swig_type_info *swig_types[146];
static swig_module_info swig_module = {swig_types, 145, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _freeling.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__freeling

#else
#  define SWIG_init    init_freeling

#endif
#define SWIG_name    "_freeling"

#define SWIGVERSION 0x030008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


 #include "freeling.h"
 #include "freeling/io.h"
 #include "freeling/tree.h"
 #include "freeling/morfo/traces.h"
 using namespace std;


#include <string>


#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_UNICODE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_UNICODE_ARG(obj) ((PyUnicodeObject*) (obj))
#endif


#include <cwchar>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <list>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type>
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< freeling::word > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::word"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::word, std::allocator< freeling::word > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::word" "," "std::allocator< freeling::word >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_word_Sg__iterator(std::vector< freeling::word > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_word_Sg____nonzero__(std::vector< freeling::word > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_word_Sg____bool__(std::vector< freeling::word > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::word >::size_type std_vector_Sl_freeling_word_Sg____len__(std::vector< freeling::word > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< freeling::word,std::allocator< freeling::word > > *std_vector_Sl_freeling_word_Sg____getslice__(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i,std::vector< freeling::word >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____setslice____SWIG_0(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i,std::vector< freeling::word >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::word,std::allocator< freeling::word > >());
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____setslice____SWIG_1(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i,std::vector< freeling::word >::difference_type j,std::vector< freeling::word,std::allocator< freeling::word > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____delslice__(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i,std::vector< freeling::word >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____delitem____SWIG_0(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::word,std::allocator< freeling::word > > *std_vector_Sl_freeling_word_Sg____getitem____SWIG_0(std::vector< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____setitem____SWIG_0(std::vector< freeling::word > *self,PySliceObject *slice,std::vector< freeling::word,std::allocator< freeling::word > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____setitem____SWIG_1(std::vector< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____delitem____SWIG_1(std::vector< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::vector< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::word >::value_type const &std_vector_Sl_freeling_word_Sg____getitem____SWIG_1(std::vector< freeling::word > const *self,std::vector< freeling::word >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg____setitem____SWIG_2(std::vector< freeling::word > *self,std::vector< freeling::word >::difference_type i,std::vector< freeling::word >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::word >::value_type std_vector_Sl_freeling_word_Sg__pop(std::vector< freeling::word > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::word,std::allocator< freeling::word > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_word_Sg__append(std::vector< freeling::word > *self,std::vector< freeling::word >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::word >::iterator std_vector_Sl_freeling_word_Sg__erase__SWIG_0(std::vector< freeling::word > *self,std::vector< freeling::word >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::word >::iterator std_vector_Sl_freeling_word_Sg__erase__SWIG_1(std::vector< freeling::word > *self,std::vector< freeling::word >::iterator first,std::vector< freeling::word >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::word >::iterator std_vector_Sl_freeling_word_Sg__insert__SWIG_0(std::vector< freeling::word > *self,std::vector< freeling::word >::iterator pos,std::vector< freeling::word >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_word_Sg__insert__SWIG_1(std::vector< freeling::word > *self,std::vector< freeling::word >::iterator pos,std::vector< freeling::word >::size_type n,std::vector< freeling::word >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< freeling::word, std::allocator< freeling::word > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "freeling::word" ", " "std::allocator< freeling::word >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_freeling_word_Sg__iterator(std::list< freeling::word > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_freeling_word_Sg____nonzero__(std::list< freeling::word > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_freeling_word_Sg____bool__(std::list< freeling::word > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< freeling::word >::size_type std_list_Sl_freeling_word_Sg____len__(std::list< freeling::word > const *self){
      return self->size();
    }
SWIGINTERN std::list< freeling::word,std::allocator< freeling::word > > *std_list_Sl_freeling_word_Sg____getslice__(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i,std::list< freeling::word >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____setslice____SWIG_0(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i,std::list< freeling::word >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< freeling::word,std::allocator< freeling::word > >());
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____setslice____SWIG_1(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i,std::list< freeling::word >::difference_type j,std::list< freeling::word,std::allocator< freeling::word > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____delslice__(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i,std::list< freeling::word >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____delitem____SWIG_0(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< freeling::word,std::allocator< freeling::word > > *std_list_Sl_freeling_word_Sg____getitem____SWIG_0(std::list< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____setitem____SWIG_0(std::list< freeling::word > *self,PySliceObject *slice,std::list< freeling::word,std::allocator< freeling::word > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____setitem____SWIG_1(std::list< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____delitem____SWIG_1(std::list< freeling::word > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type id = i;
      std::list< freeling::word,std::allocator< freeling::word > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< freeling::word >::value_type const &std_list_Sl_freeling_word_Sg____getitem____SWIG_1(std::list< freeling::word > const *self,std::list< freeling::word >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg____setitem____SWIG_2(std::list< freeling::word > *self,std::list< freeling::word >::difference_type i,std::list< freeling::word >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< freeling::word >::value_type std_list_Sl_freeling_word_Sg__pop(std::list< freeling::word > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< freeling::word,std::allocator< freeling::word > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_freeling_word_Sg__append(std::list< freeling::word > *self,std::list< freeling::word >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< freeling::word >::iterator std_list_Sl_freeling_word_Sg__erase__SWIG_0(std::list< freeling::word > *self,std::list< freeling::word >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< freeling::word >::iterator std_list_Sl_freeling_word_Sg__erase__SWIG_1(std::list< freeling::word > *self,std::list< freeling::word >::iterator first,std::list< freeling::word >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< freeling::word >::iterator std_list_Sl_freeling_word_Sg__insert__SWIG_0(std::list< freeling::word > *self,std::list< freeling::word >::iterator pos,std::list< freeling::word >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_freeling_word_Sg__insert__SWIG_1(std::list< freeling::word > *self,std::list< freeling::word >::iterator pos,std::list< freeling::word >::size_type n,std::list< freeling::word >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::analysis > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::analysis"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< freeling::analysis, std::allocator< freeling::analysis > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "freeling::analysis" ", " "std::allocator< freeling::analysis >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_freeling_analysis_Sg__iterator(std::list< freeling::analysis > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_freeling_analysis_Sg____nonzero__(std::list< freeling::analysis > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_freeling_analysis_Sg____bool__(std::list< freeling::analysis > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< freeling::analysis >::size_type std_list_Sl_freeling_analysis_Sg____len__(std::list< freeling::analysis > const *self){
      return self->size();
    }
SWIGINTERN std::list< freeling::analysis,std::allocator< freeling::analysis > > *std_list_Sl_freeling_analysis_Sg____getslice__(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i,std::list< freeling::analysis >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____setslice____SWIG_0(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i,std::list< freeling::analysis >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< freeling::analysis,std::allocator< freeling::analysis > >());
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____setslice____SWIG_1(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i,std::list< freeling::analysis >::difference_type j,std::list< freeling::analysis,std::allocator< freeling::analysis > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____delslice__(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i,std::list< freeling::analysis >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____delitem____SWIG_0(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< freeling::analysis,std::allocator< freeling::analysis > > *std_list_Sl_freeling_analysis_Sg____getitem____SWIG_0(std::list< freeling::analysis > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type id = i;
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____setitem____SWIG_0(std::list< freeling::analysis > *self,PySliceObject *slice,std::list< freeling::analysis,std::allocator< freeling::analysis > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type id = i;
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____setitem____SWIG_1(std::list< freeling::analysis > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type id = i;
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____delitem____SWIG_1(std::list< freeling::analysis > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type id = i;
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< freeling::analysis >::value_type const &std_list_Sl_freeling_analysis_Sg____getitem____SWIG_1(std::list< freeling::analysis > const *self,std::list< freeling::analysis >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg____setitem____SWIG_2(std::list< freeling::analysis > *self,std::list< freeling::analysis >::difference_type i,std::list< freeling::analysis >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< freeling::analysis >::value_type std_list_Sl_freeling_analysis_Sg__pop(std::list< freeling::analysis > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< freeling::analysis,std::allocator< freeling::analysis > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg__append(std::list< freeling::analysis > *self,std::list< freeling::analysis >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< freeling::analysis >::iterator std_list_Sl_freeling_analysis_Sg__erase__SWIG_0(std::list< freeling::analysis > *self,std::list< freeling::analysis >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< freeling::analysis >::iterator std_list_Sl_freeling_analysis_Sg__erase__SWIG_1(std::list< freeling::analysis > *self,std::list< freeling::analysis >::iterator first,std::list< freeling::analysis >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< freeling::analysis >::iterator std_list_Sl_freeling_analysis_Sg__insert__SWIG_0(std::list< freeling::analysis > *self,std::list< freeling::analysis >::iterator pos,std::list< freeling::analysis >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_freeling_analysis_Sg__insert__SWIG_1(std::list< freeling::analysis > *self,std::list< freeling::analysis >::iterator pos,std::list< freeling::analysis >::size_type n,std::list< freeling::analysis >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::sentence > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::sentence"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< freeling::sentence, std::allocator< freeling::sentence > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "freeling::sentence" ", " "std::allocator< freeling::sentence >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_freeling_sentence_Sg__iterator(std::list< freeling::sentence > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_freeling_sentence_Sg____nonzero__(std::list< freeling::sentence > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_freeling_sentence_Sg____bool__(std::list< freeling::sentence > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< freeling::sentence >::size_type std_list_Sl_freeling_sentence_Sg____len__(std::list< freeling::sentence > const *self){
      return self->size();
    }
SWIGINTERN std::list< freeling::sentence,std::allocator< freeling::sentence > > *std_list_Sl_freeling_sentence_Sg____getslice__(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i,std::list< freeling::sentence >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____setslice____SWIG_0(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i,std::list< freeling::sentence >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< freeling::sentence,std::allocator< freeling::sentence > >());
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____setslice____SWIG_1(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i,std::list< freeling::sentence >::difference_type j,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____delslice__(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i,std::list< freeling::sentence >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____delitem____SWIG_0(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< freeling::sentence,std::allocator< freeling::sentence > > *std_list_Sl_freeling_sentence_Sg____getitem____SWIG_0(std::list< freeling::sentence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type id = i;
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____setitem____SWIG_0(std::list< freeling::sentence > *self,PySliceObject *slice,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type id = i;
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____setitem____SWIG_1(std::list< freeling::sentence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type id = i;
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____delitem____SWIG_1(std::list< freeling::sentence > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type id = i;
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< freeling::sentence >::value_type const &std_list_Sl_freeling_sentence_Sg____getitem____SWIG_1(std::list< freeling::sentence > const *self,std::list< freeling::sentence >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg____setitem____SWIG_2(std::list< freeling::sentence > *self,std::list< freeling::sentence >::difference_type i,std::list< freeling::sentence >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< freeling::sentence >::value_type std_list_Sl_freeling_sentence_Sg__pop(std::list< freeling::sentence > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< freeling::sentence,std::allocator< freeling::sentence > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg__append(std::list< freeling::sentence > *self,std::list< freeling::sentence >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< freeling::sentence >::iterator std_list_Sl_freeling_sentence_Sg__erase__SWIG_0(std::list< freeling::sentence > *self,std::list< freeling::sentence >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< freeling::sentence >::iterator std_list_Sl_freeling_sentence_Sg__erase__SWIG_1(std::list< freeling::sentence > *self,std::list< freeling::sentence >::iterator first,std::list< freeling::sentence >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< freeling::sentence >::iterator std_list_Sl_freeling_sentence_Sg__insert__SWIG_0(std::list< freeling::sentence > *self,std::list< freeling::sentence >::iterator pos,std::list< freeling::sentence >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_freeling_sentence_Sg__insert__SWIG_1(std::list< freeling::sentence > *self,std::list< freeling::sentence >::iterator pos,std::list< freeling::sentence >::size_type n,std::list< freeling::sentence >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::paragraph > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::paragraph"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::list< freeling::paragraph, std::allocator< freeling::paragraph > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "freeling::paragraph" ", " "std::allocator< freeling::paragraph >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_freeling_paragraph_Sg__iterator(std::list< freeling::paragraph > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_freeling_paragraph_Sg____nonzero__(std::list< freeling::paragraph > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_freeling_paragraph_Sg____bool__(std::list< freeling::paragraph > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< freeling::paragraph >::size_type std_list_Sl_freeling_paragraph_Sg____len__(std::list< freeling::paragraph > const *self){
      return self->size();
    }
SWIGINTERN std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *std_list_Sl_freeling_paragraph_Sg____getslice__(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i,std::list< freeling::paragraph >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____setslice____SWIG_0(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i,std::list< freeling::paragraph >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< freeling::paragraph,std::allocator< freeling::paragraph > >());
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____setslice____SWIG_1(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i,std::list< freeling::paragraph >::difference_type j,std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____delslice__(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i,std::list< freeling::paragraph >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____delitem____SWIG_0(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *std_list_Sl_freeling_paragraph_Sg____getitem____SWIG_0(std::list< freeling::paragraph > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type id = i;
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_0(std::list< freeling::paragraph > *self,PySliceObject *slice,std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type id = i;
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_1(std::list< freeling::paragraph > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type id = i;
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____delitem____SWIG_1(std::list< freeling::paragraph > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type id = i;
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< freeling::paragraph >::value_type const &std_list_Sl_freeling_paragraph_Sg____getitem____SWIG_1(std::list< freeling::paragraph > const *self,std::list< freeling::paragraph >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_2(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::difference_type i,std::list< freeling::paragraph >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< freeling::paragraph >::value_type std_list_Sl_freeling_paragraph_Sg__pop(std::list< freeling::paragraph > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< freeling::paragraph,std::allocator< freeling::paragraph > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg__append(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< freeling::paragraph >::iterator std_list_Sl_freeling_paragraph_Sg__erase__SWIG_0(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< freeling::paragraph >::iterator std_list_Sl_freeling_paragraph_Sg__erase__SWIG_1(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::iterator first,std::list< freeling::paragraph >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< freeling::paragraph >::iterator std_list_Sl_freeling_paragraph_Sg__insert__SWIG_0(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::iterator pos,std::list< freeling::paragraph >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_freeling_paragraph_Sg__insert__SWIG_1(std::list< freeling::paragraph > *self,std::list< freeling::paragraph >::iterator pos,std::list< freeling::paragraph >::size_type n,std::list< freeling::paragraph >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::argument > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::argument"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::argument, std::allocator< freeling::argument > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::argument" "," "std::allocator< freeling::argument >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_argument_Sg__iterator(std::vector< freeling::argument > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_argument_Sg____nonzero__(std::vector< freeling::argument > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_argument_Sg____bool__(std::vector< freeling::argument > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::argument >::size_type std_vector_Sl_freeling_argument_Sg____len__(std::vector< freeling::argument > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::argument,std::allocator< freeling::argument > > *std_vector_Sl_freeling_argument_Sg____getslice__(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i,std::vector< freeling::argument >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____setslice____SWIG_0(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i,std::vector< freeling::argument >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::argument,std::allocator< freeling::argument > >());
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____setslice____SWIG_1(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i,std::vector< freeling::argument >::difference_type j,std::vector< freeling::argument,std::allocator< freeling::argument > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____delslice__(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i,std::vector< freeling::argument >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____delitem____SWIG_0(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::argument,std::allocator< freeling::argument > > *std_vector_Sl_freeling_argument_Sg____getitem____SWIG_0(std::vector< freeling::argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type id = i;
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____setitem____SWIG_0(std::vector< freeling::argument > *self,PySliceObject *slice,std::vector< freeling::argument,std::allocator< freeling::argument > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type id = i;
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____setitem____SWIG_1(std::vector< freeling::argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type id = i;
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____delitem____SWIG_1(std::vector< freeling::argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type id = i;
      std::vector< freeling::argument,std::allocator< freeling::argument > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::argument >::value_type const &std_vector_Sl_freeling_argument_Sg____getitem____SWIG_1(std::vector< freeling::argument > const *self,std::vector< freeling::argument >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg____setitem____SWIG_2(std::vector< freeling::argument > *self,std::vector< freeling::argument >::difference_type i,std::vector< freeling::argument >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::argument >::value_type std_vector_Sl_freeling_argument_Sg__pop(std::vector< freeling::argument > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::argument,std::allocator< freeling::argument > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg__append(std::vector< freeling::argument > *self,std::vector< freeling::argument >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::argument >::iterator std_vector_Sl_freeling_argument_Sg__erase__SWIG_0(std::vector< freeling::argument > *self,std::vector< freeling::argument >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::argument >::iterator std_vector_Sl_freeling_argument_Sg__erase__SWIG_1(std::vector< freeling::argument > *self,std::vector< freeling::argument >::iterator first,std::vector< freeling::argument >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::argument >::iterator std_vector_Sl_freeling_argument_Sg__insert__SWIG_0(std::vector< freeling::argument > *self,std::vector< freeling::argument >::iterator pos,std::vector< freeling::argument >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_argument_Sg__insert__SWIG_1(std::vector< freeling::argument > *self,std::vector< freeling::argument >::iterator pos,std::vector< freeling::argument >::size_type n,std::vector< freeling::argument >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::predicate > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::predicate"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::predicate, std::allocator< freeling::predicate > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::predicate" "," "std::allocator< freeling::predicate >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_predicate_Sg__iterator(std::vector< freeling::predicate > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_predicate_Sg____nonzero__(std::vector< freeling::predicate > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_predicate_Sg____bool__(std::vector< freeling::predicate > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::predicate >::size_type std_vector_Sl_freeling_predicate_Sg____len__(std::vector< freeling::predicate > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::predicate,std::allocator< freeling::predicate > > *std_vector_Sl_freeling_predicate_Sg____getslice__(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i,std::vector< freeling::predicate >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____setslice____SWIG_0(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i,std::vector< freeling::predicate >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::predicate,std::allocator< freeling::predicate > >());
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____setslice____SWIG_1(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i,std::vector< freeling::predicate >::difference_type j,std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____delslice__(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i,std::vector< freeling::predicate >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____delitem____SWIG_0(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::predicate,std::allocator< freeling::predicate > > *std_vector_Sl_freeling_predicate_Sg____getitem____SWIG_0(std::vector< freeling::predicate > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type id = i;
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_0(std::vector< freeling::predicate > *self,PySliceObject *slice,std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type id = i;
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_1(std::vector< freeling::predicate > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type id = i;
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____delitem____SWIG_1(std::vector< freeling::predicate > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type id = i;
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::predicate >::value_type const &std_vector_Sl_freeling_predicate_Sg____getitem____SWIG_1(std::vector< freeling::predicate > const *self,std::vector< freeling::predicate >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_2(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::difference_type i,std::vector< freeling::predicate >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::predicate >::value_type std_vector_Sl_freeling_predicate_Sg__pop(std::vector< freeling::predicate > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::predicate,std::allocator< freeling::predicate > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg__append(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::predicate >::iterator std_vector_Sl_freeling_predicate_Sg__erase__SWIG_0(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::predicate >::iterator std_vector_Sl_freeling_predicate_Sg__erase__SWIG_1(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::iterator first,std::vector< freeling::predicate >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::predicate >::iterator std_vector_Sl_freeling_predicate_Sg__insert__SWIG_0(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::iterator pos,std::vector< freeling::predicate >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_predicate_Sg__insert__SWIG_1(std::vector< freeling::predicate > *self,std::vector< freeling::predicate >::iterator pos,std::vector< freeling::predicate >::size_type n,std::vector< freeling::predicate >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::semgraph::SG_mention > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::semgraph::SG_mention"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::semgraph::SG_mention, std::allocator< freeling::semgraph::SG_mention > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::semgraph::SG_mention" "," "std::allocator< freeling::semgraph::SG_mention >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_semgraph_SG_mention_Sg__iterator(std::vector< freeling::semgraph::SG_mention > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_mention_Sg____nonzero__(std::vector< freeling::semgraph::SG_mention > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_mention_Sg____bool__(std::vector< freeling::semgraph::SG_mention > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::size_type std_vector_Sl_freeling_semgraph_SG_mention_Sg____len__(std::vector< freeling::semgraph::SG_mention > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *std_vector_Sl_freeling_semgraph_SG_mention_Sg____getslice__(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i,std::vector< freeling::semgraph::SG_mention >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____setslice____SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i,std::vector< freeling::semgraph::SG_mention >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >());
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____setslice____SWIG_1(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i,std::vector< freeling::semgraph::SG_mention >::difference_type j,std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____delslice__(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i,std::vector< freeling::semgraph::SG_mention >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____delitem____SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *std_vector_Sl_freeling_semgraph_SG_mention_Sg____getitem____SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,PySliceObject *slice,std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_1(std::vector< freeling::semgraph::SG_mention > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____delitem____SWIG_1(std::vector< freeling::semgraph::SG_mention > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::value_type const &std_vector_Sl_freeling_semgraph_SG_mention_Sg____getitem____SWIG_1(std::vector< freeling::semgraph::SG_mention > const *self,std::vector< freeling::semgraph::SG_mention >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_2(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::difference_type i,std::vector< freeling::semgraph::SG_mention >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::value_type std_vector_Sl_freeling_semgraph_SG_mention_Sg__pop(std::vector< freeling::semgraph::SG_mention > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg__append(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::iterator std_vector_Sl_freeling_semgraph_SG_mention_Sg__erase__SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::iterator std_vector_Sl_freeling_semgraph_SG_mention_Sg__erase__SWIG_1(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::iterator first,std::vector< freeling::semgraph::SG_mention >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::semgraph::SG_mention >::iterator std_vector_Sl_freeling_semgraph_SG_mention_Sg__insert__SWIG_0(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::iterator pos,std::vector< freeling::semgraph::SG_mention >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_mention_Sg__insert__SWIG_1(std::vector< freeling::semgraph::SG_mention > *self,std::vector< freeling::semgraph::SG_mention >::iterator pos,std::vector< freeling::semgraph::SG_mention >::size_type n,std::vector< freeling::semgraph::SG_mention >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::semgraph::SG_argument > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::semgraph::SG_argument"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::semgraph::SG_argument, std::allocator< freeling::semgraph::SG_argument > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::semgraph::SG_argument" "," "std::allocator< freeling::semgraph::SG_argument >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_semgraph_SG_argument_Sg__iterator(std::vector< freeling::semgraph::SG_argument > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_argument_Sg____nonzero__(std::vector< freeling::semgraph::SG_argument > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_argument_Sg____bool__(std::vector< freeling::semgraph::SG_argument > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::size_type std_vector_Sl_freeling_semgraph_SG_argument_Sg____len__(std::vector< freeling::semgraph::SG_argument > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *std_vector_Sl_freeling_semgraph_SG_argument_Sg____getslice__(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i,std::vector< freeling::semgraph::SG_argument >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____setslice____SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i,std::vector< freeling::semgraph::SG_argument >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >());
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____setslice____SWIG_1(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i,std::vector< freeling::semgraph::SG_argument >::difference_type j,std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____delslice__(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i,std::vector< freeling::semgraph::SG_argument >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____delitem____SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *std_vector_Sl_freeling_semgraph_SG_argument_Sg____getitem____SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,PySliceObject *slice,std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_1(std::vector< freeling::semgraph::SG_argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____delitem____SWIG_1(std::vector< freeling::semgraph::SG_argument > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::value_type const &std_vector_Sl_freeling_semgraph_SG_argument_Sg____getitem____SWIG_1(std::vector< freeling::semgraph::SG_argument > const *self,std::vector< freeling::semgraph::SG_argument >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_2(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::difference_type i,std::vector< freeling::semgraph::SG_argument >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::value_type std_vector_Sl_freeling_semgraph_SG_argument_Sg__pop(std::vector< freeling::semgraph::SG_argument > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg__append(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::iterator std_vector_Sl_freeling_semgraph_SG_argument_Sg__erase__SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::iterator std_vector_Sl_freeling_semgraph_SG_argument_Sg__erase__SWIG_1(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::iterator first,std::vector< freeling::semgraph::SG_argument >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::semgraph::SG_argument >::iterator std_vector_Sl_freeling_semgraph_SG_argument_Sg__insert__SWIG_0(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::iterator pos,std::vector< freeling::semgraph::SG_argument >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_argument_Sg__insert__SWIG_1(std::vector< freeling::semgraph::SG_argument > *self,std::vector< freeling::semgraph::SG_argument >::iterator pos,std::vector< freeling::semgraph::SG_argument >::size_type n,std::vector< freeling::semgraph::SG_argument >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::semgraph::SG_entity > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::semgraph::SG_entity"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::semgraph::SG_entity, std::allocator< freeling::semgraph::SG_entity > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::semgraph::SG_entity" "," "std::allocator< freeling::semgraph::SG_entity >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_semgraph_SG_entity_Sg__iterator(std::vector< freeling::semgraph::SG_entity > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_entity_Sg____nonzero__(std::vector< freeling::semgraph::SG_entity > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_entity_Sg____bool__(std::vector< freeling::semgraph::SG_entity > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::size_type std_vector_Sl_freeling_semgraph_SG_entity_Sg____len__(std::vector< freeling::semgraph::SG_entity > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *std_vector_Sl_freeling_semgraph_SG_entity_Sg____getslice__(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i,std::vector< freeling::semgraph::SG_entity >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____setslice____SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i,std::vector< freeling::semgraph::SG_entity >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >());
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____setslice____SWIG_1(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i,std::vector< freeling::semgraph::SG_entity >::difference_type j,std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____delslice__(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i,std::vector< freeling::semgraph::SG_entity >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____delitem____SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *std_vector_Sl_freeling_semgraph_SG_entity_Sg____getitem____SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,PySliceObject *slice,std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_1(std::vector< freeling::semgraph::SG_entity > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____delitem____SWIG_1(std::vector< freeling::semgraph::SG_entity > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::value_type const &std_vector_Sl_freeling_semgraph_SG_entity_Sg____getitem____SWIG_1(std::vector< freeling::semgraph::SG_entity > const *self,std::vector< freeling::semgraph::SG_entity >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_2(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::difference_type i,std::vector< freeling::semgraph::SG_entity >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::value_type std_vector_Sl_freeling_semgraph_SG_entity_Sg__pop(std::vector< freeling::semgraph::SG_entity > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg__append(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::iterator std_vector_Sl_freeling_semgraph_SG_entity_Sg__erase__SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::iterator std_vector_Sl_freeling_semgraph_SG_entity_Sg__erase__SWIG_1(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::iterator first,std::vector< freeling::semgraph::SG_entity >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::semgraph::SG_entity >::iterator std_vector_Sl_freeling_semgraph_SG_entity_Sg__insert__SWIG_0(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::iterator pos,std::vector< freeling::semgraph::SG_entity >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_entity_Sg__insert__SWIG_1(std::vector< freeling::semgraph::SG_entity > *self,std::vector< freeling::semgraph::SG_entity >::iterator pos,std::vector< freeling::semgraph::SG_entity >::size_type n,std::vector< freeling::semgraph::SG_entity >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< freeling::semgraph::SG_frame > {
      typedef pointer_category category;
      static const char* type_name() { return"freeling::semgraph::SG_frame"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< freeling::semgraph::SG_frame, std::allocator< freeling::semgraph::SG_frame > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "freeling::semgraph::SG_frame" "," "std::allocator< freeling::semgraph::SG_frame >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_freeling_semgraph_SG_frame_Sg__iterator(std::vector< freeling::semgraph::SG_frame > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_frame_Sg____nonzero__(std::vector< freeling::semgraph::SG_frame > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_freeling_semgraph_SG_frame_Sg____bool__(std::vector< freeling::semgraph::SG_frame > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::size_type std_vector_Sl_freeling_semgraph_SG_frame_Sg____len__(std::vector< freeling::semgraph::SG_frame > const *self){
      return self->size();
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *std_vector_Sl_freeling_semgraph_SG_frame_Sg____getslice__(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i,std::vector< freeling::semgraph::SG_frame >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____setslice____SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i,std::vector< freeling::semgraph::SG_frame >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >());
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____setslice____SWIG_1(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i,std::vector< freeling::semgraph::SG_frame >::difference_type j,std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____delslice__(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i,std::vector< freeling::semgraph::SG_frame >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____delitem____SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *std_vector_Sl_freeling_semgraph_SG_frame_Sg____getitem____SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,PySliceObject *slice,std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_1(std::vector< freeling::semgraph::SG_frame > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____delitem____SWIG_1(std::vector< freeling::semgraph::SG_frame > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type id = i;
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::value_type const &std_vector_Sl_freeling_semgraph_SG_frame_Sg____getitem____SWIG_1(std::vector< freeling::semgraph::SG_frame > const *self,std::vector< freeling::semgraph::SG_frame >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_2(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::difference_type i,std::vector< freeling::semgraph::SG_frame >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::value_type std_vector_Sl_freeling_semgraph_SG_frame_Sg__pop(std::vector< freeling::semgraph::SG_frame > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg__append(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::iterator std_vector_Sl_freeling_semgraph_SG_frame_Sg__erase__SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::iterator std_vector_Sl_freeling_semgraph_SG_frame_Sg__erase__SWIG_1(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::iterator first,std::vector< freeling::semgraph::SG_frame >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< freeling::semgraph::SG_frame >::iterator std_vector_Sl_freeling_semgraph_SG_frame_Sg__insert__SWIG_0(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::iterator pos,std::vector< freeling::semgraph::SG_frame >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_freeling_semgraph_SG_frame_Sg__insert__SWIG_1(std::vector< freeling::semgraph::SG_frame > *self,std::vector< freeling::semgraph::SG_frame >::iterator pos,std::vector< freeling::semgraph::SG_frame >::size_type n,std::vector< freeling::semgraph::SG_frame >::value_type const &x){ self->insert(pos, n, x); }

#include <wchar.h>
#include <limits.h>
#ifndef WCHAR_MIN
#  define WCHAR_MIN 0
#endif
#ifndef WCHAR_MAX
#  define WCHAR_MAX 65535
#endif


SWIGINTERN swig_type_info*
SWIG_pwchar_descriptor()
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_wchar_t");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsWCharPtrAndSize(PyObject *obj, wchar_t **cptr, size_t *psize, int *alloc)
{
  PyObject *tmp = 0;
  int isunicode = PyUnicode_Check(obj);
#if PY_VERSION_HEX < 0x03000000
  if (!isunicode && PyString_Check(obj)) {
    obj = tmp = PyUnicode_FromObject(obj);
    isunicode = 1;
  }
#endif
  if (isunicode) {
    Py_ssize_t len = PyUnicode_GetSize(obj);
    if (cptr) {
      *cptr = (new wchar_t[len + 1]);
      PyUnicode_AsWideChar(SWIGPY_UNICODE_ARG(obj), *cptr, len);
      (*cptr)[len] = 0;
    }
    if (psize) *psize = (size_t) len + 1;
    if (alloc) *alloc = cptr ? SWIG_NEWOBJ : 0;
    Py_XDECREF(tmp);
    return SWIG_OK;
  } else {
    swig_type_info* pwchar_descriptor = SWIG_pwchar_descriptor();
    if (pwchar_descriptor) {
      void * vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pwchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (wchar_t *)vptr;
	if (psize) *psize = vptr ? (wcslen((wchar_t *)vptr) + 1) : 0;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_wstring (PyObject * obj, std::wstring **val) 
{
  wchar_t* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsWCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::wstring(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::wstring" " *");
      init = 1;
    }
    if (descriptor) {
      std::wstring *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_wstring (PyObject * obj, std::wstring *val)
{
  std::wstring* v = (std::wstring *) 0;
  int res = SWIG_AsPtr_std_wstring (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromWCharPtrAndSize(const wchar_t * carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pwchar_descriptor = SWIG_pwchar_descriptor();
      return pwchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< wchar_t * >(carray), pwchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyUnicode_FromWideChar(carray, static_cast< Py_ssize_t >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_wstring  (const std::wstring& s)
{
  return SWIG_FromWCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::wstring > {
    typedef value_category category;
    static const char* type_name() { return"std::wstring"; }
  };
  template <>  struct traits_asval< std::wstring > {
    typedef std::wstring value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_wstring (obj, val);
    }
  };
  template <>  struct traits_from< std::wstring > {
    typedef std::wstring value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_wstring  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::list< std::wstring, std::allocator< std::wstring > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "std::wstring" ", " "std::allocator< std::wstring >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_std_wstring_Sg__iterator(std::list< std::wstring > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_std_wstring_Sg____nonzero__(std::list< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_std_wstring_Sg____bool__(std::list< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< std::wstring >::size_type std_list_Sl_std_wstring_Sg____len__(std::list< std::wstring > const *self){
      return self->size();
    }
SWIGINTERN std::list< std::wstring,std::allocator< std::wstring > > *std_list_Sl_std_wstring_Sg____getslice__(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i,std::list< std::wstring >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____setslice____SWIG_0(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i,std::list< std::wstring >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< std::wstring,std::allocator< std::wstring > >());
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____setslice____SWIG_1(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i,std::list< std::wstring >::difference_type j,std::list< std::wstring,std::allocator< std::wstring > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____delslice__(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i,std::list< std::wstring >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____delitem____SWIG_0(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< std::wstring,std::allocator< std::wstring > > *std_list_Sl_std_wstring_Sg____getitem____SWIG_0(std::list< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____setitem____SWIG_0(std::list< std::wstring > *self,PySliceObject *slice,std::list< std::wstring,std::allocator< std::wstring > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____setitem____SWIG_1(std::list< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____delitem____SWIG_1(std::list< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::list< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< std::wstring >::value_type const &std_list_Sl_std_wstring_Sg____getitem____SWIG_1(std::list< std::wstring > const *self,std::list< std::wstring >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg____setitem____SWIG_2(std::list< std::wstring > *self,std::list< std::wstring >::difference_type i,std::list< std::wstring >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< std::wstring >::value_type std_list_Sl_std_wstring_Sg__pop(std::list< std::wstring > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< std::wstring,std::allocator< std::wstring > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_std_wstring_Sg__append(std::list< std::wstring > *self,std::list< std::wstring >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< std::wstring >::iterator std_list_Sl_std_wstring_Sg__erase__SWIG_0(std::list< std::wstring > *self,std::list< std::wstring >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< std::wstring >::iterator std_list_Sl_std_wstring_Sg__erase__SWIG_1(std::list< std::wstring > *self,std::list< std::wstring >::iterator first,std::list< std::wstring >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< std::wstring >::iterator std_list_Sl_std_wstring_Sg__insert__SWIG_0(std::list< std::wstring > *self,std::list< std::wstring >::iterator pos,std::list< std::wstring >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_std_wstring_Sg__insert__SWIG_1(std::list< std::wstring > *self,std::list< std::wstring >::iterator pos,std::list< std::wstring >::size_type n,std::list< std::wstring >::value_type const &x){ self->insert(pos, n, x); }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::list< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "int" ", " "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_int_Sg__iterator(std::list< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_int_Sg____nonzero__(std::list< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_int_Sg____bool__(std::list< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< int >::size_type std_list_Sl_int_Sg____len__(std::list< int > const *self){
      return self->size();
    }
SWIGINTERN std::list< int,std::allocator< int > > *std_list_Sl_int_Sg____getslice__(std::list< int > *self,std::list< int >::difference_type i,std::list< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_int_Sg____setslice____SWIG_0(std::list< int > *self,std::list< int >::difference_type i,std::list< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< int,std::allocator< int > >());
    }
SWIGINTERN void std_list_Sl_int_Sg____setslice____SWIG_1(std::list< int > *self,std::list< int >::difference_type i,std::list< int >::difference_type j,std::list< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_int_Sg____delslice__(std::list< int > *self,std::list< int >::difference_type i,std::list< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_int_Sg____delitem____SWIG_0(std::list< int > *self,std::list< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< int,std::allocator< int > > *std_list_Sl_int_Sg____getitem____SWIG_0(std::list< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< int,std::allocator< int > >::difference_type id = i;
      std::list< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_int_Sg____setitem____SWIG_0(std::list< int > *self,PySliceObject *slice,std::list< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< int,std::allocator< int > >::difference_type id = i;
      std::list< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_int_Sg____setitem____SWIG_1(std::list< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< int,std::allocator< int > >::difference_type id = i;
      std::list< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_int_Sg____delitem____SWIG_1(std::list< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< int,std::allocator< int > >::difference_type id = i;
      std::list< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< int >::value_type const &std_list_Sl_int_Sg____getitem____SWIG_1(std::list< int > const *self,std::list< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_int_Sg____setitem____SWIG_2(std::list< int > *self,std::list< int >::difference_type i,std::list< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< int >::value_type std_list_Sl_int_Sg__pop(std::list< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_int_Sg__append(std::list< int > *self,std::list< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< int >::iterator std_list_Sl_int_Sg__erase__SWIG_0(std::list< int > *self,std::list< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< int >::iterator std_list_Sl_int_Sg__erase__SWIG_1(std::list< int > *self,std::list< int >::iterator first,std::list< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< int >::iterator std_list_Sl_int_Sg__insert__SWIG_0(std::list< int > *self,std::list< int >::iterator pos,std::list< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_int_Sg__insert__SWIG_1(std::list< int > *self,std::list< int >::iterator pos,std::list< int >::size_type n,std::list< int >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::list< int,std::allocator< int > >, std::allocator< std::list< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::list< int,std::allocator< int > >" "," "std::allocator< std::list< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_list_Sl_int_Sg__Sg__iterator(std::vector< std::list< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_list_Sl_int_Sg__Sg____nonzero__(std::vector< std::list< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_list_Sl_int_Sg__Sg____bool__(std::vector< std::list< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::list< int > >::size_type std_vector_Sl_std_list_Sl_int_Sg__Sg____len__(std::vector< std::list< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *std_vector_Sl_std_list_Sl_int_Sg__Sg____getslice__(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i,std::vector< std::list< int > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____setslice____SWIG_0(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i,std::vector< std::list< int > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >());
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____setslice____SWIG_1(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i,std::vector< std::list< int > >::difference_type j,std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____delslice__(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i,std::vector< std::list< int > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *std_vector_Sl_std_list_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::list< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::list< int > > *self,PySliceObject *slice,std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::list< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::list< int > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::list< int > >::value_type const &std_vector_Sl_std_list_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::list< int > > const *self,std::vector< std::list< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_2(std::vector< std::list< int > > *self,std::vector< std::list< int > >::difference_type i,std::vector< std::list< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::list< int > >::value_type std_vector_Sl_std_list_Sl_int_Sg__Sg__pop(std::vector< std::list< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg__append(std::vector< std::list< int > > *self,std::vector< std::list< int > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::list< int > >::iterator std_vector_Sl_std_list_Sl_int_Sg__Sg__erase__SWIG_0(std::vector< std::list< int > > *self,std::vector< std::list< int > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::list< int > >::iterator std_vector_Sl_std_list_Sl_int_Sg__Sg__erase__SWIG_1(std::vector< std::list< int > > *self,std::vector< std::list< int > >::iterator first,std::vector< std::list< int > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::list< int > >::iterator std_vector_Sl_std_list_Sl_int_Sg__Sg__insert__SWIG_0(std::vector< std::list< int > > *self,std::vector< std::list< int > >::iterator pos,std::vector< std::list< int > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_list_Sl_int_Sg__Sg__insert__SWIG_1(std::vector< std::list< int > > *self,std::vector< std::list< int > >::iterator pos,std::vector< std::list< int > >::size_type n,std::vector< std::list< int > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::list< std::wstring,std::allocator< std::wstring > >, std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::list< std::wstring,std::allocator< std::wstring > >" "," "std::allocator< std::list< std::wstring,std::allocator< std::wstring > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__iterator(std::vector< std::list< std::wstring > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____nonzero__(std::vector< std::list< std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____bool__(std::vector< std::list< std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::list< std::wstring > >::size_type std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____len__(std::vector< std::list< std::wstring > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getslice__(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i,std::vector< std::list< std::wstring > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setslice____SWIG_0(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i,std::vector< std::list< std::wstring > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >());
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setslice____SWIG_1(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i,std::vector< std::list< std::wstring > >::difference_type j,std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delslice__(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i,std::vector< std::list< std::wstring > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delitem____SWIG_0(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getitem____SWIG_0(std::vector< std::list< std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type id = i;
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_0(std::vector< std::list< std::wstring > > *self,PySliceObject *slice,std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type id = i;
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_1(std::vector< std::list< std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type id = i;
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delitem____SWIG_1(std::vector< std::list< std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type id = i;
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::list< std::wstring > >::value_type const &std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getitem____SWIG_1(std::vector< std::list< std::wstring > > const *self,std::vector< std::list< std::wstring > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_2(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::difference_type i,std::vector< std::list< std::wstring > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::list< std::wstring > >::value_type std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__pop(std::vector< std::list< std::wstring > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__append(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::list< std::wstring > >::iterator std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__erase__SWIG_0(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::list< std::wstring > >::iterator std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__erase__SWIG_1(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::iterator first,std::vector< std::list< std::wstring > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::list< std::wstring > >::iterator std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__insert__SWIG_0(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::iterator pos,std::vector< std::list< std::wstring > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__insert__SWIG_1(std::vector< std::list< std::wstring > > *self,std::vector< std::list< std::wstring > >::iterator pos,std::vector< std::list< std::wstring > >::size_type n,std::vector< std::list< std::wstring > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::wstring, std::allocator< std::wstring > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::wstring" "," "std::allocator< std::wstring >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_wstring_Sg__iterator(std::vector< std::wstring > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_wstring_Sg____nonzero__(std::vector< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_wstring_Sg____bool__(std::vector< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::wstring >::size_type std_vector_Sl_std_wstring_Sg____len__(std::vector< std::wstring > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::wstring,std::allocator< std::wstring > > *std_vector_Sl_std_wstring_Sg____getslice__(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i,std::vector< std::wstring >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____setslice____SWIG_0(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i,std::vector< std::wstring >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::wstring,std::allocator< std::wstring > >());
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____setslice____SWIG_1(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i,std::vector< std::wstring >::difference_type j,std::vector< std::wstring,std::allocator< std::wstring > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____delslice__(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i,std::vector< std::wstring >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____delitem____SWIG_0(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::wstring,std::allocator< std::wstring > > *std_vector_Sl_std_wstring_Sg____getitem____SWIG_0(std::vector< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____setitem____SWIG_0(std::vector< std::wstring > *self,PySliceObject *slice,std::vector< std::wstring,std::allocator< std::wstring > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____setitem____SWIG_1(std::vector< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____delitem____SWIG_1(std::vector< std::wstring > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type id = i;
      std::vector< std::wstring,std::allocator< std::wstring > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::wstring >::value_type const &std_vector_Sl_std_wstring_Sg____getitem____SWIG_1(std::vector< std::wstring > const *self,std::vector< std::wstring >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg____setitem____SWIG_2(std::vector< std::wstring > *self,std::vector< std::wstring >::difference_type i,std::vector< std::wstring >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::wstring >::value_type std_vector_Sl_std_wstring_Sg__pop(std::vector< std::wstring > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::wstring,std::allocator< std::wstring > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__append(std::vector< std::wstring > *self,std::vector< std::wstring >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::wstring >::iterator std_vector_Sl_std_wstring_Sg__erase__SWIG_0(std::vector< std::wstring > *self,std::vector< std::wstring >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::wstring >::iterator std_vector_Sl_std_wstring_Sg__erase__SWIG_1(std::vector< std::wstring > *self,std::vector< std::wstring >::iterator first,std::vector< std::wstring >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::wstring >::iterator std_vector_Sl_std_wstring_Sg__insert__SWIG_0(std::vector< std::wstring > *self,std::vector< std::wstring >::iterator pos,std::vector< std::wstring >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__insert__SWIG_1(std::vector< std::wstring > *self,std::vector< std::wstring >::iterator pos,std::vector< std::wstring >::size_type n,std::vector< std::wstring >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< double, std::wstring > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "double" "," "std::wstring" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector< std::pair< double,std::wstring >, std::allocator< std::pair< double,std::wstring > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< double,std::wstring >" "," "std::allocator< std::pair< double,std::wstring > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__iterator(std::vector< std::pair< double,std::wstring > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____nonzero__(std::vector< std::pair< double,std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____bool__(std::vector< std::pair< double,std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::size_type std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____len__(std::vector< std::pair< double,std::wstring > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getslice__(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i,std::vector< std::pair< double,std::wstring > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setslice____SWIG_0(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i,std::vector< std::pair< double,std::wstring > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >());
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setslice____SWIG_1(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i,std::vector< std::pair< double,std::wstring > >::difference_type j,std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delslice__(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i,std::vector< std::pair< double,std::wstring > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< double,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< double,std::wstring > > *self,PySliceObject *slice,std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< double,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< double,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::value_type const &std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< double,std::wstring > > const *self,std::vector< std::pair< double,std::wstring > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_2(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::difference_type i,std::vector< std::pair< double,std::wstring > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::value_type std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__pop(std::vector< std::pair< double,std::wstring > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__append(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__erase__SWIG_0(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__erase__SWIG_1(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::iterator first,std::vector< std::pair< double,std::wstring > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::pair< double,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__insert__SWIG_0(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::iterator pos,std::vector< std::pair< double,std::wstring > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__insert__SWIG_1(std::vector< std::pair< double,std::wstring > > *self,std::vector< std::pair< double,std::wstring > >::iterator pos,std::vector< std::pair< double,std::wstring > >::size_type n,std::vector< std::pair< double,std::wstring > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::pair< std::wstring, std::wstring > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::wstring" "," "std::wstring" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector< std::pair< std::wstring,std::wstring >, std::allocator< std::pair< std::wstring,std::wstring > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< std::wstring,std::wstring >" "," "std::allocator< std::pair< std::wstring,std::wstring > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__iterator(std::vector< std::pair< std::wstring,std::wstring > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____nonzero__(std::vector< std::pair< std::wstring,std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____bool__(std::vector< std::pair< std::wstring,std::wstring > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::size_type std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____len__(std::vector< std::pair< std::wstring,std::wstring > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getslice__(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i,std::vector< std::pair< std::wstring,std::wstring > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setslice____SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i,std::vector< std::pair< std::wstring,std::wstring > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >());
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setslice____SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i,std::vector< std::pair< std::wstring,std::wstring > >::difference_type j,std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delslice__(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i,std::vector< std::pair< std::wstring,std::wstring > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,PySliceObject *slice,std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type id = i;
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::value_type const &std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > const *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_2(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::difference_type i,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::value_type std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__pop(std::vector< std::pair< std::wstring,std::wstring > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__append(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__erase__SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__erase__SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::iterator first,std::vector< std::pair< std::wstring,std::wstring > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::pair< std::wstring,std::wstring > >::iterator std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__insert__SWIG_0(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::iterator pos,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__insert__SWIG_1(std::vector< std::pair< std::wstring,std::wstring > > *self,std::vector< std::pair< std::wstring,std::wstring > >::iterator pos,std::vector< std::pair< std::wstring,std::wstring > >::size_type n,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::pair< std::wstring, int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::wstring" "," "int" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::pair< std::wstring, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::wstring" "," "double" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::list< std::pair< std::wstring,double >, std::allocator< std::pair< std::wstring,double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "std::pair< std::wstring,double >" ", " "std::allocator< std::pair< std::wstring,double > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__iterator(std::list< std::pair< std::wstring,double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____nonzero__(std::list< std::pair< std::wstring,double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____bool__(std::list< std::pair< std::wstring,double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::list< std::pair< std::wstring,double > >::size_type std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____len__(std::list< std::pair< std::wstring,double > > const *self){
      return self->size();
    }
SWIGINTERN std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getslice__(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i,std::list< std::pair< std::wstring,double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setslice____SWIG_0(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i,std::list< std::pair< std::wstring,double > >::difference_type j){
      swig::setslice(self, i, j, 1, std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >());
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setslice____SWIG_1(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i,std::list< std::pair< std::wstring,double > >::difference_type j,std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delslice__(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i,std::list< std::pair< std::wstring,double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delitem____SWIG_0(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getitem____SWIG_0(std::list< std::pair< std::wstring,double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type id = i;
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_0(std::list< std::pair< std::wstring,double > > *self,PySliceObject *slice,std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type id = i;
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_1(std::list< std::pair< std::wstring,double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type id = i;
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delitem____SWIG_1(std::list< std::pair< std::wstring,double > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type id = i;
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::list< std::pair< std::wstring,double > >::value_type const &std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getitem____SWIG_1(std::list< std::pair< std::wstring,double > > const *self,std::list< std::pair< std::wstring,double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_2(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::difference_type i,std::list< std::pair< std::wstring,double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::list< std::pair< std::wstring,double > >::value_type std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__pop(std::list< std::pair< std::wstring,double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__append(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::list< std::pair< std::wstring,double > >::iterator std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__erase__SWIG_0(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::list< std::pair< std::wstring,double > >::iterator std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__erase__SWIG_1(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::iterator first,std::list< std::pair< std::wstring,double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::list< std::pair< std::wstring,double > >::iterator std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__insert__SWIG_0(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::iterator pos,std::list< std::pair< std::wstring,double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__insert__SWIG_1(std::list< std::pair< std::wstring,double > > *self,std::list< std::pair< std::wstring,double > >::iterator pos,std::list< std::pair< std::wstring,double > >::size_type n,std::list< std::pair< std::wstring,double > >::value_type const &x){ self->insert(pos, n, x); }

#include <set>


  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set< std::wstring, std::less< std::wstring >, std::allocator< std::wstring > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::wstring" "," "std::less< std::wstring >" "," "std::allocator< std::wstring >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_std_wstring_Sg__iterator(std::set< std::wstring > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_std_wstring_Sg____nonzero__(std::set< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_std_wstring_Sg____bool__(std::set< std::wstring > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::wstring >::size_type std_set_Sl_std_wstring_Sg____len__(std::set< std::wstring > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_std_wstring_Sg__append(std::set< std::wstring > *self,std::set< std::wstring >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_std_wstring_Sg____contains__(std::set< std::wstring > *self,std::set< std::wstring >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::wstring >::value_type std_set_Sl_std_wstring_Sg____getitem__(std::set< std::wstring > const *self,std::set< std::wstring >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_std_wstring_Sg__add(std::set< std::wstring > *self,std::set< std::wstring >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_std_wstring_Sg__discard(std::set< std::wstring > *self,std::set< std::wstring >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_std_wstring_Sg__erase__SWIG_1(std::set< std::wstring > *self,std::set< std::wstring >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_std_wstring_Sg__erase__SWIG_2(std::set< std::wstring > *self,std::set< std::wstring >::iterator first,std::set< std::wstring >::iterator last){ self->erase(first, last); }


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorWord_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_iterator" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_word_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (bool)std_vector_Sl_freeling_word_Sg____nonzero__((std::vector< freeling::word > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___bool__" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (bool)std_vector_Sl_freeling_word_Sg____bool__((std::vector< freeling::word > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___len__" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = std_vector_Sl_freeling_word_Sg____len__((std::vector< freeling::word > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  std::vector< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::word,std::allocator< freeling::word > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___getslice__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___getslice__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorWord___getslice__" "', argument " "3"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::word >::difference_type >(val3);
  try {
    result = (std::vector< freeling::word,std::allocator< freeling::word > > *)std_vector_Sl_freeling_word_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  std::vector< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___setslice__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___setslice__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorWord___setslice__" "', argument " "3"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::word >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_word_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  std::vector< freeling::word >::difference_type arg3 ;
  std::vector< freeling::word,std::allocator< freeling::word > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorWord___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___setslice__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___setslice__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorWord___setslice__" "', argument " "3"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::word >::difference_type >(val3);
  {
    std::vector< freeling::word,std::allocator< freeling::word > > *ptr = (std::vector< freeling::word,std::allocator< freeling::word > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorWord___setslice__" "', argument " "4"" of type '" "std::vector< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord___setslice__" "', argument " "4"" of type '" "std::vector< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_word_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::word,std::allocator< freeling::word > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorWord___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorWord___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::__setslice__(std::vector< freeling::word >::difference_type,std::vector< freeling::word >::difference_type)\n"
    "    std::vector< freeling::word >::__setslice__(std::vector< freeling::word >::difference_type,std::vector< freeling::word >::difference_type,std::vector< freeling::word,std::allocator< freeling::word > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  std::vector< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___delslice__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___delslice__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorWord___delslice__" "', argument " "3"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::word >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_word_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___delitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___delitem__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_word_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::word,std::allocator< freeling::word > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___getitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::word,std::allocator< freeling::word > > *)std_vector_Sl_freeling_word_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___setitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::word,std::allocator< freeling::word > > *ptr = (std::vector< freeling::word,std::allocator< freeling::word > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord___setitem__" "', argument " "3"" of type '" "std::vector< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord___setitem__" "', argument " "3"" of type '" "std::vector< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_word_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::word,std::allocator< freeling::word > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___setitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_word_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___delitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_word_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorWord___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorWord___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::__delitem__(std::vector< freeling::word >::difference_type)\n"
    "    std::vector< freeling::word >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___getitem__" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___getitem__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  try {
    result = (std::vector< freeling::word >::value_type *) &std_vector_Sl_freeling_word_Sg____getitem____SWIG_1((std::vector< freeling::word > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorWord___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorWord___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::word >::__getitem__(std::vector< freeling::word >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::difference_type arg2 ;
  std::vector< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord___setitem__" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord___setitem__" "', argument " "2"" of type '" "std::vector< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord___setitem__" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord___setitem__" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_word_Sg____setitem____SWIG_2(arg1,arg2,(freeling::word const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorWord___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorWord___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorWord___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::__setitem__(PySliceObject *,std::vector< freeling::word,std::allocator< freeling::word > > const &)\n"
    "    std::vector< freeling::word >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::word >::__setitem__(std::vector< freeling::word >::difference_type,std::vector< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_pop" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  try {
    result = std_vector_Sl_freeling_word_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::word >::value_type(static_cast< const std::vector< freeling::word >::value_type& >(result))), SWIGTYPE_p_freeling__word, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_append" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorWord_append" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_append" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp2);
  std_vector_Sl_freeling_word_Sg__append(arg1,(freeling::word const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorWord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorWord")) SWIG_fail;
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorWord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorWord",&obj0)) SWIG_fail;
  {
    std::vector< freeling::word,std::allocator< freeling::word > > *ptr = (std::vector< freeling::word,std::allocator< freeling::word > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >((std::vector< freeling::word > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_empty" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (bool)((std::vector< freeling::word > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_size" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = ((std::vector< freeling::word > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_swap" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorWord_swap" "', argument " "2"" of type '" "std::vector< freeling::word > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_swap" "', argument " "2"" of type '" "std::vector< freeling::word > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::word > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_begin" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_end" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_rbegin" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_rend" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_clear" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = ((std::vector< freeling::word > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::word >::allocator_type(static_cast< const std::vector< freeling::word >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__word_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorWord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorWord",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::word >::size_type >(val1);
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_pop_back" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_resize" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_resize" "', argument " "2"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_erase" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_word_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::iterator arg2 ;
  std::vector< freeling::word >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_erase" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "3"" of type '" "std::vector< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_erase" "', argument " "3"" of type '" "std::vector< freeling::word >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_word_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorWord_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorWord_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::erase(std::vector< freeling::word >::iterator)\n"
    "    std::vector< freeling::word >::erase(std::vector< freeling::word >::iterator,std::vector< freeling::word >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorWord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word >::size_type arg1 ;
  std::vector< freeling::word >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorWord",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::word >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorWord" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorWord" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp2);
  result = (std::vector< freeling::word > *)new std::vector< freeling::word >(arg1,(std::vector< freeling::word >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorWord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorWord__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorWord__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorWord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorWord__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorWord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::vector()\n"
    "    std::vector< freeling::word >::vector(std::vector< freeling::word > const &)\n"
    "    std::vector< freeling::word >::vector(std::vector< freeling::word >::size_type)\n"
    "    std::vector< freeling::word >::vector(std::vector< freeling::word >::size_type,std::vector< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_push_back" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorWord_push_back" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_push_back" "', argument " "2"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::word >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_front" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (std::vector< freeling::word >::value_type *) &((std::vector< freeling::word > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_back" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = (std::vector< freeling::word >::value_type *) &((std::vector< freeling::word > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type arg2 ;
  std::vector< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_assign" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_assign" "', argument " "2"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord_assign" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_assign" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::word >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type arg2 ;
  std::vector< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_resize" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_resize" "', argument " "2"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord_resize" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_resize" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::word >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorWord_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorWord_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::resize(std::vector< freeling::word >::size_type)\n"
    "    std::vector< freeling::word >::resize(std::vector< freeling::word >::size_type,std::vector< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::iterator arg2 ;
  std::vector< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorWord_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_insert" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_insert" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_insert" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorWord_insert" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_insert" "', argument " "3"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp3);
  result = std_vector_Sl_freeling_word_Sg__insert__SWIG_0(arg1,arg2,(freeling::word const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::iterator arg2 ;
  std::vector< freeling::word >::size_type arg3 ;
  std::vector< freeling::word >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorWord_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_insert" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_insert" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorWord_insert" "', argument " "2"" of type '" "std::vector< freeling::word >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorWord_insert" "', argument " "3"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::word >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorWord_insert" "', argument " "4"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorWord_insert" "', argument " "4"" of type '" "std::vector< freeling::word >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::word >::value_type * >(argp4);
  std_vector_Sl_freeling_word_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::word const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorWord_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__word, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorWord_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorWord_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::word >::insert(std::vector< freeling::word >::iterator,std::vector< freeling::word >::value_type const &)\n"
    "    std::vector< freeling::word >::insert(std::vector< freeling::word >::iterator,std::vector< freeling::word >::size_type,std::vector< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorWord_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  std::vector< freeling::word >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorWord_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_reserve" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorWord_reserve" "', argument " "2"" of type '" "std::vector< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::word >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorWord_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorWord_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorWord_capacity" "', argument " "1"" of type '" "std::vector< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  result = ((std::vector< freeling::word > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorWord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::word > *arg1 = (std::vector< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorWord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorWord" "', argument " "1"" of type '" "std::vector< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::word > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorWord_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListWord_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_iterator" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_freeling_word_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___nonzero__" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (bool)std_list_Sl_freeling_word_Sg____nonzero__((std::list< freeling::word > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___bool__" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (bool)std_list_Sl_freeling_word_Sg____bool__((std::list< freeling::word > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___len__" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = std_list_Sl_freeling_word_Sg____len__((std::list< freeling::word > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  std::list< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___getslice__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___getslice__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListWord___getslice__" "', argument " "3"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::word >::difference_type >(val3);
  try {
    result = (std::list< freeling::word,std::allocator< freeling::word > > *)std_list_Sl_freeling_word_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  std::list< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___setslice__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___setslice__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListWord___setslice__" "', argument " "3"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::word >::difference_type >(val3);
  try {
    std_list_Sl_freeling_word_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  std::list< freeling::word >::difference_type arg3 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListWord___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___setslice__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___setslice__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListWord___setslice__" "', argument " "3"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::word >::difference_type >(val3);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListWord___setslice__" "', argument " "4"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord___setslice__" "', argument " "4"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_freeling_word_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListWord___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListWord___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::__setslice__(std::list< freeling::word >::difference_type,std::list< freeling::word >::difference_type)\n"
    "    std::list< freeling::word >::__setslice__(std::list< freeling::word >::difference_type,std::list< freeling::word >::difference_type,std::list< freeling::word,std::allocator< freeling::word > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  std::list< freeling::word >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___delslice__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___delslice__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListWord___delslice__" "', argument " "3"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::word >::difference_type >(val3);
  try {
    std_list_Sl_freeling_word_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___delitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___delitem__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  try {
    std_list_Sl_freeling_word_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___getitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< freeling::word,std::allocator< freeling::word > > *)std_list_Sl_freeling_word_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___setitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListWord___setitem__" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord___setitem__" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_freeling_word_Sg____setitem____SWIG_0(arg1,arg2,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___setitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_word_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___delitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_word_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListWord___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListWord___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::__delitem__(std::list< freeling::word >::difference_type)\n"
    "    std::list< freeling::word >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___getitem__" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___getitem__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  try {
    result = (std::list< freeling::word >::value_type *) &std_list_Sl_freeling_word_Sg____getitem____SWIG_1((std::list< freeling::word > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListWord___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListWord___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::__getitem__(PySliceObject *)\n"
    "    std::list< freeling::word >::__getitem__(std::list< freeling::word >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::difference_type arg2 ;
  std::list< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord___setitem__" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord___setitem__" "', argument " "2"" of type '" "std::list< freeling::word >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListWord___setitem__" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord___setitem__" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp3);
  try {
    std_list_Sl_freeling_word_Sg____setitem____SWIG_2(arg1,arg2,(freeling::word const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListWord___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListWord___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListWord___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::__setitem__(PySliceObject *,std::list< freeling::word,std::allocator< freeling::word > > const &)\n"
    "    std::list< freeling::word >::__setitem__(PySliceObject *)\n"
    "    std::list< freeling::word >::__setitem__(std::list< freeling::word >::difference_type,std::list< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_pop" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  try {
    result = std_list_Sl_freeling_word_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::list< freeling::word >::value_type(static_cast< const std::list< freeling::word >::value_type& >(result))), SWIGTYPE_p_freeling__word, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_append" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListWord_append" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_append" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp2);
  std_list_Sl_freeling_word_Sg__append(arg1,(freeling::word const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListWord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListWord")) SWIG_fail;
  result = (std::list< freeling::word > *)new std::list< freeling::word >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListWord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListWord",&obj0)) SWIG_fail;
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListWord" "', argument " "1"" of type '" "std::list< freeling::word > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListWord" "', argument " "1"" of type '" "std::list< freeling::word > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< freeling::word > *)new std::list< freeling::word >((std::list< freeling::word > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_empty" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (bool)((std::list< freeling::word > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_size" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = ((std::list< freeling::word > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_swap" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListWord_swap" "', argument " "2"" of type '" "std::list< freeling::word > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_swap" "', argument " "2"" of type '" "std::list< freeling::word > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::word > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_begin" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_end" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_rbegin" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_rend" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_clear" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_get_allocator" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = ((std::list< freeling::word > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< freeling::word >::allocator_type(static_cast< const std::list< freeling::word >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__word_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListWord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListWord",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListWord" "', argument " "1"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::word >::size_type >(val1);
  result = (std::list< freeling::word > *)new std::list< freeling::word >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_pop_back" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_resize" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord_resize" "', argument " "2"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_erase" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_word_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::iterator arg2 ;
  std::list< freeling::word >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_erase" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "3"" of type '" "std::list< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_erase" "', argument " "3"" of type '" "std::list< freeling::word >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_word_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListWord_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListWord_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::erase(std::list< freeling::word >::iterator)\n"
    "    std::list< freeling::word >::erase(std::list< freeling::word >::iterator,std::list< freeling::word >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListWord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word >::size_type arg1 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::word > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListWord",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListWord" "', argument " "1"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::word >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListWord" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListWord" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp2);
  result = (std::list< freeling::word > *)new std::list< freeling::word >(arg1,(std::list< freeling::word >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListWord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListWord__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListWord__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListWord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListWord__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListWord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::list()\n"
    "    std::list< freeling::word >::list(std::list< freeling::word > const &)\n"
    "    std::list< freeling::word >::list(std::list< freeling::word >::size_type)\n"
    "    std::list< freeling::word >::list(std::list< freeling::word >::size_type,std::list< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_push_back" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListWord_push_back" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_push_back" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp2);
  (arg1)->push_back((std::list< freeling::word >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_front" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (std::list< freeling::word >::value_type *) &((std::list< freeling::word > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_back" "', argument " "1"" of type '" "std::list< freeling::word > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  result = (std::list< freeling::word >::value_type *) &((std::list< freeling::word > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::size_type arg2 ;
  std::list< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_assign" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord_assign" "', argument " "2"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListWord_assign" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_assign" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::list< freeling::word >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::size_type arg2 ;
  std::list< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_resize" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListWord_resize" "', argument " "2"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::word >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListWord_resize" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_resize" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::list< freeling::word >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListWord_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListWord_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::resize(std::list< freeling::word >::size_type)\n"
    "    std::list< freeling::word >::resize(std::list< freeling::word >::size_type,std::list< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::iterator arg2 ;
  std::list< freeling::word >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::word >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListWord_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_insert" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_insert" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_insert" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListWord_insert" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_insert" "', argument " "3"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp3);
  result = std_list_Sl_freeling_word_Sg__insert__SWIG_0(arg1,arg2,(freeling::word const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::word >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::iterator arg2 ;
  std::list< freeling::word >::size_type arg3 ;
  std::list< freeling::word >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListWord_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_insert" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_insert" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListWord_insert" "', argument " "2"" of type '" "std::list< freeling::word >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListWord_insert" "', argument " "3"" of type '" "std::list< freeling::word >::size_type""'");
  } 
  arg3 = static_cast< std::list< freeling::word >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListWord_insert" "', argument " "4"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_insert" "', argument " "4"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp4);
  std_list_Sl_freeling_word_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::word const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListWord_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::word >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__word, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListWord_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListWord_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::word >::insert(std::list< freeling::word >::iterator,std::list< freeling::word >::value_type const &)\n"
    "    std::list< freeling::word >::insert(std::list< freeling::word >::iterator,std::list< freeling::word >::size_type,std::list< freeling::word >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListWord_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_pop_front" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  std::list< freeling::word >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListWord_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_push_front" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListWord_push_front" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListWord_push_front" "', argument " "2"" of type '" "std::list< freeling::word >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::word >::value_type * >(argp2);
  (arg1)->push_front((std::list< freeling::word >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListWord_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListWord_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListWord_reverse" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListWord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word > *arg1 = (std::list< freeling::word > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListWord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListWord" "', argument " "1"" of type '" "std::list< freeling::word > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::word > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListWord_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListAnalysis_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_iterator" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_freeling_analysis_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___nonzero__" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (bool)std_list_Sl_freeling_analysis_Sg____nonzero__((std::list< freeling::analysis > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___bool__" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (bool)std_list_Sl_freeling_analysis_Sg____bool__((std::list< freeling::analysis > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___len__" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = std_list_Sl_freeling_analysis_Sg____len__((std::list< freeling::analysis > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  std::list< freeling::analysis >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___getslice__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___getslice__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListAnalysis___getslice__" "', argument " "3"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::analysis >::difference_type >(val3);
  try {
    result = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)std_list_Sl_freeling_analysis_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  std::list< freeling::analysis >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___setslice__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___setslice__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListAnalysis___setslice__" "', argument " "3"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::analysis >::difference_type >(val3);
  try {
    std_list_Sl_freeling_analysis_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  std::list< freeling::analysis >::difference_type arg3 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListAnalysis___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___setslice__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___setslice__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListAnalysis___setslice__" "', argument " "3"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::analysis >::difference_type >(val3);
  {
    std::list< freeling::analysis,std::allocator< freeling::analysis > > *ptr = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListAnalysis___setslice__" "', argument " "4"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis___setslice__" "', argument " "4"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_freeling_analysis_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListAnalysis___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListAnalysis___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::__setslice__(std::list< freeling::analysis >::difference_type,std::list< freeling::analysis >::difference_type)\n"
    "    std::list< freeling::analysis >::__setslice__(std::list< freeling::analysis >::difference_type,std::list< freeling::analysis >::difference_type,std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  std::list< freeling::analysis >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___delslice__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___delslice__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListAnalysis___delslice__" "', argument " "3"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::analysis >::difference_type >(val3);
  try {
    std_list_Sl_freeling_analysis_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___delitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___delitem__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  try {
    std_list_Sl_freeling_analysis_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___getitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)std_list_Sl_freeling_analysis_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___setitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< freeling::analysis,std::allocator< freeling::analysis > > *ptr = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListAnalysis___setitem__" "', argument " "3"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis___setitem__" "', argument " "3"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_freeling_analysis_Sg____setitem____SWIG_0(arg1,arg2,(std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___setitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_analysis_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___delitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_analysis_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListAnalysis___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListAnalysis___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::__delitem__(std::list< freeling::analysis >::difference_type)\n"
    "    std::list< freeling::analysis >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::analysis >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___getitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___getitem__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  try {
    result = (std::list< freeling::analysis >::value_type *) &std_list_Sl_freeling_analysis_Sg____getitem____SWIG_1((std::list< freeling::analysis > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListAnalysis___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListAnalysis___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::__getitem__(PySliceObject *)\n"
    "    std::list< freeling::analysis >::__getitem__(std::list< freeling::analysis >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::difference_type arg2 ;
  std::list< freeling::analysis >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis___setitem__" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis___setitem__" "', argument " "2"" of type '" "std::list< freeling::analysis >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListAnalysis___setitem__" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis___setitem__" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp3);
  try {
    std_list_Sl_freeling_analysis_Sg____setitem____SWIG_2(arg1,arg2,(freeling::analysis const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListAnalysis___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListAnalysis___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListAnalysis___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::__setitem__(PySliceObject *,std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)\n"
    "    std::list< freeling::analysis >::__setitem__(PySliceObject *)\n"
    "    std::list< freeling::analysis >::__setitem__(std::list< freeling::analysis >::difference_type,std::list< freeling::analysis >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_pop" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  try {
    result = std_list_Sl_freeling_analysis_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::list< freeling::analysis >::value_type(static_cast< const std::list< freeling::analysis >::value_type& >(result))), SWIGTYPE_p_freeling__analysis, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_append" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListAnalysis_append" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_append" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp2);
  std_list_Sl_freeling_analysis_Sg__append(arg1,(freeling::analysis const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListAnalysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListAnalysis")) SWIG_fail;
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListAnalysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListAnalysis",&obj0)) SWIG_fail;
  {
    std::list< freeling::analysis,std::allocator< freeling::analysis > > *ptr = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >((std::list< freeling::analysis > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_empty" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (bool)((std::list< freeling::analysis > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_size" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = ((std::list< freeling::analysis > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_swap" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListAnalysis_swap" "', argument " "2"" of type '" "std::list< freeling::analysis > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_swap" "', argument " "2"" of type '" "std::list< freeling::analysis > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::analysis > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_begin" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_end" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_rbegin" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_rend" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_clear" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::analysis > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_get_allocator" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = ((std::list< freeling::analysis > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< freeling::analysis >::allocator_type(static_cast< const std::list< freeling::analysis >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__analysis_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListAnalysis__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListAnalysis",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::analysis >::size_type >(val1);
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_pop_back" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_resize" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis_resize" "', argument " "2"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::analysis >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_erase" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_analysis_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::iterator arg2 ;
  std::list< freeling::analysis >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::analysis >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_erase" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "3"" of type '" "std::list< freeling::analysis >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_erase" "', argument " "3"" of type '" "std::list< freeling::analysis >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_analysis_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListAnalysis_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListAnalysis_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::erase(std::list< freeling::analysis >::iterator)\n"
    "    std::list< freeling::analysis >::erase(std::list< freeling::analysis >::iterator,std::list< freeling::analysis >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListAnalysis__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis >::size_type arg1 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::analysis > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListAnalysis",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::analysis >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListAnalysis" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListAnalysis" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp2);
  result = (std::list< freeling::analysis > *)new std::list< freeling::analysis >(arg1,(std::list< freeling::analysis >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListAnalysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListAnalysis__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListAnalysis__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListAnalysis__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__analysis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListAnalysis__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListAnalysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::list()\n"
    "    std::list< freeling::analysis >::list(std::list< freeling::analysis > const &)\n"
    "    std::list< freeling::analysis >::list(std::list< freeling::analysis >::size_type)\n"
    "    std::list< freeling::analysis >::list(std::list< freeling::analysis >::size_type,std::list< freeling::analysis >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_push_back" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListAnalysis_push_back" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_push_back" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp2);
  (arg1)->push_back((std::list< freeling::analysis >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_front" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (std::list< freeling::analysis >::value_type *) &((std::list< freeling::analysis > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_back" "', argument " "1"" of type '" "std::list< freeling::analysis > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  result = (std::list< freeling::analysis >::value_type *) &((std::list< freeling::analysis > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::size_type arg2 ;
  std::list< freeling::analysis >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_assign" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis_assign" "', argument " "2"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListAnalysis_assign" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_assign" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::list< freeling::analysis >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::size_type arg2 ;
  std::list< freeling::analysis >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_resize" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListAnalysis_resize" "', argument " "2"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::analysis >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListAnalysis_resize" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_resize" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::list< freeling::analysis >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListAnalysis_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListAnalysis_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::resize(std::list< freeling::analysis >::size_type)\n"
    "    std::list< freeling::analysis >::resize(std::list< freeling::analysis >::size_type,std::list< freeling::analysis >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::iterator arg2 ;
  std::list< freeling::analysis >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::analysis >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListAnalysis_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_insert" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_insert" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_insert" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListAnalysis_insert" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_insert" "', argument " "3"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp3);
  result = std_list_Sl_freeling_analysis_Sg__insert__SWIG_0(arg1,arg2,(freeling::analysis const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::analysis >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::iterator arg2 ;
  std::list< freeling::analysis >::size_type arg3 ;
  std::list< freeling::analysis >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListAnalysis_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_insert" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_insert" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListAnalysis_insert" "', argument " "2"" of type '" "std::list< freeling::analysis >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListAnalysis_insert" "', argument " "3"" of type '" "std::list< freeling::analysis >::size_type""'");
  } 
  arg3 = static_cast< std::list< freeling::analysis >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListAnalysis_insert" "', argument " "4"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_insert" "', argument " "4"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp4);
  std_list_Sl_freeling_analysis_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::analysis const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__analysis, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListAnalysis_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::analysis >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__analysis, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListAnalysis_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListAnalysis_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::analysis >::insert(std::list< freeling::analysis >::iterator,std::list< freeling::analysis >::value_type const &)\n"
    "    std::list< freeling::analysis >::insert(std::list< freeling::analysis >::iterator,std::list< freeling::analysis >::size_type,std::list< freeling::analysis >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_pop_front" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  std::list< freeling::analysis >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListAnalysis_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_push_front" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListAnalysis_push_front" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListAnalysis_push_front" "', argument " "2"" of type '" "std::list< freeling::analysis >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::analysis >::value_type * >(argp2);
  (arg1)->push_front((std::list< freeling::analysis >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListAnalysis_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListAnalysis_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListAnalysis_reverse" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListAnalysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::analysis > *arg1 = (std::list< freeling::analysis > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListAnalysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListAnalysis" "', argument " "1"" of type '" "std::list< freeling::analysis > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::analysis > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListAnalysis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListSentence_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_iterator" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_freeling_sentence_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___nonzero__" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (bool)std_list_Sl_freeling_sentence_Sg____nonzero__((std::list< freeling::sentence > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___bool__" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (bool)std_list_Sl_freeling_sentence_Sg____bool__((std::list< freeling::sentence > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___len__" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = std_list_Sl_freeling_sentence_Sg____len__((std::list< freeling::sentence > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  std::list< freeling::sentence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___getslice__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___getslice__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListSentence___getslice__" "', argument " "3"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::sentence >::difference_type >(val3);
  try {
    result = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)std_list_Sl_freeling_sentence_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  std::list< freeling::sentence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___setslice__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___setslice__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListSentence___setslice__" "', argument " "3"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::sentence >::difference_type >(val3);
  try {
    std_list_Sl_freeling_sentence_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  std::list< freeling::sentence >::difference_type arg3 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListSentence___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___setslice__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___setslice__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListSentence___setslice__" "', argument " "3"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::sentence >::difference_type >(val3);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListSentence___setslice__" "', argument " "4"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence___setslice__" "', argument " "4"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_freeling_sentence_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListSentence___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListSentence___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::__setslice__(std::list< freeling::sentence >::difference_type,std::list< freeling::sentence >::difference_type)\n"
    "    std::list< freeling::sentence >::__setslice__(std::list< freeling::sentence >::difference_type,std::list< freeling::sentence >::difference_type,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  std::list< freeling::sentence >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___delslice__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___delslice__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListSentence___delslice__" "', argument " "3"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::sentence >::difference_type >(val3);
  try {
    std_list_Sl_freeling_sentence_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___delitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___delitem__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  try {
    std_list_Sl_freeling_sentence_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___getitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)std_list_Sl_freeling_sentence_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___setitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListSentence___setitem__" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence___setitem__" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_freeling_sentence_Sg____setitem____SWIG_0(arg1,arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___setitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_sentence_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___delitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_sentence_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListSentence___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListSentence___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::__delitem__(std::list< freeling::sentence >::difference_type)\n"
    "    std::list< freeling::sentence >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___getitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___getitem__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  try {
    result = (std::list< freeling::sentence >::value_type *) &std_list_Sl_freeling_sentence_Sg____getitem____SWIG_1((std::list< freeling::sentence > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListSentence___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListSentence___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::__getitem__(PySliceObject *)\n"
    "    std::list< freeling::sentence >::__getitem__(std::list< freeling::sentence >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::difference_type arg2 ;
  std::list< freeling::sentence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence___setitem__" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence___setitem__" "', argument " "2"" of type '" "std::list< freeling::sentence >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListSentence___setitem__" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence___setitem__" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp3);
  try {
    std_list_Sl_freeling_sentence_Sg____setitem____SWIG_2(arg1,arg2,(freeling::sentence const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListSentence___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListSentence___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListSentence___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::__setitem__(PySliceObject *,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)\n"
    "    std::list< freeling::sentence >::__setitem__(PySliceObject *)\n"
    "    std::list< freeling::sentence >::__setitem__(std::list< freeling::sentence >::difference_type,std::list< freeling::sentence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_pop" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  try {
    result = std_list_Sl_freeling_sentence_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::list< freeling::sentence >::value_type(static_cast< const std::list< freeling::sentence >::value_type& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_append" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListSentence_append" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_append" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp2);
  std_list_Sl_freeling_sentence_Sg__append(arg1,(freeling::sentence const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListSentence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListSentence")) SWIG_fail;
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListSentence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListSentence",&obj0)) SWIG_fail;
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >((std::list< freeling::sentence > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_empty" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (bool)((std::list< freeling::sentence > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_size" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = ((std::list< freeling::sentence > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_swap" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListSentence_swap" "', argument " "2"" of type '" "std::list< freeling::sentence > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_swap" "', argument " "2"" of type '" "std::list< freeling::sentence > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_begin" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_end" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_rbegin" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_rend" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_clear" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_get_allocator" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = ((std::list< freeling::sentence > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< freeling::sentence >::allocator_type(static_cast< const std::list< freeling::sentence >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__sentence_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListSentence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListSentence",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::sentence >::size_type >(val1);
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_pop_back" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_resize" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence_resize" "', argument " "2"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_erase" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_sentence_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::iterator arg2 ;
  std::list< freeling::sentence >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::sentence >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_erase" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "3"" of type '" "std::list< freeling::sentence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_erase" "', argument " "3"" of type '" "std::list< freeling::sentence >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_sentence_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListSentence_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListSentence_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::erase(std::list< freeling::sentence >::iterator)\n"
    "    std::list< freeling::sentence >::erase(std::list< freeling::sentence >::iterator,std::list< freeling::sentence >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListSentence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence >::size_type arg1 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListSentence",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::sentence >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListSentence" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListSentence" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp2);
  result = (std::list< freeling::sentence > *)new std::list< freeling::sentence >(arg1,(std::list< freeling::sentence >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListSentence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListSentence__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListSentence__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListSentence__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListSentence__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListSentence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::list()\n"
    "    std::list< freeling::sentence >::list(std::list< freeling::sentence > const &)\n"
    "    std::list< freeling::sentence >::list(std::list< freeling::sentence >::size_type)\n"
    "    std::list< freeling::sentence >::list(std::list< freeling::sentence >::size_type,std::list< freeling::sentence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_push_back" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListSentence_push_back" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_push_back" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp2);
  (arg1)->push_back((std::list< freeling::sentence >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_front" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (std::list< freeling::sentence >::value_type *) &((std::list< freeling::sentence > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::sentence >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_back" "', argument " "1"" of type '" "std::list< freeling::sentence > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  result = (std::list< freeling::sentence >::value_type *) &((std::list< freeling::sentence > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::size_type arg2 ;
  std::list< freeling::sentence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_assign" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence_assign" "', argument " "2"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListSentence_assign" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_assign" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::list< freeling::sentence >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::size_type arg2 ;
  std::list< freeling::sentence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_resize" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListSentence_resize" "', argument " "2"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::sentence >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListSentence_resize" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_resize" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::list< freeling::sentence >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListSentence_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListSentence_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::resize(std::list< freeling::sentence >::size_type)\n"
    "    std::list< freeling::sentence >::resize(std::list< freeling::sentence >::size_type,std::list< freeling::sentence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::iterator arg2 ;
  std::list< freeling::sentence >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::sentence >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListSentence_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_insert" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_insert" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_insert" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListSentence_insert" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_insert" "', argument " "3"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp3);
  result = std_list_Sl_freeling_sentence_Sg__insert__SWIG_0(arg1,arg2,(freeling::sentence const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::sentence >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::iterator arg2 ;
  std::list< freeling::sentence >::size_type arg3 ;
  std::list< freeling::sentence >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListSentence_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_insert" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_insert" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListSentence_insert" "', argument " "2"" of type '" "std::list< freeling::sentence >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListSentence_insert" "', argument " "3"" of type '" "std::list< freeling::sentence >::size_type""'");
  } 
  arg3 = static_cast< std::list< freeling::sentence >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListSentence_insert" "', argument " "4"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_insert" "', argument " "4"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp4);
  std_list_Sl_freeling_sentence_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::sentence const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__sentence, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListSentence_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::sentence >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__sentence, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListSentence_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListSentence_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::sentence >::insert(std::list< freeling::sentence >::iterator,std::list< freeling::sentence >::value_type const &)\n"
    "    std::list< freeling::sentence >::insert(std::list< freeling::sentence >::iterator,std::list< freeling::sentence >::size_type,std::list< freeling::sentence >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListSentence_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_pop_front" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  std::list< freeling::sentence >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListSentence_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_push_front" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListSentence_push_front" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListSentence_push_front" "', argument " "2"" of type '" "std::list< freeling::sentence >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence >::value_type * >(argp2);
  (arg1)->push_front((std::list< freeling::sentence >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListSentence_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListSentence_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListSentence_reverse" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListSentence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence > *arg1 = (std::list< freeling::sentence > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListSentence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListSentence" "', argument " "1"" of type '" "std::list< freeling::sentence > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::sentence > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListSentence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListParagraph_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_iterator" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_freeling_paragraph_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___nonzero__" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (bool)std_list_Sl_freeling_paragraph_Sg____nonzero__((std::list< freeling::paragraph > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___bool__" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (bool)std_list_Sl_freeling_paragraph_Sg____bool__((std::list< freeling::paragraph > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___len__" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = std_list_Sl_freeling_paragraph_Sg____len__((std::list< freeling::paragraph > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  std::list< freeling::paragraph >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___getslice__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___getslice__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListParagraph___getslice__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::paragraph >::difference_type >(val3);
  try {
    result = (std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)std_list_Sl_freeling_paragraph_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  std::list< freeling::paragraph >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___setslice__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___setslice__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListParagraph___setslice__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::paragraph >::difference_type >(val3);
  try {
    std_list_Sl_freeling_paragraph_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  std::list< freeling::paragraph >::difference_type arg3 ;
  std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListParagraph___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___setslice__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___setslice__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListParagraph___setslice__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::paragraph >::difference_type >(val3);
  {
    std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *ptr = (std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListParagraph___setslice__" "', argument " "4"" of type '" "std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph___setslice__" "', argument " "4"" of type '" "std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_freeling_paragraph_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListParagraph___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListParagraph___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::__setslice__(std::list< freeling::paragraph >::difference_type,std::list< freeling::paragraph >::difference_type)\n"
    "    std::list< freeling::paragraph >::__setslice__(std::list< freeling::paragraph >::difference_type,std::list< freeling::paragraph >::difference_type,std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  std::list< freeling::paragraph >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___delslice__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___delslice__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListParagraph___delslice__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg3 = static_cast< std::list< freeling::paragraph >::difference_type >(val3);
  try {
    std_list_Sl_freeling_paragraph_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___delitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___delitem__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  try {
    std_list_Sl_freeling_paragraph_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___getitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)std_list_Sl_freeling_paragraph_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___setitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *ptr = (std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListParagraph___setitem__" "', argument " "3"" of type '" "std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph___setitem__" "', argument " "3"" of type '" "std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_0(arg1,arg2,(std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___setitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___delitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_freeling_paragraph_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListParagraph___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListParagraph___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::__delitem__(std::list< freeling::paragraph >::difference_type)\n"
    "    std::list< freeling::paragraph >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::paragraph >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___getitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___getitem__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  try {
    result = (std::list< freeling::paragraph >::value_type *) &std_list_Sl_freeling_paragraph_Sg____getitem____SWIG_1((std::list< freeling::paragraph > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListParagraph___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListParagraph___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::__getitem__(PySliceObject *)\n"
    "    std::list< freeling::paragraph >::__getitem__(std::list< freeling::paragraph >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::difference_type arg2 ;
  std::list< freeling::paragraph >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph___setitem__" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph___setitem__" "', argument " "2"" of type '" "std::list< freeling::paragraph >::difference_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListParagraph___setitem__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph___setitem__" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp3);
  try {
    std_list_Sl_freeling_paragraph_Sg____setitem____SWIG_2(arg1,arg2,(freeling::paragraph const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListParagraph___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListParagraph___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__paragraph, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListParagraph___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::__setitem__(PySliceObject *,std::list< freeling::paragraph,std::allocator< freeling::paragraph > > const &)\n"
    "    std::list< freeling::paragraph >::__setitem__(PySliceObject *)\n"
    "    std::list< freeling::paragraph >::__setitem__(std::list< freeling::paragraph >::difference_type,std::list< freeling::paragraph >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_pop" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  try {
    result = std_list_Sl_freeling_paragraph_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::list< freeling::paragraph >::value_type(static_cast< const std::list< freeling::paragraph >::value_type& >(result))), SWIGTYPE_p_freeling__paragraph, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_append" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListParagraph_append" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_append" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp2);
  std_list_Sl_freeling_paragraph_Sg__append(arg1,(freeling::paragraph const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListParagraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListParagraph")) SWIG_fail;
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListParagraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListParagraph",&obj0)) SWIG_fail;
  {
    std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *ptr = (std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >((std::list< freeling::paragraph > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_empty" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (bool)((std::list< freeling::paragraph > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_size" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = ((std::list< freeling::paragraph > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_swap" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListParagraph_swap" "', argument " "2"" of type '" "std::list< freeling::paragraph > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_swap" "', argument " "2"" of type '" "std::list< freeling::paragraph > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::paragraph > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_begin" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_end" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_rbegin" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_rend" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_clear" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::paragraph > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_get_allocator" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = ((std::list< freeling::paragraph > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< freeling::paragraph >::allocator_type(static_cast< const std::list< freeling::paragraph >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__paragraph_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListParagraph__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListParagraph",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::paragraph >::size_type >(val1);
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_pop_back" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_resize" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph_resize" "', argument " "2"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::paragraph >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_erase" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_paragraph_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::iterator arg2 ;
  std::list< freeling::paragraph >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::paragraph >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_erase" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "3"" of type '" "std::list< freeling::paragraph >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_erase" "', argument " "3"" of type '" "std::list< freeling::paragraph >::iterator""'");
    }
  }
  result = std_list_Sl_freeling_paragraph_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListParagraph_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListParagraph_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::erase(std::list< freeling::paragraph >::iterator)\n"
    "    std::list< freeling::paragraph >::erase(std::list< freeling::paragraph >::iterator,std::list< freeling::paragraph >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListParagraph__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph >::size_type arg1 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::paragraph > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListParagraph",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg1 = static_cast< std::list< freeling::paragraph >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListParagraph" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListParagraph" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp2);
  result = (std::list< freeling::paragraph > *)new std::list< freeling::paragraph >(arg1,(std::list< freeling::paragraph >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListParagraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListParagraph__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListParagraph__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListParagraph__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__paragraph, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListParagraph__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListParagraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::list()\n"
    "    std::list< freeling::paragraph >::list(std::list< freeling::paragraph > const &)\n"
    "    std::list< freeling::paragraph >::list(std::list< freeling::paragraph >::size_type)\n"
    "    std::list< freeling::paragraph >::list(std::list< freeling::paragraph >::size_type,std::list< freeling::paragraph >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_push_back" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListParagraph_push_back" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_push_back" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp2);
  (arg1)->push_back((std::list< freeling::paragraph >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_front" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (std::list< freeling::paragraph >::value_type *) &((std::list< freeling::paragraph > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::paragraph >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_back" "', argument " "1"" of type '" "std::list< freeling::paragraph > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  result = (std::list< freeling::paragraph >::value_type *) &((std::list< freeling::paragraph > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::size_type arg2 ;
  std::list< freeling::paragraph >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_assign" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph_assign" "', argument " "2"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListParagraph_assign" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_assign" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::list< freeling::paragraph >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::size_type arg2 ;
  std::list< freeling::paragraph >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_resize" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListParagraph_resize" "', argument " "2"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg2 = static_cast< std::list< freeling::paragraph >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListParagraph_resize" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_resize" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::list< freeling::paragraph >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListParagraph_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__paragraph, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListParagraph_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::resize(std::list< freeling::paragraph >::size_type)\n"
    "    std::list< freeling::paragraph >::resize(std::list< freeling::paragraph >::size_type,std::list< freeling::paragraph >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::iterator arg2 ;
  std::list< freeling::paragraph >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::paragraph >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListParagraph_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_insert" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_insert" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_insert" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListParagraph_insert" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_insert" "', argument " "3"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp3);
  result = std_list_Sl_freeling_paragraph_Sg__insert__SWIG_0(arg1,arg2,(freeling::paragraph const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< freeling::paragraph >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::iterator arg2 ;
  std::list< freeling::paragraph >::size_type arg3 ;
  std::list< freeling::paragraph >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListParagraph_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_insert" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_insert" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListParagraph_insert" "', argument " "2"" of type '" "std::list< freeling::paragraph >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListParagraph_insert" "', argument " "3"" of type '" "std::list< freeling::paragraph >::size_type""'");
  } 
  arg3 = static_cast< std::list< freeling::paragraph >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListParagraph_insert" "', argument " "4"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_insert" "', argument " "4"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp4);
  std_list_Sl_freeling_paragraph_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::paragraph const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__paragraph, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListParagraph_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::paragraph,std::allocator< freeling::paragraph > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< freeling::paragraph >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__paragraph, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListParagraph_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListParagraph_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< freeling::paragraph >::insert(std::list< freeling::paragraph >::iterator,std::list< freeling::paragraph >::value_type const &)\n"
    "    std::list< freeling::paragraph >::insert(std::list< freeling::paragraph >::iterator,std::list< freeling::paragraph >::size_type,std::list< freeling::paragraph >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListParagraph_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_pop_front" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  std::list< freeling::paragraph >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListParagraph_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_push_front" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__paragraph,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListParagraph_push_front" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListParagraph_push_front" "', argument " "2"" of type '" "std::list< freeling::paragraph >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::paragraph >::value_type * >(argp2);
  (arg1)->push_front((std::list< freeling::paragraph >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListParagraph_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListParagraph_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListParagraph_reverse" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListParagraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::paragraph > *arg1 = (std::list< freeling::paragraph > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListParagraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListParagraph" "', argument " "1"" of type '" "std::list< freeling::paragraph > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< freeling::paragraph > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListParagraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorArgument_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_iterator" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_argument_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (bool)std_vector_Sl_freeling_argument_Sg____nonzero__((std::vector< freeling::argument > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___bool__" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (bool)std_vector_Sl_freeling_argument_Sg____bool__((std::vector< freeling::argument > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___len__" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = std_vector_Sl_freeling_argument_Sg____len__((std::vector< freeling::argument > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  std::vector< freeling::argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::argument,std::allocator< freeling::argument > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___getslice__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___getslice__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorArgument___getslice__" "', argument " "3"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::argument >::difference_type >(val3);
  try {
    result = (std::vector< freeling::argument,std::allocator< freeling::argument > > *)std_vector_Sl_freeling_argument_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  std::vector< freeling::argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___setslice__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___setslice__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorArgument___setslice__" "', argument " "3"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::argument >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_argument_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  std::vector< freeling::argument >::difference_type arg3 ;
  std::vector< freeling::argument,std::allocator< freeling::argument > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorArgument___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___setslice__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___setslice__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorArgument___setslice__" "', argument " "3"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::argument >::difference_type >(val3);
  {
    std::vector< freeling::argument,std::allocator< freeling::argument > > *ptr = (std::vector< freeling::argument,std::allocator< freeling::argument > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorArgument___setslice__" "', argument " "4"" of type '" "std::vector< freeling::argument,std::allocator< freeling::argument > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument___setslice__" "', argument " "4"" of type '" "std::vector< freeling::argument,std::allocator< freeling::argument > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_argument_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::argument,std::allocator< freeling::argument > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorArgument___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorArgument___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::__setslice__(std::vector< freeling::argument >::difference_type,std::vector< freeling::argument >::difference_type)\n"
    "    std::vector< freeling::argument >::__setslice__(std::vector< freeling::argument >::difference_type,std::vector< freeling::argument >::difference_type,std::vector< freeling::argument,std::allocator< freeling::argument > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  std::vector< freeling::argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___delslice__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___delslice__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorArgument___delslice__" "', argument " "3"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::argument >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_argument_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___delitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___delitem__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_argument_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::argument,std::allocator< freeling::argument > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___getitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::argument,std::allocator< freeling::argument > > *)std_vector_Sl_freeling_argument_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::argument,std::allocator< freeling::argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::argument,std::allocator< freeling::argument > > *ptr = (std::vector< freeling::argument,std::allocator< freeling::argument > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::argument,std::allocator< freeling::argument > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::argument,std::allocator< freeling::argument > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_argument_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::argument,std::allocator< freeling::argument > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_argument_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___delitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_argument_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorArgument___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorArgument___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::__delitem__(std::vector< freeling::argument >::difference_type)\n"
    "    std::vector< freeling::argument >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___getitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___getitem__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  try {
    result = (std::vector< freeling::argument >::value_type *) &std_vector_Sl_freeling_argument_Sg____getitem____SWIG_1((std::vector< freeling::argument > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorArgument___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorArgument___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::argument >::__getitem__(std::vector< freeling::argument >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::difference_type arg2 ;
  std::vector< freeling::argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument___setitem__" "', argument " "2"" of type '" "std::vector< freeling::argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_argument_Sg____setitem____SWIG_2(arg1,arg2,(freeling::argument const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorArgument___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorArgument___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorArgument___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::__setitem__(PySliceObject *,std::vector< freeling::argument,std::allocator< freeling::argument > > const &)\n"
    "    std::vector< freeling::argument >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::argument >::__setitem__(std::vector< freeling::argument >::difference_type,std::vector< freeling::argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_pop" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  try {
    result = std_vector_Sl_freeling_argument_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::argument >::value_type(static_cast< const std::vector< freeling::argument >::value_type& >(result))), SWIGTYPE_p_freeling__argument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_append" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorArgument_append" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_append" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp2);
  std_vector_Sl_freeling_argument_Sg__append(arg1,(freeling::argument const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorArgument__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorArgument")) SWIG_fail;
  result = (std::vector< freeling::argument > *)new std::vector< freeling::argument >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorArgument__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorArgument",&obj0)) SWIG_fail;
  {
    std::vector< freeling::argument,std::allocator< freeling::argument > > *ptr = (std::vector< freeling::argument,std::allocator< freeling::argument > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorArgument" "', argument " "1"" of type '" "std::vector< freeling::argument > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorArgument" "', argument " "1"" of type '" "std::vector< freeling::argument > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::argument > *)new std::vector< freeling::argument >((std::vector< freeling::argument > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_empty" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (bool)((std::vector< freeling::argument > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_size" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = ((std::vector< freeling::argument > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_swap" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorArgument_swap" "', argument " "2"" of type '" "std::vector< freeling::argument > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_swap" "', argument " "2"" of type '" "std::vector< freeling::argument > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::argument > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_begin" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_end" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_rbegin" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_rend" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_clear" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::argument > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = ((std::vector< freeling::argument > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::argument >::allocator_type(static_cast< const std::vector< freeling::argument >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__argument_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorArgument__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorArgument",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorArgument" "', argument " "1"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::argument >::size_type >(val1);
  result = (std::vector< freeling::argument > *)new std::vector< freeling::argument >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_pop_back" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_resize" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument_resize" "', argument " "2"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_erase" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_argument_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::iterator arg2 ;
  std::vector< freeling::argument >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_erase" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "3"" of type '" "std::vector< freeling::argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_erase" "', argument " "3"" of type '" "std::vector< freeling::argument >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_argument_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorArgument_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorArgument_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::erase(std::vector< freeling::argument >::iterator)\n"
    "    std::vector< freeling::argument >::erase(std::vector< freeling::argument >::iterator,std::vector< freeling::argument >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorArgument__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument >::size_type arg1 ;
  std::vector< freeling::argument >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorArgument",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorArgument" "', argument " "1"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::argument >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorArgument" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorArgument" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp2);
  result = (std::vector< freeling::argument > *)new std::vector< freeling::argument >(arg1,(std::vector< freeling::argument >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorArgument(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorArgument__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorArgument__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorArgument__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__argument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorArgument__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorArgument'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::vector()\n"
    "    std::vector< freeling::argument >::vector(std::vector< freeling::argument > const &)\n"
    "    std::vector< freeling::argument >::vector(std::vector< freeling::argument >::size_type)\n"
    "    std::vector< freeling::argument >::vector(std::vector< freeling::argument >::size_type,std::vector< freeling::argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_push_back" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorArgument_push_back" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_push_back" "', argument " "2"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::argument >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_front" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (std::vector< freeling::argument >::value_type *) &((std::vector< freeling::argument > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_back" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = (std::vector< freeling::argument >::value_type *) &((std::vector< freeling::argument > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::size_type arg2 ;
  std::vector< freeling::argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_assign" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument_assign" "', argument " "2"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArgument_assign" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_assign" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::argument >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::size_type arg2 ;
  std::vector< freeling::argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_resize" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument_resize" "', argument " "2"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArgument_resize" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_resize" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::argument >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorArgument_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorArgument_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::resize(std::vector< freeling::argument >::size_type)\n"
    "    std::vector< freeling::argument >::resize(std::vector< freeling::argument >::size_type,std::vector< freeling::argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::iterator arg2 ;
  std::vector< freeling::argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorArgument_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_insert" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp3);
  result = std_vector_Sl_freeling_argument_Sg__insert__SWIG_0(arg1,arg2,(freeling::argument const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::iterator arg2 ;
  std::vector< freeling::argument >::size_type arg3 ;
  std::vector< freeling::argument >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorArgument_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_insert" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::argument >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::argument >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__argument,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorArgument_insert" "', argument " "4"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorArgument_insert" "', argument " "4"" of type '" "std::vector< freeling::argument >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::argument >::value_type * >(argp4);
  std_vector_Sl_freeling_argument_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::argument const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorArgument_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::argument,std::allocator< freeling::argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::argument >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__argument, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorArgument_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorArgument_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::argument >::insert(std::vector< freeling::argument >::iterator,std::vector< freeling::argument >::value_type const &)\n"
    "    std::vector< freeling::argument >::insert(std::vector< freeling::argument >::iterator,std::vector< freeling::argument >::size_type,std::vector< freeling::argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorArgument_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  std::vector< freeling::argument >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorArgument_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_reserve" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorArgument_reserve" "', argument " "2"" of type '" "std::vector< freeling::argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::argument >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorArgument_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorArgument_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorArgument_capacity" "', argument " "1"" of type '" "std::vector< freeling::argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  result = ((std::vector< freeling::argument > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorArgument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::argument > *arg1 = (std::vector< freeling::argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorArgument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorArgument" "', argument " "1"" of type '" "std::vector< freeling::argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::argument > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorArgument_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorPredicate_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_iterator" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_predicate_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (bool)std_vector_Sl_freeling_predicate_Sg____nonzero__((std::vector< freeling::predicate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___bool__" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (bool)std_vector_Sl_freeling_predicate_Sg____bool__((std::vector< freeling::predicate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___len__" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = std_vector_Sl_freeling_predicate_Sg____len__((std::vector< freeling::predicate > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  std::vector< freeling::predicate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::predicate,std::allocator< freeling::predicate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___getslice__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___getslice__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPredicate___getslice__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::predicate >::difference_type >(val3);
  try {
    result = (std::vector< freeling::predicate,std::allocator< freeling::predicate > > *)std_vector_Sl_freeling_predicate_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  std::vector< freeling::predicate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___setslice__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___setslice__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPredicate___setslice__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::predicate >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_predicate_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  std::vector< freeling::predicate >::difference_type arg3 ;
  std::vector< freeling::predicate,std::allocator< freeling::predicate > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPredicate___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___setslice__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___setslice__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPredicate___setslice__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::predicate >::difference_type >(val3);
  {
    std::vector< freeling::predicate,std::allocator< freeling::predicate > > *ptr = (std::vector< freeling::predicate,std::allocator< freeling::predicate > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPredicate___setslice__" "', argument " "4"" of type '" "std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate___setslice__" "', argument " "4"" of type '" "std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_predicate_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorPredicate___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPredicate___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::__setslice__(std::vector< freeling::predicate >::difference_type,std::vector< freeling::predicate >::difference_type)\n"
    "    std::vector< freeling::predicate >::__setslice__(std::vector< freeling::predicate >::difference_type,std::vector< freeling::predicate >::difference_type,std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  std::vector< freeling::predicate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___delslice__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___delslice__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPredicate___delslice__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::predicate >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_predicate_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___delitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___delitem__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_predicate_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::predicate,std::allocator< freeling::predicate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___getitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::predicate,std::allocator< freeling::predicate > > *)std_vector_Sl_freeling_predicate_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::predicate,std::allocator< freeling::predicate > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___setitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::predicate,std::allocator< freeling::predicate > > *ptr = (std::vector< freeling::predicate,std::allocator< freeling::predicate > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPredicate___setitem__" "', argument " "3"" of type '" "std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate___setitem__" "', argument " "3"" of type '" "std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___setitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___delitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_predicate_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPredicate___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPredicate___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::__delitem__(std::vector< freeling::predicate >::difference_type)\n"
    "    std::vector< freeling::predicate >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::predicate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___getitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___getitem__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  try {
    result = (std::vector< freeling::predicate >::value_type *) &std_vector_Sl_freeling_predicate_Sg____getitem____SWIG_1((std::vector< freeling::predicate > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPredicate___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPredicate___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::predicate >::__getitem__(std::vector< freeling::predicate >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::difference_type arg2 ;
  std::vector< freeling::predicate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate___setitem__" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate___setitem__" "', argument " "2"" of type '" "std::vector< freeling::predicate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPredicate___setitem__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate___setitem__" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_predicate_Sg____setitem____SWIG_2(arg1,arg2,(freeling::predicate const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPredicate___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPredicate___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__predicate, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPredicate___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::__setitem__(PySliceObject *,std::vector< freeling::predicate,std::allocator< freeling::predicate > > const &)\n"
    "    std::vector< freeling::predicate >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::predicate >::__setitem__(std::vector< freeling::predicate >::difference_type,std::vector< freeling::predicate >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_pop" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  try {
    result = std_vector_Sl_freeling_predicate_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::predicate >::value_type(static_cast< const std::vector< freeling::predicate >::value_type& >(result))), SWIGTYPE_p_freeling__predicate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_append" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPredicate_append" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_append" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp2);
  std_vector_Sl_freeling_predicate_Sg__append(arg1,(freeling::predicate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPredicate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorPredicate")) SWIG_fail;
  result = (std::vector< freeling::predicate > *)new std::vector< freeling::predicate >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPredicate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPredicate",&obj0)) SWIG_fail;
  {
    std::vector< freeling::predicate,std::allocator< freeling::predicate > > *ptr = (std::vector< freeling::predicate,std::allocator< freeling::predicate > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorPredicate" "', argument " "1"" of type '" "std::vector< freeling::predicate > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPredicate" "', argument " "1"" of type '" "std::vector< freeling::predicate > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::predicate > *)new std::vector< freeling::predicate >((std::vector< freeling::predicate > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_empty" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (bool)((std::vector< freeling::predicate > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_size" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = ((std::vector< freeling::predicate > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_swap" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPredicate_swap" "', argument " "2"" of type '" "std::vector< freeling::predicate > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_swap" "', argument " "2"" of type '" "std::vector< freeling::predicate > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::predicate > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_begin" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_end" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_rbegin" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_rend" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_clear" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::predicate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = ((std::vector< freeling::predicate > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::predicate >::allocator_type(static_cast< const std::vector< freeling::predicate >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__predicate_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPredicate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPredicate",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPredicate" "', argument " "1"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::predicate >::size_type >(val1);
  result = (std::vector< freeling::predicate > *)new std::vector< freeling::predicate >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_pop_back" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_resize" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate_resize" "', argument " "2"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::predicate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_erase" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_predicate_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::iterator arg2 ;
  std::vector< freeling::predicate >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::predicate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_erase" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "3"" of type '" "std::vector< freeling::predicate >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_erase" "', argument " "3"" of type '" "std::vector< freeling::predicate >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_predicate_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorPredicate_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorPredicate_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::erase(std::vector< freeling::predicate >::iterator)\n"
    "    std::vector< freeling::predicate >::erase(std::vector< freeling::predicate >::iterator,std::vector< freeling::predicate >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorPredicate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate >::size_type arg1 ;
  std::vector< freeling::predicate >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::predicate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorPredicate",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPredicate" "', argument " "1"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::predicate >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPredicate" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPredicate" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp2);
  result = (std::vector< freeling::predicate > *)new std::vector< freeling::predicate >(arg1,(std::vector< freeling::predicate >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPredicate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorPredicate__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorPredicate__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorPredicate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__predicate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorPredicate__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorPredicate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::vector()\n"
    "    std::vector< freeling::predicate >::vector(std::vector< freeling::predicate > const &)\n"
    "    std::vector< freeling::predicate >::vector(std::vector< freeling::predicate >::size_type)\n"
    "    std::vector< freeling::predicate >::vector(std::vector< freeling::predicate >::size_type,std::vector< freeling::predicate >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_push_back" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPredicate_push_back" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_push_back" "', argument " "2"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::predicate >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_front" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (std::vector< freeling::predicate >::value_type *) &((std::vector< freeling::predicate > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_back" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = (std::vector< freeling::predicate >::value_type *) &((std::vector< freeling::predicate > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::size_type arg2 ;
  std::vector< freeling::predicate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_assign" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate_assign" "', argument " "2"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPredicate_assign" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_assign" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::predicate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::size_type arg2 ;
  std::vector< freeling::predicate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_resize" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate_resize" "', argument " "2"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPredicate_resize" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_resize" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::predicate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPredicate_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__predicate, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPredicate_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::resize(std::vector< freeling::predicate >::size_type)\n"
    "    std::vector< freeling::predicate >::resize(std::vector< freeling::predicate >::size_type,std::vector< freeling::predicate >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::iterator arg2 ;
  std::vector< freeling::predicate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::predicate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPredicate_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_insert" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_insert" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_insert" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPredicate_insert" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_insert" "', argument " "3"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp3);
  result = std_vector_Sl_freeling_predicate_Sg__insert__SWIG_0(arg1,arg2,(freeling::predicate const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::predicate >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::iterator arg2 ;
  std::vector< freeling::predicate >::size_type arg3 ;
  std::vector< freeling::predicate >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPredicate_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_insert" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_insert" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPredicate_insert" "', argument " "2"" of type '" "std::vector< freeling::predicate >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPredicate_insert" "', argument " "3"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::predicate >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPredicate_insert" "', argument " "4"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPredicate_insert" "', argument " "4"" of type '" "std::vector< freeling::predicate >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::predicate >::value_type * >(argp4);
  std_vector_Sl_freeling_predicate_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::predicate const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__predicate, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPredicate_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::predicate,std::allocator< freeling::predicate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::predicate >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__predicate, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPredicate_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPredicate_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::predicate >::insert(std::vector< freeling::predicate >::iterator,std::vector< freeling::predicate >::value_type const &)\n"
    "    std::vector< freeling::predicate >::insert(std::vector< freeling::predicate >::iterator,std::vector< freeling::predicate >::size_type,std::vector< freeling::predicate >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  std::vector< freeling::predicate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPredicate_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_reserve" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPredicate_reserve" "', argument " "2"" of type '" "std::vector< freeling::predicate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::predicate >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPredicate_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::predicate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPredicate_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPredicate_capacity" "', argument " "1"" of type '" "std::vector< freeling::predicate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  result = ((std::vector< freeling::predicate > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorPredicate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::predicate > *arg1 = (std::vector< freeling::predicate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorPredicate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPredicate" "', argument " "1"" of type '" "std::vector< freeling::predicate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::predicate > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorPredicate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorSGMention_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_iterator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_semgraph_SG_mention_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_mention_Sg____nonzero__((std::vector< freeling::semgraph::SG_mention > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___bool__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_mention_Sg____bool__((std::vector< freeling::semgraph::SG_mention > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___len__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = std_vector_Sl_freeling_semgraph_SG_mention_Sg____len__((std::vector< freeling::semgraph::SG_mention > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___getslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___getslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGMention___getslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val3);
  try {
    result = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *)std_vector_Sl_freeling_semgraph_SG_mention_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGMention___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg3 ;
  std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGMention___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGMention___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val3);
  {
    std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *ptr = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGMention___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorSGMention___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGMention___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::__setslice__(std::vector< freeling::semgraph::SG_mention >::difference_type,std::vector< freeling::semgraph::SG_mention >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_mention >::__setslice__(std::vector< freeling::semgraph::SG_mention >::difference_type,std::vector< freeling::semgraph::SG_mention >::difference_type,std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___delslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___delslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGMention___delslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___delitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *)std_vector_Sl_freeling_semgraph_SG_mention_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *ptr = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGMention___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGMention___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGMention___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::__delitem__(std::vector< freeling::semgraph::SG_mention >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_mention >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___getitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  try {
    result = (std::vector< freeling::semgraph::SG_mention >::value_type *) &std_vector_Sl_freeling_semgraph_SG_mention_Sg____getitem____SWIG_1((std::vector< freeling::semgraph::SG_mention > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGMention___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGMention___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_mention >::__getitem__(std::vector< freeling::semgraph::SG_mention >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention___setitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGMention___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_semgraph_SG_mention_Sg____setitem____SWIG_2(arg1,arg2,(freeling::semgraph::SG_mention const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGMention___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGMention___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_mention, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGMention___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::__setitem__(PySliceObject *,std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > const &)\n"
    "    std::vector< freeling::semgraph::SG_mention >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_mention >::__setitem__(std::vector< freeling::semgraph::SG_mention >::difference_type,std::vector< freeling::semgraph::SG_mention >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< freeling::semgraph::SG_mention > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_pop" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  try {
    result = std_vector_Sl_freeling_semgraph_SG_mention_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_mention >::value_type(static_cast< const std::vector< freeling::semgraph::SG_mention >::value_type& >(result))), SWIGTYPE_p_freeling__semgraph__SG_mention, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_append" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGMention_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp2);
  std_vector_Sl_freeling_semgraph_SG_mention_Sg__append(arg1,(freeling::semgraph::SG_mention const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGMention__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorSGMention")) SWIG_fail;
  result = (std::vector< freeling::semgraph::SG_mention > *)new std::vector< freeling::semgraph::SG_mention >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGMention__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGMention",&obj0)) SWIG_fail;
  {
    std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *ptr = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSGMention" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGMention" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::semgraph::SG_mention > *)new std::vector< freeling::semgraph::SG_mention >((std::vector< freeling::semgraph::SG_mention > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_empty" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (bool)((std::vector< freeling::semgraph::SG_mention > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_size" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_mention > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_swap" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGMention_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_begin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_end" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_rbegin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_rend" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_clear" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::semgraph::SG_mention > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_mention > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_mention >::allocator_type(static_cast< const std::vector< freeling::semgraph::SG_mention >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_mention_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGMention__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGMention",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGMention" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val1);
  result = (std::vector< freeling::semgraph::SG_mention > *)new std::vector< freeling::semgraph::SG_mention >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_pop_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_mention_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_mention >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_mention_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorSGMention_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorSGMention_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::erase(std::vector< freeling::semgraph::SG_mention >::iterator)\n"
    "    std::vector< freeling::semgraph::SG_mention >::erase(std::vector< freeling::semgraph::SG_mention >::iterator,std::vector< freeling::semgraph::SG_mention >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorSGMention__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention >::size_type arg1 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_mention > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorSGMention",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGMention" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSGMention" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGMention" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp2);
  result = (std::vector< freeling::semgraph::SG_mention > *)new std::vector< freeling::semgraph::SG_mention >(arg1,(std::vector< freeling::semgraph::SG_mention >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGMention(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorSGMention__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorSGMention__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorSGMention__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__semgraph__SG_mention, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorSGMention__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorSGMention'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::vector()\n"
    "    std::vector< freeling::semgraph::SG_mention >::vector(std::vector< freeling::semgraph::SG_mention > const &)\n"
    "    std::vector< freeling::semgraph::SG_mention >::vector(std::vector< freeling::semgraph::SG_mention >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_mention >::vector(std::vector< freeling::semgraph::SG_mention >::size_type,std::vector< freeling::semgraph::SG_mention >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_push_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGMention_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::semgraph::SG_mention >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_front" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_mention >::value_type *) &((std::vector< freeling::semgraph::SG_mention > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_mention >::value_type *) &((std::vector< freeling::semgraph::SG_mention > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_assign" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention_assign" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGMention_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::semgraph::SG_mention >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGMention_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::semgraph::SG_mention >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGMention_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_mention, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGMention_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::resize(std::vector< freeling::semgraph::SG_mention >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_mention >::resize(std::vector< freeling::semgraph::SG_mention >::size_type,std::vector< freeling::semgraph::SG_mention >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGMention_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGMention_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp3);
  result = std_vector_Sl_freeling_semgraph_SG_mention_Sg__insert__SWIG_0(arg1,arg2,(freeling::semgraph::SG_mention const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_mention >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_mention >::size_type arg3 ;
  std::vector< freeling::semgraph::SG_mention >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGMention_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGMention_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGMention_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGMention_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGMention_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_mention >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention >::value_type * >(argp4);
  std_vector_Sl_freeling_semgraph_SG_mention_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::semgraph::SG_mention const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_mention, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGMention_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_mention >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__semgraph__SG_mention, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGMention_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGMention_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_mention >::insert(std::vector< freeling::semgraph::SG_mention >::iterator,std::vector< freeling::semgraph::SG_mention >::value_type const &)\n"
    "    std::vector< freeling::semgraph::SG_mention >::insert(std::vector< freeling::semgraph::SG_mention >::iterator,std::vector< freeling::semgraph::SG_mention >::size_type,std::vector< freeling::semgraph::SG_mention >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGMention_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_reserve" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGMention_reserve" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_mention >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_mention >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGMention_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGMention_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGMention_capacity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_mention > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorSGMention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_mention > *arg1 = (std::vector< freeling::semgraph::SG_mention > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorSGMention",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorSGMention" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_mention > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_mention > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorSGMention_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorSGArgument_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_iterator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_semgraph_SG_argument_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_argument_Sg____nonzero__((std::vector< freeling::semgraph::SG_argument > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___bool__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_argument_Sg____bool__((std::vector< freeling::semgraph::SG_argument > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___len__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = std_vector_Sl_freeling_semgraph_SG_argument_Sg____len__((std::vector< freeling::semgraph::SG_argument > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___getslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___getslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGArgument___getslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val3);
  try {
    result = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *)std_vector_Sl_freeling_semgraph_SG_argument_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGArgument___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg3 ;
  std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGArgument___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGArgument___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val3);
  {
    std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *ptr = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGArgument___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorSGArgument___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGArgument___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::__setslice__(std::vector< freeling::semgraph::SG_argument >::difference_type,std::vector< freeling::semgraph::SG_argument >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_argument >::__setslice__(std::vector< freeling::semgraph::SG_argument >::difference_type,std::vector< freeling::semgraph::SG_argument >::difference_type,std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___delslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___delslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGArgument___delslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___delitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *)std_vector_Sl_freeling_semgraph_SG_argument_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *ptr = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGArgument___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGArgument___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::__delitem__(std::vector< freeling::semgraph::SG_argument >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_argument >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___getitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  try {
    result = (std::vector< freeling::semgraph::SG_argument >::value_type *) &std_vector_Sl_freeling_semgraph_SG_argument_Sg____getitem____SWIG_1((std::vector< freeling::semgraph::SG_argument > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGArgument___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGArgument___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_argument >::__getitem__(std::vector< freeling::semgraph::SG_argument >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument___setitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_semgraph_SG_argument_Sg____setitem____SWIG_2(arg1,arg2,(freeling::semgraph::SG_argument const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGArgument___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGArgument___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGArgument___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::__setitem__(PySliceObject *,std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > const &)\n"
    "    std::vector< freeling::semgraph::SG_argument >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_argument >::__setitem__(std::vector< freeling::semgraph::SG_argument >::difference_type,std::vector< freeling::semgraph::SG_argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< freeling::semgraph::SG_argument > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_pop" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  try {
    result = std_vector_Sl_freeling_semgraph_SG_argument_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_argument >::value_type(static_cast< const std::vector< freeling::semgraph::SG_argument >::value_type& >(result))), SWIGTYPE_p_freeling__semgraph__SG_argument, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_append" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGArgument_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp2);
  std_vector_Sl_freeling_semgraph_SG_argument_Sg__append(arg1,(freeling::semgraph::SG_argument const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGArgument__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorSGArgument")) SWIG_fail;
  result = (std::vector< freeling::semgraph::SG_argument > *)new std::vector< freeling::semgraph::SG_argument >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGArgument__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGArgument",&obj0)) SWIG_fail;
  {
    std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *ptr = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSGArgument" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGArgument" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::semgraph::SG_argument > *)new std::vector< freeling::semgraph::SG_argument >((std::vector< freeling::semgraph::SG_argument > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_empty" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (bool)((std::vector< freeling::semgraph::SG_argument > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_size" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_argument > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_swap" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGArgument_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_begin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_end" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_rbegin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_rend" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_clear" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::semgraph::SG_argument > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_argument > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_argument >::allocator_type(static_cast< const std::vector< freeling::semgraph::SG_argument >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_argument_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGArgument__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGArgument",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGArgument" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val1);
  result = (std::vector< freeling::semgraph::SG_argument > *)new std::vector< freeling::semgraph::SG_argument >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_pop_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_argument_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_argument >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_argument_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorSGArgument_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorSGArgument_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::erase(std::vector< freeling::semgraph::SG_argument >::iterator)\n"
    "    std::vector< freeling::semgraph::SG_argument >::erase(std::vector< freeling::semgraph::SG_argument >::iterator,std::vector< freeling::semgraph::SG_argument >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorSGArgument__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument >::size_type arg1 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_argument > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorSGArgument",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGArgument" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSGArgument" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGArgument" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp2);
  result = (std::vector< freeling::semgraph::SG_argument > *)new std::vector< freeling::semgraph::SG_argument >(arg1,(std::vector< freeling::semgraph::SG_argument >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGArgument(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorSGArgument__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorSGArgument__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorSGArgument__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__semgraph__SG_argument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorSGArgument__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorSGArgument'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::vector()\n"
    "    std::vector< freeling::semgraph::SG_argument >::vector(std::vector< freeling::semgraph::SG_argument > const &)\n"
    "    std::vector< freeling::semgraph::SG_argument >::vector(std::vector< freeling::semgraph::SG_argument >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_argument >::vector(std::vector< freeling::semgraph::SG_argument >::size_type,std::vector< freeling::semgraph::SG_argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_push_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGArgument_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::semgraph::SG_argument >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_front" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_argument >::value_type *) &((std::vector< freeling::semgraph::SG_argument > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_argument >::value_type *) &((std::vector< freeling::semgraph::SG_argument > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_assign" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument_assign" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGArgument_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::semgraph::SG_argument >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGArgument_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::semgraph::SG_argument >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGArgument_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGArgument_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::resize(std::vector< freeling::semgraph::SG_argument >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_argument >::resize(std::vector< freeling::semgraph::SG_argument >::size_type,std::vector< freeling::semgraph::SG_argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGArgument_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp3);
  result = std_vector_Sl_freeling_semgraph_SG_argument_Sg__insert__SWIG_0(arg1,arg2,(freeling::semgraph::SG_argument const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_argument >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_argument >::size_type arg3 ;
  std::vector< freeling::semgraph::SG_argument >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGArgument_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGArgument_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGArgument_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__semgraph__SG_argument,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGArgument_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGArgument_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_argument >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument >::value_type * >(argp4);
  std_vector_Sl_freeling_semgraph_SG_argument_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::semgraph::SG_argument const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_argument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGArgument_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_argument >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__semgraph__SG_argument, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGArgument_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGArgument_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_argument >::insert(std::vector< freeling::semgraph::SG_argument >::iterator,std::vector< freeling::semgraph::SG_argument >::value_type const &)\n"
    "    std::vector< freeling::semgraph::SG_argument >::insert(std::vector< freeling::semgraph::SG_argument >::iterator,std::vector< freeling::semgraph::SG_argument >::size_type,std::vector< freeling::semgraph::SG_argument >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGArgument_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_reserve" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGArgument_reserve" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_argument >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_argument >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGArgument_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGArgument_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGArgument_capacity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_argument > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorSGArgument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_argument > *arg1 = (std::vector< freeling::semgraph::SG_argument > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorSGArgument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorSGArgument" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_argument > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_argument > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorSGArgument_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorSGEntity_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_iterator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_semgraph_SG_entity_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_entity_Sg____nonzero__((std::vector< freeling::semgraph::SG_entity > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___bool__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_entity_Sg____bool__((std::vector< freeling::semgraph::SG_entity > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___len__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = std_vector_Sl_freeling_semgraph_SG_entity_Sg____len__((std::vector< freeling::semgraph::SG_entity > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___getslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___getslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGEntity___getslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val3);
  try {
    result = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *)std_vector_Sl_freeling_semgraph_SG_entity_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGEntity___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg3 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGEntity___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGEntity___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val3);
  {
    std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *ptr = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGEntity___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorSGEntity___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGEntity___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::__setslice__(std::vector< freeling::semgraph::SG_entity >::difference_type,std::vector< freeling::semgraph::SG_entity >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_entity >::__setslice__(std::vector< freeling::semgraph::SG_entity >::difference_type,std::vector< freeling::semgraph::SG_entity >::difference_type,std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___delslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___delslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGEntity___delslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___delitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *)std_vector_Sl_freeling_semgraph_SG_entity_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *ptr = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGEntity___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGEntity___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGEntity___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::__delitem__(std::vector< freeling::semgraph::SG_entity >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_entity >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___getitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  try {
    result = (std::vector< freeling::semgraph::SG_entity >::value_type *) &std_vector_Sl_freeling_semgraph_SG_entity_Sg____getitem____SWIG_1((std::vector< freeling::semgraph::SG_entity > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGEntity___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGEntity___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_entity >::__getitem__(std::vector< freeling::semgraph::SG_entity >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity___setitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGEntity___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_semgraph_SG_entity_Sg____setitem____SWIG_2(arg1,arg2,(freeling::semgraph::SG_entity const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGEntity___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGEntity___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_entity, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGEntity___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::__setitem__(PySliceObject *,std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > const &)\n"
    "    std::vector< freeling::semgraph::SG_entity >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_entity >::__setitem__(std::vector< freeling::semgraph::SG_entity >::difference_type,std::vector< freeling::semgraph::SG_entity >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< freeling::semgraph::SG_entity > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_pop" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  try {
    result = std_vector_Sl_freeling_semgraph_SG_entity_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_entity >::value_type(static_cast< const std::vector< freeling::semgraph::SG_entity >::value_type& >(result))), SWIGTYPE_p_freeling__semgraph__SG_entity, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_append" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGEntity_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp2);
  std_vector_Sl_freeling_semgraph_SG_entity_Sg__append(arg1,(freeling::semgraph::SG_entity const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGEntity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorSGEntity")) SWIG_fail;
  result = (std::vector< freeling::semgraph::SG_entity > *)new std::vector< freeling::semgraph::SG_entity >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGEntity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGEntity",&obj0)) SWIG_fail;
  {
    std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *ptr = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSGEntity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGEntity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::semgraph::SG_entity > *)new std::vector< freeling::semgraph::SG_entity >((std::vector< freeling::semgraph::SG_entity > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_empty" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (bool)((std::vector< freeling::semgraph::SG_entity > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_size" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_entity > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_swap" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGEntity_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_begin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_end" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_rbegin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_rend" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_clear" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::semgraph::SG_entity > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_entity > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_entity >::allocator_type(static_cast< const std::vector< freeling::semgraph::SG_entity >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_entity_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGEntity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGEntity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGEntity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val1);
  result = (std::vector< freeling::semgraph::SG_entity > *)new std::vector< freeling::semgraph::SG_entity >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_pop_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_entity_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_entity >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_entity_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorSGEntity_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorSGEntity_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::erase(std::vector< freeling::semgraph::SG_entity >::iterator)\n"
    "    std::vector< freeling::semgraph::SG_entity >::erase(std::vector< freeling::semgraph::SG_entity >::iterator,std::vector< freeling::semgraph::SG_entity >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorSGEntity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity >::size_type arg1 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_entity > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorSGEntity",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGEntity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSGEntity" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGEntity" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp2);
  result = (std::vector< freeling::semgraph::SG_entity > *)new std::vector< freeling::semgraph::SG_entity >(arg1,(std::vector< freeling::semgraph::SG_entity >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGEntity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorSGEntity__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorSGEntity__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorSGEntity__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__semgraph__SG_entity, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorSGEntity__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorSGEntity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::vector()\n"
    "    std::vector< freeling::semgraph::SG_entity >::vector(std::vector< freeling::semgraph::SG_entity > const &)\n"
    "    std::vector< freeling::semgraph::SG_entity >::vector(std::vector< freeling::semgraph::SG_entity >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_entity >::vector(std::vector< freeling::semgraph::SG_entity >::size_type,std::vector< freeling::semgraph::SG_entity >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_push_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGEntity_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::semgraph::SG_entity >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_front" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_entity >::value_type *) &((std::vector< freeling::semgraph::SG_entity > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_entity >::value_type *) &((std::vector< freeling::semgraph::SG_entity > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_assign" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity_assign" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGEntity_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::semgraph::SG_entity >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGEntity_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::semgraph::SG_entity >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGEntity_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_entity, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGEntity_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::resize(std::vector< freeling::semgraph::SG_entity >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_entity >::resize(std::vector< freeling::semgraph::SG_entity >::size_type,std::vector< freeling::semgraph::SG_entity >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGEntity_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGEntity_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp3);
  result = std_vector_Sl_freeling_semgraph_SG_entity_Sg__insert__SWIG_0(arg1,arg2,(freeling::semgraph::SG_entity const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_entity >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_entity >::size_type arg3 ;
  std::vector< freeling::semgraph::SG_entity >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGEntity_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGEntity_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGEntity_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__semgraph__SG_entity,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGEntity_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGEntity_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_entity >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity >::value_type * >(argp4);
  std_vector_Sl_freeling_semgraph_SG_entity_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::semgraph::SG_entity const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_entity, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGEntity_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_entity >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__semgraph__SG_entity, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGEntity_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGEntity_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_entity >::insert(std::vector< freeling::semgraph::SG_entity >::iterator,std::vector< freeling::semgraph::SG_entity >::value_type const &)\n"
    "    std::vector< freeling::semgraph::SG_entity >::insert(std::vector< freeling::semgraph::SG_entity >::iterator,std::vector< freeling::semgraph::SG_entity >::size_type,std::vector< freeling::semgraph::SG_entity >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGEntity_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_reserve" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGEntity_reserve" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_entity >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_entity >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGEntity_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGEntity_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGEntity_capacity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_entity > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorSGEntity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_entity > *arg1 = (std::vector< freeling::semgraph::SG_entity > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorSGEntity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorSGEntity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_entity > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_entity > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorSGEntity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorSGFrame_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_iterator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_freeling_semgraph_SG_frame_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___nonzero__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_frame_Sg____nonzero__((std::vector< freeling::semgraph::SG_frame > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___bool__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (bool)std_vector_Sl_freeling_semgraph_SG_frame_Sg____bool__((std::vector< freeling::semgraph::SG_frame > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___len__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = std_vector_Sl_freeling_semgraph_SG_frame_Sg____len__((std::vector< freeling::semgraph::SG_frame > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___getslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___getslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGFrame___getslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val3);
  try {
    result = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *)std_vector_Sl_freeling_semgraph_SG_frame_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGFrame___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg3 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGFrame___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___setslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___setslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGFrame___setslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val3);
  {
    std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *ptr = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGFrame___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame___setslice__" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorSGFrame___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGFrame___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::__setslice__(std::vector< freeling::semgraph::SG_frame >::difference_type,std::vector< freeling::semgraph::SG_frame >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_frame >::__setslice__(std::vector< freeling::semgraph::SG_frame >::difference_type,std::vector< freeling::semgraph::SG_frame >::difference_type,std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___delslice__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___delslice__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGFrame___delslice__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val3);
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___delitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *)std_vector_Sl_freeling_semgraph_SG_frame_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *ptr = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGFrame___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___delitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGFrame___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGFrame___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::__delitem__(std::vector< freeling::semgraph::SG_frame >::difference_type)\n"
    "    std::vector< freeling::semgraph::SG_frame >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___getitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___getitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  try {
    result = (std::vector< freeling::semgraph::SG_frame >::value_type *) &std_vector_Sl_freeling_semgraph_SG_frame_Sg____getitem____SWIG_1((std::vector< freeling::semgraph::SG_frame > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGFrame___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGFrame___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::__getitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_frame >::__getitem__(std::vector< freeling::semgraph::SG_frame >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::difference_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame___setitem__" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame___setitem__" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGFrame___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame___setitem__" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp3);
  try {
    std_vector_Sl_freeling_semgraph_SG_frame_Sg____setitem____SWIG_2(arg1,arg2,(freeling::semgraph::SG_frame const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorSGFrame___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGFrame___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_frame, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGFrame___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::__setitem__(PySliceObject *,std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > const &)\n"
    "    std::vector< freeling::semgraph::SG_frame >::__setitem__(PySliceObject *)\n"
    "    std::vector< freeling::semgraph::SG_frame >::__setitem__(std::vector< freeling::semgraph::SG_frame >::difference_type,std::vector< freeling::semgraph::SG_frame >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< freeling::semgraph::SG_frame > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_pop" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  try {
    result = std_vector_Sl_freeling_semgraph_SG_frame_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_frame >::value_type(static_cast< const std::vector< freeling::semgraph::SG_frame >::value_type& >(result))), SWIGTYPE_p_freeling__semgraph__SG_frame, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_append" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGFrame_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_append" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp2);
  std_vector_Sl_freeling_semgraph_SG_frame_Sg__append(arg1,(freeling::semgraph::SG_frame const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGFrame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorSGFrame")) SWIG_fail;
  result = (std::vector< freeling::semgraph::SG_frame > *)new std::vector< freeling::semgraph::SG_frame >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGFrame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGFrame",&obj0)) SWIG_fail;
  {
    std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *ptr = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorSGFrame" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGFrame" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< freeling::semgraph::SG_frame > *)new std::vector< freeling::semgraph::SG_frame >((std::vector< freeling::semgraph::SG_frame > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_empty" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (bool)((std::vector< freeling::semgraph::SG_frame > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_size" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_frame > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_swap" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGFrame_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_swap" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_begin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_end" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_rbegin" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_rend" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_clear" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< freeling::semgraph::SG_frame > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_get_allocator" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_frame > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::semgraph::SG_frame >::allocator_type(static_cast< const std::vector< freeling::semgraph::SG_frame >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_freeling__semgraph__SG_frame_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGFrame__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorSGFrame",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGFrame" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val1);
  result = (std::vector< freeling::semgraph::SG_frame > *)new std::vector< freeling::semgraph::SG_frame >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_pop_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_frame_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_frame >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_erase" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_erase" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
    }
  }
  result = std_vector_Sl_freeling_semgraph_SG_frame_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorSGFrame_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorSGFrame_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::erase(std::vector< freeling::semgraph::SG_frame >::iterator)\n"
    "    std::vector< freeling::semgraph::SG_frame >::erase(std::vector< freeling::semgraph::SG_frame >::iterator,std::vector< freeling::semgraph::SG_frame >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorSGFrame__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame >::size_type arg1 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< freeling::semgraph::SG_frame > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorSGFrame",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorSGFrame" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg1 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorSGFrame" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorSGFrame" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp2);
  result = (std::vector< freeling::semgraph::SG_frame > *)new std::vector< freeling::semgraph::SG_frame >(arg1,(std::vector< freeling::semgraph::SG_frame >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorSGFrame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorSGFrame__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorSGFrame__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorSGFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__semgraph__SG_frame, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorSGFrame__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorSGFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::vector()\n"
    "    std::vector< freeling::semgraph::SG_frame >::vector(std::vector< freeling::semgraph::SG_frame > const &)\n"
    "    std::vector< freeling::semgraph::SG_frame >::vector(std::vector< freeling::semgraph::SG_frame >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_frame >::vector(std::vector< freeling::semgraph::SG_frame >::size_type,std::vector< freeling::semgraph::SG_frame >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_push_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorSGFrame_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_push_back" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp2);
  (arg1)->push_back((std::vector< freeling::semgraph::SG_frame >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_front" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_frame >::value_type *) &((std::vector< freeling::semgraph::SG_frame > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_back" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = (std::vector< freeling::semgraph::SG_frame >::value_type *) &((std::vector< freeling::semgraph::SG_frame > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_assign" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame_assign" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGFrame_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_assign" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< freeling::semgraph::SG_frame >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type arg2 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_resize" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame_resize" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGFrame_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_resize" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< freeling::semgraph::SG_frame >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorSGFrame_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_frame, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGFrame_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::resize(std::vector< freeling::semgraph::SG_frame >::size_type)\n"
    "    std::vector< freeling::semgraph::SG_frame >::resize(std::vector< freeling::semgraph::SG_frame >::size_type,std::vector< freeling::semgraph::SG_frame >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorSGFrame_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorSGFrame_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp3);
  result = std_vector_Sl_freeling_semgraph_SG_frame_Sg__insert__SWIG_0(arg1,arg2,(freeling::semgraph::SG_frame const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< freeling::semgraph::SG_frame >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::iterator arg2 ;
  std::vector< freeling::semgraph::SG_frame >::size_type arg3 ;
  std::vector< freeling::semgraph::SG_frame >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorSGFrame_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_insert" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorSGFrame_insert" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorSGFrame_insert" "', argument " "3"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg3 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__semgraph__SG_frame,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorSGFrame_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorSGFrame_insert" "', argument " "4"" of type '" "std::vector< freeling::semgraph::SG_frame >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame >::value_type * >(argp4);
  std_vector_Sl_freeling_semgraph_SG_frame_Sg__insert__SWIG_1(arg1,arg2,arg3,(freeling::semgraph::SG_frame const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__semgraph__SG_frame, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorSGFrame_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< freeling::semgraph::SG_frame >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__semgraph__SG_frame, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorSGFrame_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorSGFrame_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< freeling::semgraph::SG_frame >::insert(std::vector< freeling::semgraph::SG_frame >::iterator,std::vector< freeling::semgraph::SG_frame >::value_type const &)\n"
    "    std::vector< freeling::semgraph::SG_frame >::insert(std::vector< freeling::semgraph::SG_frame >::iterator,std::vector< freeling::semgraph::SG_frame >::size_type,std::vector< freeling::semgraph::SG_frame >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorSGFrame_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_reserve" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorSGFrame_reserve" "', argument " "2"" of type '" "std::vector< freeling::semgraph::SG_frame >::size_type""'");
  } 
  arg2 = static_cast< std::vector< freeling::semgraph::SG_frame >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorSGFrame_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorSGFrame_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorSGFrame_capacity" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  result = ((std::vector< freeling::semgraph::SG_frame > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorSGFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< freeling::semgraph::SG_frame > *arg1 = (std::vector< freeling::semgraph::SG_frame > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorSGFrame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorSGFrame" "', argument " "1"" of type '" "std::vector< freeling::semgraph::SG_frame > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< freeling::semgraph::SG_frame > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorSGFrame_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_iterator" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_std_wstring_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___nonzero__" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (bool)std_list_Sl_std_wstring_Sg____nonzero__((std::list< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___bool__" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (bool)std_list_Sl_std_wstring_Sg____bool__((std::list< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___len__" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = std_list_Sl_std_wstring_Sg____len__((std::list< std::wstring > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  std::list< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___getslice__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___getslice__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListString___getslice__" "', argument " "3"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::wstring >::difference_type >(val3);
  try {
    result = (std::list< std::wstring,std::allocator< std::wstring > > *)std_list_Sl_std_wstring_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  std::list< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___setslice__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___setslice__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListString___setslice__" "', argument " "3"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::wstring >::difference_type >(val3);
  try {
    std_list_Sl_std_wstring_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  std::list< std::wstring >::difference_type arg3 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___setslice__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___setslice__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListString___setslice__" "', argument " "3"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::wstring >::difference_type >(val3);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListString___setslice__" "', argument " "4"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString___setslice__" "', argument " "4"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_std_wstring_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListString___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListString___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::__setslice__(std::list< std::wstring >::difference_type,std::list< std::wstring >::difference_type)\n"
    "    std::list< std::wstring >::__setslice__(std::list< std::wstring >::difference_type,std::list< std::wstring >::difference_type,std::list< std::wstring,std::allocator< std::wstring > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  std::list< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___delslice__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___delslice__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListString___delslice__" "', argument " "3"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::wstring >::difference_type >(val3);
  try {
    std_list_Sl_std_wstring_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___delitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___delitem__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  try {
    std_list_Sl_std_wstring_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___getitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< std::wstring,std::allocator< std::wstring > > *)std_list_Sl_std_wstring_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___setitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListString___setitem__" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString___setitem__" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_std_wstring_Sg____setitem____SWIG_0(arg1,arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___setitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_std_wstring_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___delitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_std_wstring_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::__delitem__(std::list< std::wstring >::difference_type)\n"
    "    std::list< std::wstring >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___getitem__" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___getitem__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  try {
    result = (std::list< std::wstring >::value_type *) &std_list_Sl_std_wstring_Sg____getitem____SWIG_1((std::list< std::wstring > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::__getitem__(PySliceObject *)\n"
    "    std::list< std::wstring >::__getitem__(std::list< std::wstring >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::difference_type arg2 ;
  std::list< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString___setitem__" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString___setitem__" "', argument " "2"" of type '" "std::list< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::difference_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListString___setitem__" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString___setitem__" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_std_wstring_Sg____setitem____SWIG_2(arg1,arg2,(std::wstring const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::__setitem__(PySliceObject *,std::list< std::wstring,std::allocator< std::wstring > > const &)\n"
    "    std::list< std::wstring >::__setitem__(PySliceObject *)\n"
    "    std::list< std::wstring >::__setitem__(std::list< std::wstring >::difference_type,std::list< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_pop" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  try {
    result = std_list_Sl_std_wstring_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_append" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListString_append" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_append" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_list_Sl_std_wstring_Sg__append(arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListString")) SWIG_fail;
  result = (std::list< std::wstring > *)new std::list< std::wstring >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListString",&obj0)) SWIG_fail;
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListString" "', argument " "1"" of type '" "std::list< std::wstring > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListString" "', argument " "1"" of type '" "std::list< std::wstring > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< std::wstring > *)new std::list< std::wstring >((std::list< std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_empty" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (bool)((std::list< std::wstring > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_size" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = ((std::list< std::wstring > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_swap" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListString_swap" "', argument " "2"" of type '" "std::list< std::wstring > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_swap" "', argument " "2"" of type '" "std::list< std::wstring > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::wstring > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_begin" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_end" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_rbegin" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_rend" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_clear" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_get_allocator" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = ((std::list< std::wstring > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< std::wstring >::allocator_type(static_cast< const std::list< std::wstring >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__wstring_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListString" "', argument " "1"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::wstring >::size_type >(val1);
  result = (std::list< std::wstring > *)new std::list< std::wstring >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_pop_back" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_resize" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString_resize" "', argument " "2"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_erase" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
    }
  }
  result = std_list_Sl_std_wstring_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::iterator arg2 ;
  std::list< std::wstring >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_erase" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "3"" of type '" "std::list< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_erase" "', argument " "3"" of type '" "std::list< std::wstring >::iterator""'");
    }
  }
  result = std_list_Sl_std_wstring_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::erase(std::list< std::wstring >::iterator)\n"
    "    std::list< std::wstring >::erase(std::list< std::wstring >::iterator,std::list< std::wstring >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring >::size_type arg1 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListString" "', argument " "1"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::wstring >::size_type >(val1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListString" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListString" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::list< std::wstring > *)new std::list< std::wstring >(arg1,(std::list< std::wstring >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::list()\n"
    "    std::list< std::wstring >::list(std::list< std::wstring > const &)\n"
    "    std::list< std::wstring >::list(std::list< std::wstring >::size_type)\n"
    "    std::list< std::wstring >::list(std::list< std::wstring >::size_type,std::list< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_push_back" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListString_push_back" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_push_back" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::list< std::wstring >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_front" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (std::list< std::wstring >::value_type *) &((std::list< std::wstring > const *)arg1)->front();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_back" "', argument " "1"" of type '" "std::list< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  result = (std::list< std::wstring >::value_type *) &((std::list< std::wstring > const *)arg1)->back();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::size_type arg2 ;
  std::list< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_assign" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString_assign" "', argument " "2"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::size_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListString_assign" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_assign" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::list< std::wstring >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::size_type arg2 ;
  std::list< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_resize" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListString_resize" "', argument " "2"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::wstring >::size_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListString_resize" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_resize" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::list< std::wstring >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::resize(std::list< std::wstring >::size_type)\n"
    "    std::list< std::wstring >::resize(std::list< std::wstring >::size_type,std::list< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::iterator arg2 ;
  std::list< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_insert" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_insert" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_insert" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
    }
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListString_insert" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_insert" "', argument " "3"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_list_Sl_std_wstring_Sg__insert__SWIG_0(arg1,arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::iterator arg2 ;
  std::list< std::wstring >::size_type arg3 ;
  std::list< std::wstring >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_insert" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_insert" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListString_insert" "', argument " "2"" of type '" "std::list< std::wstring >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListString_insert" "', argument " "3"" of type '" "std::list< std::wstring >::size_type""'");
  } 
  arg3 = static_cast< std::list< std::wstring >::size_type >(val3);
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListString_insert" "', argument " "4"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_insert" "', argument " "4"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_list_Sl_std_wstring_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_wstring(argv[3], (std::wstring**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::wstring >::insert(std::list< std::wstring >::iterator,std::list< std::wstring >::value_type const &)\n"
    "    std::list< std::wstring >::insert(std::list< std::wstring >::iterator,std::list< std::wstring >::size_type,std::list< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListString_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_pop_front" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  std::list< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListString_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_push_front" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListString_push_front" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListString_push_front" "', argument " "2"" of type '" "std::list< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_front((std::list< std::wstring >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListString_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListString_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListString_reverse" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring > *arg1 = (std::list< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListString" "', argument " "1"" of type '" "std::list< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::wstring > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListInt_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_iterator" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___nonzero__" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (bool)std_list_Sl_int_Sg____nonzero__((std::list< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___bool__" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (bool)std_list_Sl_int_Sg____bool__((std::list< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___len__" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = std_list_Sl_int_Sg____len__((std::list< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  std::list< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___getslice__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___getslice__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt___getslice__" "', argument " "3"" of type '" "std::list< int >::difference_type""'");
  } 
  arg3 = static_cast< std::list< int >::difference_type >(val3);
  try {
    result = (std::list< int,std::allocator< int > > *)std_list_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  std::list< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___setslice__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___setslice__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt___setslice__" "', argument " "3"" of type '" "std::list< int >::difference_type""'");
  } 
  arg3 = static_cast< std::list< int >::difference_type >(val3);
  try {
    std_list_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  std::list< int >::difference_type arg3 ;
  std::list< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListInt___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___setslice__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___setslice__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt___setslice__" "', argument " "3"" of type '" "std::list< int >::difference_type""'");
  } 
  arg3 = static_cast< std::list< int >::difference_type >(val3);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListInt___setslice__" "', argument " "4"" of type '" "std::list< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListInt___setslice__" "', argument " "4"" of type '" "std::list< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListInt___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListInt___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::__setslice__(std::list< int >::difference_type,std::list< int >::difference_type)\n"
    "    std::list< int >::__setslice__(std::list< int >::difference_type,std::list< int >::difference_type,std::list< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  std::list< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___delslice__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___delslice__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt___delslice__" "', argument " "3"" of type '" "std::list< int >::difference_type""'");
  } 
  arg3 = static_cast< std::list< int >::difference_type >(val3);
  try {
    std_list_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___delitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___delitem__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  try {
    std_list_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___getitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< int,std::allocator< int > > *)std_list_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___setitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListInt___setitem__" "', argument " "3"" of type '" "std::list< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListInt___setitem__" "', argument " "3"" of type '" "std::list< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::list< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___setitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___delitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListInt___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListInt___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::__delitem__(std::list< int >::difference_type)\n"
    "    std::list< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___getitem__" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___getitem__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  try {
    result = (std::list< int >::value_type *) &std_list_Sl_int_Sg____getitem____SWIG_1((std::list< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListInt___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListInt___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::__getitem__(PySliceObject *)\n"
    "    std::list< int >::__getitem__(std::list< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::difference_type arg2 ;
  std::list< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::list< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt___setitem__" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt___setitem__" "', argument " "2"" of type '" "std::list< int >::difference_type""'");
  } 
  arg2 = static_cast< std::list< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt___setitem__" "', argument " "3"" of type '" "std::list< int >::value_type""'");
  } 
  temp3 = static_cast< std::list< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_list_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListInt___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListInt___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListInt___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::__setitem__(PySliceObject *,std::list< int,std::allocator< int > > const &)\n"
    "    std::list< int >::__setitem__(PySliceObject *)\n"
    "    std::list< int >::__setitem__(std::list< int >::difference_type,std::list< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_pop" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  try {
    result = (std::list< int >::value_type)std_list_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_append" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_append" "', argument " "2"" of type '" "std::list< int >::value_type""'");
  } 
  temp2 = static_cast< std::list< int >::value_type >(val2);
  arg2 = &temp2;
  std_list_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListInt")) SWIG_fail;
  result = (std::list< int > *)new std::list< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListInt",&obj0)) SWIG_fail;
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListInt" "', argument " "1"" of type '" "std::list< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListInt" "', argument " "1"" of type '" "std::list< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< int > *)new std::list< int >((std::list< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_empty" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (bool)((std::list< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_size" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = ((std::list< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_swap" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListInt_swap" "', argument " "2"" of type '" "std::list< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListInt_swap" "', argument " "2"" of type '" "std::list< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_begin" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_end" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_rbegin" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_rend" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_clear" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_get_allocator" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = ((std::list< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< int >::allocator_type(static_cast< const std::list< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListInt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListInt" "', argument " "1"" of type '" "std::list< int >::size_type""'");
  } 
  arg1 = static_cast< std::list< int >::size_type >(val1);
  result = (std::list< int > *)new std::list< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_pop_back" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_resize" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_resize" "', argument " "2"" of type '" "std::list< int >::size_type""'");
  } 
  arg2 = static_cast< std::list< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_erase" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "2"" of type '" "std::list< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "2"" of type '" "std::list< int >::iterator""'");
    }
  }
  result = std_list_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::iterator arg2 ;
  std::list< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_erase" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "2"" of type '" "std::list< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "2"" of type '" "std::list< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "3"" of type '" "std::list< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_erase" "', argument " "3"" of type '" "std::list< int >::iterator""'");
    }
  }
  result = std_list_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListInt_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListInt_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::erase(std::list< int >::iterator)\n"
    "    std::list< int >::erase(std::list< int >::iterator,std::list< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListInt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int >::size_type arg1 ;
  std::list< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::list< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListInt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListInt" "', argument " "1"" of type '" "std::list< int >::size_type""'");
  } 
  arg1 = static_cast< std::list< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ListInt" "', argument " "2"" of type '" "std::list< int >::value_type""'");
  } 
  temp2 = static_cast< std::list< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::list< int > *)new std::list< int >(arg1,(std::list< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListInt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListInt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ListInt__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::list()\n"
    "    std::list< int >::list(std::list< int > const &)\n"
    "    std::list< int >::list(std::list< int >::size_type)\n"
    "    std::list< int >::list(std::list< int >::size_type,std::list< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_push_back" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_push_back" "', argument " "2"" of type '" "std::list< int >::value_type""'");
  } 
  temp2 = static_cast< std::list< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::list< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_front" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (std::list< int >::value_type *) &((std::list< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_back" "', argument " "1"" of type '" "std::list< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  result = (std::list< int >::value_type *) &((std::list< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type arg2 ;
  std::list< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::list< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_assign" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_assign" "', argument " "2"" of type '" "std::list< int >::size_type""'");
  } 
  arg2 = static_cast< std::list< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt_assign" "', argument " "3"" of type '" "std::list< int >::value_type""'");
  } 
  temp3 = static_cast< std::list< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::list< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type arg2 ;
  std::list< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::list< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_resize" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_resize" "', argument " "2"" of type '" "std::list< int >::size_type""'");
  } 
  arg2 = static_cast< std::list< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt_resize" "', argument " "3"" of type '" "std::list< int >::value_type""'");
  } 
  temp3 = static_cast< std::list< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::list< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListInt_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListInt_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::resize(std::list< int >::size_type)\n"
    "    std::list< int >::resize(std::list< int >::size_type,std::list< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::iterator arg2 ;
  std::list< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::list< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListInt_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_insert" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_insert" "', argument " "2"" of type '" "std::list< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_insert" "', argument " "2"" of type '" "std::list< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt_insert" "', argument " "3"" of type '" "std::list< int >::value_type""'");
  } 
  temp3 = static_cast< std::list< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_list_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::iterator arg2 ;
  std::list< int >::size_type arg3 ;
  std::list< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::list< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListInt_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_insert" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_insert" "', argument " "2"" of type '" "std::list< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListInt_insert" "', argument " "2"" of type '" "std::list< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListInt_insert" "', argument " "3"" of type '" "std::list< int >::size_type""'");
  } 
  arg3 = static_cast< std::list< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ListInt_insert" "', argument " "4"" of type '" "std::list< int >::value_type""'");
  } 
  temp4 = static_cast< std::list< int >::value_type >(val4);
  arg4 = &temp4;
  std_list_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListInt_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ListInt_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListInt_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< int >::insert(std::list< int >::iterator,std::list< int >::value_type const &)\n"
    "    std::list< int >::insert(std::list< int >::iterator,std::list< int >::size_type,std::list< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListInt_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_pop_front" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::list< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListInt_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_push_front" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListInt_push_front" "', argument " "2"" of type '" "std::list< int >::value_type""'");
  } 
  temp2 = static_cast< std::list< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_front((std::list< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListInt_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListInt_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListInt_reverse" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListInt" "', argument " "1"" of type '" "std::list< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorListInt_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_iterator" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_list_Sl_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___nonzero__" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_list_Sl_int_Sg__Sg____nonzero__((std::vector< std::list< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___bool__" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_list_Sl_int_Sg__Sg____bool__((std::vector< std::list< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___len__" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = std_vector_Sl_std_list_Sl_int_Sg__Sg____len__((std::vector< std::list< int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  std::vector< std::list< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___getslice__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___getslice__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListInt___getslice__" "', argument " "3"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *)std_vector_Sl_std_list_Sl_int_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  std::vector< std::list< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___setslice__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___setslice__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListInt___setslice__" "', argument " "3"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  std::vector< std::list< int > >::difference_type arg3 ;
  std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorListInt___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___setslice__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___setslice__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListInt___setslice__" "', argument " "3"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< int > >::difference_type >(val3);
  {
    std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *ptr = (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorListInt___setslice__" "', argument " "4"" of type '" "std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt___setslice__" "', argument " "4"" of type '" "std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorListInt___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorListInt___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::__setslice__(std::vector< std::list< int > >::difference_type,std::vector< std::list< int > >::difference_type)\n"
    "    std::vector< std::list< int > >::__setslice__(std::vector< std::list< int > >::difference_type,std::vector< std::list< int > >::difference_type,std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  std::vector< std::list< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___delslice__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___delslice__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListInt___delslice__" "', argument " "3"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___delitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___delitem__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___getitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *)std_vector_Sl_std_list_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___setitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *ptr = (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListInt___setitem__" "', argument " "3"" of type '" "std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt___setitem__" "', argument " "3"" of type '" "std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___setitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___delitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListInt___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListInt___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::__delitem__(std::vector< std::list< int > >::difference_type)\n"
    "    std::vector< std::list< int > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___getitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___getitem__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::list< int > >::value_type *) &std_vector_Sl_std_list_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::list< int > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListInt___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListInt___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::list< int > >::__getitem__(std::vector< std::list< int > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::difference_type arg2 ;
  std::vector< std::list< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt___setitem__" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt___setitem__" "', argument " "2"" of type '" "std::vector< std::list< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::difference_type >(val2);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListInt___setitem__" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt___setitem__" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_int_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::list< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListInt___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListInt___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListInt___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::__setitem__(PySliceObject *,std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > const &)\n"
    "    std::vector< std::list< int > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::list< int > >::__setitem__(std::vector< std::list< int > >::difference_type,std::vector< std::list< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_pop" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_list_Sl_int_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_append" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListInt_append" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_append" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_list_Sl_int_Sg__Sg__append(arg1,(std::list< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorListInt")) SWIG_fail;
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorListInt",&obj0)) SWIG_fail;
  {
    std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *ptr = (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >((std::vector< std::list< int,std::allocator< int > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_empty" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (bool)((std::vector< std::list< int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_size" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = ((std::vector< std::list< int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_swap" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListInt_swap" "', argument " "2"" of type '" "std::vector< std::list< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_swap" "', argument " "2"" of type '" "std::vector< std::list< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::list< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_begin" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_end" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_rbegin" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_rend" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_clear" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::list< int,std::allocator< int > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_get_allocator" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = ((std::vector< std::list< int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::list< int > >::allocator_type(static_cast< const std::vector< std::list< int > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorListInt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::list< int > >::size_type >(val1);
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_pop_back" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_resize" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_resize" "', argument " "2"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_erase" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_list_Sl_int_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::iterator arg2 ;
  std::vector< std::list< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_erase" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "3"" of type '" "std::vector< std::list< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_erase" "', argument " "3"" of type '" "std::vector< std::list< int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_list_Sl_int_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorListInt_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorListInt_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::erase(std::vector< std::list< int > >::iterator)\n"
    "    std::vector< std::list< int > >::erase(std::vector< std::list< int > >::iterator,std::vector< std::list< int > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorListInt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > >::size_type arg1 ;
  std::vector< std::list< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorListInt",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::list< int > >::size_type >(val1);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorListInt" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorListInt" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::list< int > > *)new std::vector< std::list< int > >(arg1,(std::vector< std::list< int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListInt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorListInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorListInt__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorListInt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorListInt__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorListInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::vector()\n"
    "    std::vector< std::list< int > >::vector(std::vector< std::list< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::list< int > >::vector(std::vector< std::list< int > >::size_type)\n"
    "    std::vector< std::list< int > >::vector(std::vector< std::list< int > >::size_type,std::vector< std::list< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_push_back" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListInt_push_back" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_push_back" "', argument " "2"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::list< int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_front" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (std::vector< std::list< int > >::value_type *) &((std::vector< std::list< int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_back" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = (std::vector< std::list< int > >::value_type *) &((std::vector< std::list< int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type arg2 ;
  std::vector< std::list< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_assign" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_assign" "', argument " "2"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::size_type >(val2);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListInt_assign" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_assign" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::list< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type arg2 ;
  std::vector< std::list< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_resize" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_resize" "', argument " "2"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::size_type >(val2);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListInt_resize" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_resize" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::list< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListInt_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListInt_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::resize(std::vector< std::list< int > >::size_type)\n"
    "    std::vector< std::list< int > >::resize(std::vector< std::list< int > >::size_type,std::vector< std::list< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::iterator arg2 ;
  std::vector< std::list< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< int > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListInt_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_insert" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_insert" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_insert" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
    }
  }
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListInt_insert" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_insert" "', argument " "3"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_list_Sl_int_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::list< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::iterator arg2 ;
  std::vector< std::list< int > >::size_type arg3 ;
  std::vector< std::list< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorListInt_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_insert" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_insert" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListInt_insert" "', argument " "2"" of type '" "std::vector< std::list< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListInt_insert" "', argument " "3"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< int > >::size_type >(val3);
  {
    std::list< int,std::allocator< int > > *ptr = (std::list< int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorListInt_insert" "', argument " "4"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListInt_insert" "', argument " "4"" of type '" "std::vector< std::list< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_list_Sl_int_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::list< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListInt_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorListInt_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListInt_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< int > >::insert(std::vector< std::list< int > >::iterator,std::vector< std::list< int > >::value_type const &)\n"
    "    std::vector< std::list< int > >::insert(std::vector< std::list< int > >::iterator,std::vector< std::list< int > >::size_type,std::vector< std::list< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListInt_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  std::vector< std::list< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListInt_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_reserve" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListInt_reserve" "', argument " "2"" of type '" "std::vector< std::list< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListInt_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< int > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListInt_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListInt_capacity" "', argument " "1"" of type '" "std::vector< std::list< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  result = ((std::vector< std::list< int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorListInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< int > > *arg1 = (std::vector< std::list< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorListInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorListInt" "', argument " "1"" of type '" "std::vector< std::list< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< int > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorListInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorListString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_iterator" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___nonzero__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____nonzero__((std::vector< std::list< std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___bool__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____bool__((std::vector< std::list< std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___len__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____len__((std::vector< std::list< std::wstring > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  std::vector< std::list< std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___getslice__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___getslice__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListString___getslice__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val3);
  try {
    result = (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *)std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  std::vector< std::list< std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___setslice__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___setslice__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListString___setslice__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  std::vector< std::list< std::wstring > >::difference_type arg3 ;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorListString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___setslice__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___setslice__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListString___setslice__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val3);
  {
    std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *ptr = (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorListString___setslice__" "', argument " "4"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString___setslice__" "', argument " "4"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorListString___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorListString___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::__setslice__(std::vector< std::list< std::wstring > >::difference_type,std::vector< std::list< std::wstring > >::difference_type)\n"
    "    std::vector< std::list< std::wstring > >::__setslice__(std::vector< std::list< std::wstring > >::difference_type,std::vector< std::list< std::wstring > >::difference_type,std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  std::vector< std::list< std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___delslice__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___delslice__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListString___delslice__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___delitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___delitem__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___getitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *)std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___setitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *ptr = (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListString___setitem__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString___setitem__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___setitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___delitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::__delitem__(std::vector< std::list< std::wstring > >::difference_type)\n"
    "    std::vector< std::list< std::wstring > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___getitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___getitem__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  try {
    result = (std::vector< std::list< std::wstring > >::value_type *) &std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____getitem____SWIG_1((std::vector< std::list< std::wstring > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::list< std::wstring > >::__getitem__(std::vector< std::list< std::wstring > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::difference_type arg2 ;
  std::vector< std::list< std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString___setitem__" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString___setitem__" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::difference_type >(val2);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListString___setitem__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString___setitem__" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorListString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::__setitem__(PySliceObject *,std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > const &)\n"
    "    std::vector< std::list< std::wstring > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::list< std::wstring > >::__setitem__(std::vector< std::list< std::wstring > >::difference_type,std::vector< std::list< std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_pop" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  try {
    result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_append" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListString_append" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_append" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__append(arg1,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorListString")) SWIG_fail;
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorListString",&obj0)) SWIG_fail;
  {
    std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *ptr = (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >((std::vector< std::list< std::wstring,std::allocator< std::wstring > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_empty" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (bool)((std::vector< std::list< std::wstring > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_size" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = ((std::vector< std::list< std::wstring > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring,std::allocator< std::wstring > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_swap" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListString_swap" "', argument " "2"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_swap" "', argument " "2"" of type '" "std::vector< std::list< std::wstring,std::allocator< std::wstring > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::list< std::wstring,std::allocator< std::wstring > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_begin" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_end" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_rbegin" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_rend" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_clear" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_get_allocator" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = ((std::vector< std::list< std::wstring > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::list< std::wstring > >::allocator_type(static_cast< const std::vector< std::list< std::wstring > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorListString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val1);
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_pop_back" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_resize" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_resize" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_erase" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::iterator arg2 ;
  std::vector< std::list< std::wstring > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_erase" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_erase" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorListString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorListString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::erase(std::vector< std::list< std::wstring > >::iterator)\n"
    "    std::vector< std::list< std::wstring > >::erase(std::vector< std::list< std::wstring > >::iterator,std::vector< std::list< std::wstring > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorListString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > >::size_type arg1 ;
  std::vector< std::list< std::wstring > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::list< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorListString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val1);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorListString" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorListString" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::list< std::wstring > > *)new std::vector< std::list< std::wstring > >(arg1,(std::vector< std::list< std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorListString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorListString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorListString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorListString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorListString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorListString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::vector()\n"
    "    std::vector< std::list< std::wstring > >::vector(std::vector< std::list< std::wstring,std::allocator< std::wstring > > > const &)\n"
    "    std::vector< std::list< std::wstring > >::vector(std::vector< std::list< std::wstring > >::size_type)\n"
    "    std::vector< std::list< std::wstring > >::vector(std::vector< std::list< std::wstring > >::size_type,std::vector< std::list< std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_push_back" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorListString_push_back" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_push_back" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::list< std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_front" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (std::vector< std::list< std::wstring > >::value_type *) &((std::vector< std::list< std::wstring > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_back" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = (std::vector< std::list< std::wstring > >::value_type *) &((std::vector< std::list< std::wstring > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type arg2 ;
  std::vector< std::list< std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_assign" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_assign" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val2);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListString_assign" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_assign" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::list< std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type arg2 ;
  std::vector< std::list< std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_resize" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_resize" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val2);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListString_resize" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_resize" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::list< std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorListString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::resize(std::vector< std::list< std::wstring > >::size_type)\n"
    "    std::vector< std::list< std::wstring > >::resize(std::vector< std::list< std::wstring > >::size_type,std::vector< std::list< std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::iterator arg2 ;
  std::vector< std::list< std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::list< std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorListString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_insert" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_insert" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_insert" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
    }
  }
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorListString_insert" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_insert" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::list< std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::iterator arg2 ;
  std::vector< std::list< std::wstring > >::size_type arg3 ;
  std::vector< std::list< std::wstring > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorListString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_insert" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_insert" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorListString_insert" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorListString_insert" "', argument " "3"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val3);
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorListString_insert" "', argument " "4"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorListString_insert" "', argument " "4"" of type '" "std::vector< std::list< std::wstring > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_list_Sl_std_wstring_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorListString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::list< std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorListString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorListString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::list< std::wstring > >::insert(std::vector< std::list< std::wstring > >::iterator,std::vector< std::list< std::wstring > >::value_type const &)\n"
    "    std::vector< std::list< std::wstring > >::insert(std::vector< std::list< std::wstring > >::iterator,std::vector< std::list< std::wstring > >::size_type,std::vector< std::list< std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorListString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  std::vector< std::list< std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorListString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_reserve" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorListString_reserve" "', argument " "2"" of type '" "std::vector< std::list< std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::list< std::wstring > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorListString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::list< std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorListString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorListString_capacity" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  result = ((std::vector< std::list< std::wstring > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorListString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::list< std::wstring > > *arg1 = (std::vector< std::list< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorListString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorListString" "', argument " "1"" of type '" "std::vector< std::list< std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::list< std::wstring > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorListString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_iterator" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_wstring_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___nonzero__" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (bool)std_vector_Sl_std_wstring_Sg____nonzero__((std::vector< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___bool__" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (bool)std_vector_Sl_std_wstring_Sg____bool__((std::vector< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___len__" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = std_vector_Sl_std_wstring_Sg____len__((std::vector< std::wstring > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  std::vector< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___getslice__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___getslice__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorString___getslice__" "', argument " "3"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::wstring >::difference_type >(val3);
  try {
    result = (std::vector< std::wstring,std::allocator< std::wstring > > *)std_vector_Sl_std_wstring_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  std::vector< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___setslice__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___setslice__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorString___setslice__" "', argument " "3"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::wstring >::difference_type >(val3);
  try {
    std_vector_Sl_std_wstring_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  std::vector< std::wstring >::difference_type arg3 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___setslice__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___setslice__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorString___setslice__" "', argument " "3"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::wstring >::difference_type >(val3);
  {
    std::vector< std::wstring,std::allocator< std::wstring > > *ptr = (std::vector< std::wstring,std::allocator< std::wstring > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorString___setslice__" "', argument " "4"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString___setslice__" "', argument " "4"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_wstring_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::wstring,std::allocator< std::wstring > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorString___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorString___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::__setslice__(std::vector< std::wstring >::difference_type,std::vector< std::wstring >::difference_type)\n"
    "    std::vector< std::wstring >::__setslice__(std::vector< std::wstring >::difference_type,std::vector< std::wstring >::difference_type,std::vector< std::wstring,std::allocator< std::wstring > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  std::vector< std::wstring >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___delslice__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___delslice__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorString___delslice__" "', argument " "3"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::wstring >::difference_type >(val3);
  try {
    std_vector_Sl_std_wstring_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___delitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___delitem__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  try {
    std_vector_Sl_std_wstring_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___getitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::wstring,std::allocator< std::wstring > > *)std_vector_Sl_std_wstring_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___setitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::wstring,std::allocator< std::wstring > > *ptr = (std::vector< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_wstring_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___setitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_wstring_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___delitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_wstring_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::__delitem__(std::vector< std::wstring >::difference_type)\n"
    "    std::vector< std::wstring >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___getitem__" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___getitem__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  try {
    result = (std::vector< std::wstring >::value_type *) &std_vector_Sl_std_wstring_Sg____getitem____SWIG_1((std::vector< std::wstring > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::wstring >::__getitem__(std::vector< std::wstring >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::difference_type arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString___setitem__" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString___setitem__" "', argument " "2"" of type '" "std::vector< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::difference_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString___setitem__" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_wstring_Sg____setitem____SWIG_2(arg1,arg2,(std::wstring const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::__setitem__(PySliceObject *,std::vector< std::wstring,std::allocator< std::wstring > > const &)\n"
    "    std::vector< std::wstring >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::wstring >::__setitem__(std::vector< std::wstring >::difference_type,std::vector< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_pop" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  try {
    result = std_vector_Sl_std_wstring_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_append" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorString_append" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_append" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_wstring_Sg__append(arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorString")) SWIG_fail;
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorString",&obj0)) SWIG_fail;
  {
    std::vector< std::wstring,std::allocator< std::wstring > > *ptr = (std::vector< std::wstring,std::allocator< std::wstring > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >((std::vector< std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_empty" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (bool)((std::vector< std::wstring > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_size" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = ((std::vector< std::wstring > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_swap" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorString_swap" "', argument " "2"" of type '" "std::vector< std::wstring > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_swap" "', argument " "2"" of type '" "std::vector< std::wstring > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::wstring > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_begin" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_end" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_rbegin" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_rend" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_clear" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_get_allocator" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = ((std::vector< std::wstring > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::wstring >::allocator_type(static_cast< const std::vector< std::wstring >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__wstring_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::wstring >::size_type >(val1);
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_pop_back" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_resize" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_resize" "', argument " "2"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_erase" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
    }
  }
  result = std_vector_Sl_std_wstring_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::iterator arg2 ;
  std::vector< std::wstring >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_erase" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "3"" of type '" "std::vector< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_erase" "', argument " "3"" of type '" "std::vector< std::wstring >::iterator""'");
    }
  }
  result = std_vector_Sl_std_wstring_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::erase(std::vector< std::wstring >::iterator)\n"
    "    std::vector< std::wstring >::erase(std::vector< std::wstring >::iterator,std::vector< std::wstring >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring >::size_type arg1 ;
  std::vector< std::wstring >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::wstring >::size_type >(val1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorString" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorString" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1,(std::vector< std::wstring >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::vector()\n"
    "    std::vector< std::wstring >::vector(std::vector< std::wstring > const &)\n"
    "    std::vector< std::wstring >::vector(std::vector< std::wstring >::size_type)\n"
    "    std::vector< std::wstring >::vector(std::vector< std::wstring >::size_type,std::vector< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_push_back" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorString_push_back" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_push_back" "', argument " "2"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::wstring >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_front" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (std::vector< std::wstring >::value_type *) &((std::vector< std::wstring > const *)arg1)->front();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_back" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = (std::vector< std::wstring >::value_type *) &((std::vector< std::wstring > const *)arg1)->back();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_assign" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_assign" "', argument " "2"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::size_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString_assign" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_assign" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::wstring >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_resize" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_resize" "', argument " "2"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::size_type >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString_resize" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_resize" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::wstring >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::resize(std::vector< std::wstring >::size_type)\n"
    "    std::vector< std::wstring >::resize(std::vector< std::wstring >::size_type,std::vector< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::iterator arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_insert" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_insert" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_insert" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
    }
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorString_insert" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_insert" "', argument " "3"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_wstring_Sg__insert__SWIG_0(arg1,arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::iterator arg2 ;
  std::vector< std::wstring >::size_type arg3 ;
  std::vector< std::wstring >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_insert" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_insert" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorString_insert" "', argument " "2"" of type '" "std::vector< std::wstring >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorString_insert" "', argument " "3"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::wstring >::size_type >(val3);
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorString_insert" "', argument " "4"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorString_insert" "', argument " "4"" of type '" "std::vector< std::wstring >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_wstring_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::wstring,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_wstring(argv[3], (std::wstring**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::wstring >::insert(std::vector< std::wstring >::iterator,std::vector< std::wstring >::value_type const &)\n"
    "    std::vector< std::wstring >::insert(std::vector< std::wstring >::iterator,std::vector< std::wstring >::size_type,std::vector< std::wstring >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_reserve" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorString_reserve" "', argument " "2"" of type '" "std::vector< std::wstring >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::wstring >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorString_capacity" "', argument " "1"" of type '" "std::vector< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  result = ((std::vector< std::wstring > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorString" "', argument " "1"" of type '" "std::vector< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::wstring > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PairDoubleString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PairDoubleString")) SWIG_fail;
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairDoubleString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  std::wstring arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< double,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PairDoubleString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PairDoubleString" "', argument " "2"" of type '" "std::wstring""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairDoubleString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< double,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairDoubleString",&obj0)) SWIG_fail;
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< double,std::wstring > *)new std::pair< double,std::wstring >((std::pair< double,std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairDoubleString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PairDoubleString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< double,std::wstring >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairDoubleString__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PairDoubleString__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PairDoubleString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< double,std::wstring >::pair()\n"
    "    std::pair< double,std::wstring >::pair(double,std::wstring)\n"
    "    std::pair< double,std::wstring >::pair(std::pair< double,std::wstring > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairDoubleString_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairDoubleString_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_first_set" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairDoubleString_first_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairDoubleString_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairDoubleString_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_first_get" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
  result = (double) ((arg1)->first);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairDoubleString_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairDoubleString_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_second_set" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairDoubleString_second_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairDoubleString_second_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairDoubleString_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairDoubleString_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairDoubleString_second_get" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
  result = (std::wstring *) & ((arg1)->second);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PairDoubleString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< double,std::wstring > *arg1 = (std::pair< double,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PairDoubleString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairDoubleString" "', argument " "1"" of type '" "std::pair< double,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< double,std::wstring > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PairDoubleString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_double_std__wstring_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorPairDoubleString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_iterator" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____nonzero__((std::vector< std::pair< double,std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___bool__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____bool__((std::vector< std::pair< double,std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___len__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____len__((std::vector< std::pair< double,std::wstring > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairDoubleString___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *)std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairDoubleString___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg3 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPairDoubleString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairDoubleString___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val3);
  {
    std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *ptr = (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPairDoubleString___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorPairDoubleString___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPairDoubleString___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::__setslice__(std::vector< std::pair< double,std::wstring > >::difference_type,std::vector< std::pair< double,std::wstring > >::difference_type)\n"
    "    std::vector< std::pair< double,std::wstring > >::__setslice__(std::vector< std::pair< double,std::wstring > >::difference_type,std::vector< std::pair< double,std::wstring > >::difference_type,std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairDoubleString___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *)std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *ptr = (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::__delitem__(std::vector< std::pair< double,std::wstring > >::difference_type)\n"
    "    std::vector< std::pair< double,std::wstring > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< double,std::wstring > >::value_type *) &std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< double,std::wstring > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< double,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::pair< double,std::wstring > >::__getitem__(std::vector< std::pair< double,std::wstring > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::difference_type >(val2);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< double,std::wstring > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairDoubleString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< double,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairDoubleString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::__setitem__(PySliceObject *,std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > const &)\n"
    "    std::vector< std::pair< double,std::wstring > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::pair< double,std::wstring > >::__setitem__(std::vector< std::pair< double,std::wstring > >::difference_type,std::vector< std::pair< double,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_pop" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< double,std::wstring > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_append" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairDoubleString_append" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_append" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__append(arg1,(std::pair< double,std::wstring > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairDoubleString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorPairDoubleString")) SWIG_fail;
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairDoubleString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPairDoubleString",&obj0)) SWIG_fail;
  {
    std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *ptr = (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >((std::vector< std::pair< double,std::wstring > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_empty" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (bool)((std::vector< std::pair< double,std::wstring > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_size" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< double,std::wstring > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_swap" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairDoubleString_swap" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_swap" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_begin" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_end" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_rend" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_clear" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< double,std::wstring > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< double,std::wstring > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< double,std::wstring > >::allocator_type(static_cast< const std::vector< std::pair< double,std::wstring > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_double_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairDoubleString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPairDoubleString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val1);
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_resize" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_resize" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_erase" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< double,std::wstring > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_erase" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_erase" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorPairDoubleString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorPairDoubleString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::erase(std::vector< std::pair< double,std::wstring > >::iterator)\n"
    "    std::vector< std::pair< double,std::wstring > >::erase(std::vector< std::pair< double,std::wstring > >::iterator,std::vector< std::pair< double,std::wstring > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorPairDoubleString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > >::size_type arg1 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< double,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorPairDoubleString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val1);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPairDoubleString" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairDoubleString" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< double,std::wstring > > *)new std::vector< std::pair< double,std::wstring > >(arg1,(std::vector< std::pair< double,std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairDoubleString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorPairDoubleString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorPairDoubleString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorPairDoubleString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< double,std::wstring >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorPairDoubleString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorPairDoubleString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::vector()\n"
    "    std::vector< std::pair< double,std::wstring > >::vector(std::vector< std::pair< double,std::wstring > > const &)\n"
    "    std::vector< std::pair< double,std::wstring > >::vector(std::vector< std::pair< double,std::wstring > >::size_type)\n"
    "    std::vector< std::pair< double,std::wstring > >::vector(std::vector< std::pair< double,std::wstring > >::size_type,std::vector< std::pair< double,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_push_back" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairDoubleString_push_back" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_push_back" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< double,std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_front" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (std::vector< std::pair< double,std::wstring > >::value_type *) &((std::vector< std::pair< double,std::wstring > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< double,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_back" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = (std::vector< std::pair< double,std::wstring > >::value_type *) &((std::vector< std::pair< double,std::wstring > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< double,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_assign" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_assign" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val2);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString_assign" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_assign" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< double,std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_resize" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_resize" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val2);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString_resize" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_resize" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< double,std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairDoubleString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< double,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairDoubleString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::resize(std::vector< std::pair< double,std::wstring > >::size_type)\n"
    "    std::vector< std::pair< double,std::wstring > >::resize(std::vector< std::pair< double,std::wstring > >::size_type,std::vector< std::pair< double,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairDoubleString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_insert" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_insert" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_insert" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
    }
  }
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairDoubleString_insert" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_insert" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< double,std::wstring > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< double,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg3 ;
  std::vector< std::pair< double,std::wstring > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPairDoubleString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_insert" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_insert" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairDoubleString_insert" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairDoubleString_insert" "', argument " "3"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val3);
  {
    std::pair< double,std::wstring > *ptr = (std::pair< double,std::wstring > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPairDoubleString_insert" "', argument " "4"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairDoubleString_insert" "', argument " "4"" of type '" "std::vector< std::pair< double,std::wstring > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_pair_Sl_double_Sc_std_wstring_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< double,std::wstring > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< double,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairDoubleString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< double,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< double,std::wstring >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPairDoubleString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairDoubleString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< double,std::wstring > >::insert(std::vector< std::pair< double,std::wstring > >::iterator,std::vector< std::pair< double,std::wstring > >::value_type const &)\n"
    "    std::vector< std::pair< double,std::wstring > >::insert(std::vector< std::pair< double,std::wstring > >::iterator,std::vector< std::pair< double,std::wstring > >::size_type,std::vector< std::pair< double,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairDoubleString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_reserve" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairDoubleString_reserve" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< double,std::wstring > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairDoubleString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< double,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairDoubleString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairDoubleString_capacity" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< double,std::wstring > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorPairDoubleString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< double,std::wstring > > *arg1 = (std::vector< std::pair< double,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorPairDoubleString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPairDoubleString" "', argument " "1"" of type '" "std::vector< std::pair< double,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< double,std::wstring > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorPairDoubleString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PairStringString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PairStringString")) SWIG_fail;
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring arg1 ;
  std::wstring arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PairStringString",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::wstring""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PairStringString" "', argument " "2"" of type '" "std::wstring""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< std::wstring,std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairStringString",&obj0)) SWIG_fail;
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< std::wstring,std::wstring > *)new std::pair< std::wstring,std::wstring >((std::pair< std::wstring,std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PairStringString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< std::wstring,std::wstring >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairStringString__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PairStringString__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PairStringString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::wstring,std::wstring >::pair()\n"
    "    std::pair< std::wstring,std::wstring >::pair(std::wstring,std::wstring)\n"
    "    std::pair< std::wstring,std::wstring >::pair(std::pair< std::wstring,std::wstring > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairStringString_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringString_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_first_set" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringString_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringString_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringString_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringString_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_first_get" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
  result = (std::wstring *) & ((arg1)->first);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringString_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringString_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_second_set" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringString_second_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringString_second_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringString_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringString_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringString_second_get" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
  result = (std::wstring *) & ((arg1)->second);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PairStringString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,std::wstring > *arg1 = (std::pair< std::wstring,std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PairStringString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairStringString" "', argument " "1"" of type '" "std::pair< std::wstring,std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,std::wstring > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PairStringString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__wstring_std__wstring_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_VectorPairStringString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_iterator" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____nonzero__((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___bool__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____bool__((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___len__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____len__((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairStringString___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *)std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairStringString___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg3 ;
  std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPairStringString___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairStringString___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val3);
  {
    std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *ptr = (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPairStringString___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorPairStringString___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPairStringString___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__setslice__(std::vector< std::pair< std::wstring,std::wstring > >::difference_type,std::vector< std::pair< std::wstring,std::wstring > >::difference_type)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__setslice__(std::vector< std::pair< std::wstring,std::wstring > >::difference_type,std::vector< std::pair< std::wstring,std::wstring > >::difference_type,std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairStringString___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *)std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *ptr = (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairStringString___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairStringString___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__delitem__(std::vector< std::pair< std::wstring,std::wstring > >::difference_type)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< std::wstring,std::wstring > >::value_type *) &std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< std::wstring,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairStringString___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairStringString___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__getitem__(std::vector< std::pair< std::wstring,std::wstring > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::difference_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::difference_type >(val2);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< std::wstring,std::wstring > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_VectorPairStringString___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairStringString___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairStringString___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__setitem__(PySliceObject *,std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::__setitem__(std::vector< std::pair< std::wstring,std::wstring > >::difference_type,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_pop" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< std::wstring,std::wstring > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_append" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairStringString_append" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_append" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__append(arg1,(std::pair< std::wstring,std::wstring > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairStringString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorPairStringString")) SWIG_fail;
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairStringString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPairStringString",&obj0)) SWIG_fail;
  {
    std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *ptr = (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >((std::vector< std::pair< std::wstring,std::wstring > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_empty" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (bool)((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_size" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_swap" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairStringString_swap" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_swap" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_begin" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_end" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_rend" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_clear" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::wstring,std::wstring > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< std::wstring,std::wstring > >::allocator_type(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairStringString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorPairStringString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val1);
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_resize" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_resize" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_erase" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_erase" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_erase" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_VectorPairStringString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_VectorPairStringString_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::erase(std::vector< std::pair< std::wstring,std::wstring > >::iterator)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::erase(std::vector< std::pair< std::wstring,std::wstring > >::iterator,std::vector< std::pair< std::wstring,std::wstring > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_VectorPairStringString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg1 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorPairStringString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val1);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorPairStringString" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorPairStringString" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< std::wstring,std::wstring > > *)new std::vector< std::pair< std::wstring,std::wstring > >(arg1,(std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorPairStringString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorPairStringString__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorPairStringString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorPairStringString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::wstring,std::wstring >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorPairStringString__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorPairStringString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::vector()\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::vector(std::vector< std::pair< std::wstring,std::wstring > > const &)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::vector(std::vector< std::pair< std::wstring,std::wstring > >::size_type)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::vector(std::vector< std::pair< std::wstring,std::wstring > >::size_type,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_push_back" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorPairStringString_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_front" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (std::vector< std::pair< std::wstring,std::wstring > >::value_type *) &((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< std::wstring,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_back" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = (std::vector< std::pair< std::wstring,std::wstring > >::value_type *) &((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< std::wstring,std::wstring > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_assign" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_assign" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val2);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString_assign" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_assign" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_resize" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_resize" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val2);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString_resize" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_resize" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorPairStringString_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairStringString_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::resize(std::vector< std::pair< std::wstring,std::wstring > >::size_type)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::resize(std::vector< std::pair< std::wstring,std::wstring > >::size_type,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorPairStringString_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_insert" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
    }
  }
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorPairStringString_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< std::wstring,std::wstring > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::wstring,std::wstring > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::iterator arg2 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg3 ;
  std::vector< std::pair< std::wstring,std::wstring > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorPairStringString_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_insert" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "VectorPairStringString_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorPairStringString_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val3);
  {
    std::pair< std::wstring,std::wstring > *ptr = (std::pair< std::wstring,std::wstring > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VectorPairStringString_insert" "', argument " "4"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorPairStringString_insert" "', argument " "4"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_pair_Sl_std_wstring_Sc_std_wstring_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< std::wstring,std::wstring > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,std::wstring >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorPairStringString_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::wstring,std::wstring > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< std::wstring,std::wstring >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VectorPairStringString_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorPairStringString_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::insert(std::vector< std::pair< std::wstring,std::wstring > >::iterator,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)\n"
    "    std::vector< std::pair< std::wstring,std::wstring > >::insert(std::vector< std::pair< std::wstring,std::wstring > >::iterator,std::vector< std::pair< std::wstring,std::wstring > >::size_type,std::vector< std::pair< std::wstring,std::wstring > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorPairStringString_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_reserve" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorPairStringString_reserve" "', argument " "2"" of type '" "std::vector< std::pair< std::wstring,std::wstring > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::wstring,std::wstring > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorPairStringString_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< std::wstring,std::wstring > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorPairStringString_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorPairStringString_capacity" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  result = ((std::vector< std::pair< std::wstring,std::wstring > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VectorPairStringString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::wstring,std::wstring > > *arg1 = (std::vector< std::pair< std::wstring,std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorPairStringString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorPairStringString" "', argument " "1"" of type '" "std::vector< std::pair< std::wstring,std::wstring > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::wstring,std::wstring > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorPairStringString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PairStringInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PairStringInt")) SWIG_fail;
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::wstring,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PairStringInt",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PairStringInt" "', argument " "1"" of type '" "std::wstring""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PairStringInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringInt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< std::wstring,int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairStringInt",&obj0)) SWIG_fail;
  {
    std::pair< std::wstring,int > *ptr = (std::pair< std::wstring,int > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairStringInt" "', argument " "1"" of type '" "std::pair< std::wstring,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringInt" "', argument " "1"" of type '" "std::pair< std::wstring,int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< std::wstring,int > *)new std::pair< std::wstring,int >((std::pair< std::wstring,int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringInt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PairStringInt__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< std::wstring,int >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairStringInt__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PairStringInt__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PairStringInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::wstring,int >::pair()\n"
    "    std::pair< std::wstring,int >::pair(std::wstring,int)\n"
    "    std::pair< std::wstring,int >::pair(std::pair< std::wstring,int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairStringInt_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringInt_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringInt_first_set" "', argument " "1"" of type '" "std::pair< std::wstring,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,int > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringInt_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringInt_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringInt_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringInt_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringInt_first_get" "', argument " "1"" of type '" "std::pair< std::wstring,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,int > * >(argp1);
  result = (std::wstring *) & ((arg1)->first);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringInt_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringInt_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringInt_second_set" "', argument " "1"" of type '" "std::pair< std::wstring,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairStringInt_second_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringInt_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringInt_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringInt_second_get" "', argument " "1"" of type '" "std::pair< std::wstring,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,int > * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PairStringInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,int > *arg1 = (std::pair< std::wstring,int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PairStringInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairStringInt" "', argument " "1"" of type '" "std::pair< std::wstring,int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PairStringInt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__wstring_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PairStringDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PairStringDouble")) SWIG_fail;
  result = (std::pair< std::wstring,double > *)new std::pair< std::wstring,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring arg1 ;
  double arg2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::wstring,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PairStringDouble",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PairStringDouble" "', argument " "1"" of type '" "std::wstring""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PairStringDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (std::pair< std::wstring,double > *)new std::pair< std::wstring,double >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_double_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< std::wstring,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PairStringDouble",&obj0)) SWIG_fail;
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PairStringDouble" "', argument " "1"" of type '" "std::pair< std::wstring,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PairStringDouble" "', argument " "1"" of type '" "std::pair< std::wstring,double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< std::wstring,double > *)new std::pair< std::wstring,double >((std::pair< std::wstring,double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__wstring_double_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PairStringDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PairStringDouble__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< std::wstring,double >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PairStringDouble__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PairStringDouble__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_PairStringDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::wstring,double >::pair()\n"
    "    std::pair< std::wstring,double >::pair(std::wstring,double)\n"
    "    std::pair< std::wstring,double >::pair(std::pair< std::wstring,double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PairStringDouble_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = (std::pair< std::wstring,double > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringDouble_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringDouble_first_set" "', argument " "1"" of type '" "std::pair< std::wstring,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,double > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PairStringDouble_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PairStringDouble_first_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringDouble_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = (std::pair< std::wstring,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringDouble_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringDouble_first_get" "', argument " "1"" of type '" "std::pair< std::wstring,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,double > * >(argp1);
  result = (std::wstring *) & ((arg1)->first);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringDouble_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = (std::pair< std::wstring,double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PairStringDouble_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringDouble_second_set" "', argument " "1"" of type '" "std::pair< std::wstring,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PairStringDouble_second_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PairStringDouble_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = (std::pair< std::wstring,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PairStringDouble_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PairStringDouble_second_get" "', argument " "1"" of type '" "std::pair< std::wstring,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,double > * >(argp1);
  result = (double) ((arg1)->second);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PairStringDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::wstring,double > *arg1 = (std::pair< std::wstring,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PairStringDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__wstring_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PairStringDouble" "', argument " "1"" of type '" "std::pair< std::wstring,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::wstring,double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PairStringDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__wstring_double_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ListPairStringDouble_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_iterator" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (swig::SwigPyIterator *)std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___nonzero__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (bool)std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____nonzero__((std::list< std::pair< std::wstring,double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___bool__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (bool)std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____bool__((std::list< std::pair< std::wstring,double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___len__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____len__((std::list< std::pair< std::wstring,double > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___getslice__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___getslice__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListPairStringDouble___getslice__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val3);
  try {
    result = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___setslice__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___setslice__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListPairStringDouble___setslice__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val3);
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg3 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListPairStringDouble___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___setslice__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___setslice__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListPairStringDouble___setslice__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val3);
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListPairStringDouble___setslice__" "', argument " "4"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble___setslice__" "', argument " "4"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ListPairStringDouble___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListPairStringDouble___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::__setslice__(std::list< std::pair< std::wstring,double > >::difference_type,std::list< std::pair< std::wstring,double > >::difference_type)\n"
    "    std::list< std::pair< std::wstring,double > >::__setslice__(std::list< std::pair< std::wstring,double > >::difference_type,std::list< std::pair< std::wstring,double > >::difference_type,std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___delslice__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___delslice__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListPairStringDouble___delslice__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg3 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val3);
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___delitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___delitem__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___getitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___setitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListPairStringDouble___setitem__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble___setitem__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___setitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___delitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListPairStringDouble___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListPairStringDouble___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::__delitem__(std::list< std::pair< std::wstring,double > >::difference_type)\n"
    "    std::list< std::pair< std::wstring,double > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___getitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___getitem__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  try {
    result = (std::list< std::pair< std::wstring,double > >::value_type *) &std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____getitem____SWIG_1((std::list< std::pair< std::wstring,double > > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< std::wstring,double > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListPairStringDouble___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListPairStringDouble___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::__getitem__(PySliceObject *)\n"
    "    std::list< std::pair< std::wstring,double > >::__getitem__(std::list< std::pair< std::wstring,double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::difference_type arg2 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble___setitem__" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble___setitem__" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::difference_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::difference_type >(val2);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListPairStringDouble___setitem__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble___setitem__" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< std::wstring,double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ListPairStringDouble___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListPairStringDouble___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,double >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListPairStringDouble___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::__setitem__(PySliceObject *,std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)\n"
    "    std::list< std::pair< std::wstring,double > >::__setitem__(PySliceObject *)\n"
    "    std::list< std::pair< std::wstring,double > >::__setitem__(std::list< std::pair< std::wstring,double > >::difference_type,std::list< std::pair< std::wstring,double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_pop" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  try {
    result = std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = swig::from(static_cast< std::pair< std::wstring,double > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_append" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListPairStringDouble_append" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_append" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__append(arg1,(std::pair< std::wstring,double > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListPairStringDouble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ListPairStringDouble")) SWIG_fail;
  result = (std::list< std::pair< std::wstring,double > > *)new std::list< std::pair< std::wstring,double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListPairStringDouble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListPairStringDouble",&obj0)) SWIG_fail;
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ListPairStringDouble" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListPairStringDouble" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::list< std::pair< std::wstring,double > > *)new std::list< std::pair< std::wstring,double > >((std::list< std::pair< std::wstring,double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_empty" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (bool)((std::list< std::pair< std::wstring,double > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_size" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = ((std::list< std::pair< std::wstring,double > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_swap" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListPairStringDouble_swap" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_swap" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_begin" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_end" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_rbegin" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_rend" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_clear" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::wstring,double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_get_allocator" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = ((std::list< std::pair< std::wstring,double > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,double > >::allocator_type(static_cast< const std::list< std::pair< std::wstring,double > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__wstring_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListPairStringDouble__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ListPairStringDouble",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListPairStringDouble" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val1);
  result = (std::list< std::pair< std::wstring,double > > *)new std::list< std::pair< std::wstring,double > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_pop_back" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_resize" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble_resize" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::pair< std::wstring,double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_erase" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
    }
  }
  result = std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::iterator arg2 ;
  std::list< std::pair< std::wstring,double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::pair< std::wstring,double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_erase" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_erase" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
    }
  }
  result = std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ListPairStringDouble_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ListPairStringDouble_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::erase(std::list< std::pair< std::wstring,double > >::iterator)\n"
    "    std::list< std::pair< std::wstring,double > >::erase(std::list< std::pair< std::wstring,double > >::iterator,std::list< std::pair< std::wstring,double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ListPairStringDouble__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > >::size_type arg1 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::pair< std::wstring,double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ListPairStringDouble",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ListPairStringDouble" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg1 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val1);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ListPairStringDouble" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ListPairStringDouble" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::list< std::pair< std::wstring,double > > *)new std::list< std::pair< std::wstring,double > >(arg1,(std::list< std::pair< std::wstring,double > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ListPairStringDouble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ListPairStringDouble__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ListPairStringDouble__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ListPairStringDouble__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::wstring,double >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ListPairStringDouble__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ListPairStringDouble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::list()\n"
    "    std::list< std::pair< std::wstring,double > >::list(std::list< std::pair< std::wstring,double > > const &)\n"
    "    std::list< std::pair< std::wstring,double > >::list(std::list< std::pair< std::wstring,double > >::size_type)\n"
    "    std::list< std::pair< std::wstring,double > >::list(std::list< std::pair< std::wstring,double > >::size_type,std::list< std::pair< std::wstring,double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_push_back" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListPairStringDouble_push_back" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_push_back" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::list< std::pair< std::wstring,double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_front" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (std::list< std::pair< std::wstring,double > >::value_type *) &((std::list< std::pair< std::wstring,double > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< std::wstring,double > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_back" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  result = (std::list< std::pair< std::wstring,double > >::value_type *) &((std::list< std::pair< std::wstring,double > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< std::wstring,double > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::size_type arg2 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_assign" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble_assign" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val2);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListPairStringDouble_assign" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_assign" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::list< std::pair< std::wstring,double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::size_type arg2 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_resize" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ListPairStringDouble_resize" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg2 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val2);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListPairStringDouble_resize" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_resize" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::list< std::pair< std::wstring,double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ListPairStringDouble_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,double >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListPairStringDouble_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::resize(std::list< std::pair< std::wstring,double > >::size_type)\n"
    "    std::list< std::pair< std::wstring,double > >::resize(std::list< std::pair< std::wstring,double > >::size_type,std::list< std::pair< std::wstring,double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::iterator arg2 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::pair< std::wstring,double > >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ListPairStringDouble_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_insert" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_insert" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_insert" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
    }
  }
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ListPairStringDouble_insert" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_insert" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< std::wstring,double > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::list< std::pair< std::wstring,double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::iterator arg2 ;
  std::list< std::pair< std::wstring,double > >::size_type arg3 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ListPairStringDouble_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_insert" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_insert" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ListPairStringDouble_insert" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ListPairStringDouble_insert" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,double > >::size_type""'");
  } 
  arg3 = static_cast< std::list< std::pair< std::wstring,double > >::size_type >(val3);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ListPairStringDouble_insert" "', argument " "4"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_insert" "', argument " "4"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_list_Sl_std_pair_Sl_std_wstring_Sc_double_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< std::wstring,double > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::wstring,double >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ListPairStringDouble_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::list< std::pair< std::wstring,double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< std::wstring,double >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ListPairStringDouble_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ListPairStringDouble_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::list< std::pair< std::wstring,double > >::insert(std::list< std::pair< std::wstring,double > >::iterator,std::list< std::pair< std::wstring,double > >::value_type const &)\n"
    "    std::list< std::pair< std::wstring,double > >::insert(std::list< std::pair< std::wstring,double > >::iterator,std::list< std::pair< std::wstring,double > >::size_type,std::list< std::pair< std::wstring,double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_pop_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_pop_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_pop_front" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  (arg1)->pop_front();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_push_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  std::list< std::pair< std::wstring,double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ListPairStringDouble_push_front",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_push_front" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  {
    std::pair< std::wstring,double > *ptr = (std::pair< std::wstring,double > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ListPairStringDouble_push_front" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ListPairStringDouble_push_front" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_front((std::list< std::pair< std::wstring,double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ListPairStringDouble_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ListPairStringDouble_reverse",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ListPairStringDouble_reverse" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  (arg1)->reverse();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ListPairStringDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double > > *arg1 = (std::list< std::pair< std::wstring,double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ListPairStringDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ListPairStringDouble" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ListPairStringDouble_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SetString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::wstring > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__wstring_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetString" "', argument " "1"" of type '" "std::less< std::wstring > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetString" "', argument " "1"" of type '" "std::less< std::wstring > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::wstring > * >(argp1);
  result = (std::set< std::wstring > *)new std::set< std::wstring >((std::less< std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_iterator" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_std_wstring_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString___nonzero__" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (bool)std_set_Sl_std_wstring_Sg____nonzero__((std::set< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString___bool__" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (bool)std_set_Sl_std_wstring_Sg____bool__((std::set< std::wstring > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString___len__" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = std_set_Sl_std_wstring_Sg____len__((std::set< std::wstring > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_append" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetString_append" "', argument " "2"" of type '" "std::set< std::wstring >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_wstring_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString___contains__" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetString___contains__" "', argument " "2"" of type '" "std::set< std::wstring >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_std_wstring_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString___getitem__" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SetString___getitem__" "', argument " "2"" of type '" "std::set< std::wstring >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::wstring >::difference_type >(val2);
  try {
    result = std_set_Sl_std_wstring_Sg____getitem__((std::set< std::wstring > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_add" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetString_add" "', argument " "2"" of type '" "std::set< std::wstring >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_wstring_Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_discard",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_discard" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    int res = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetString_discard" "', argument " "2"" of type '" "std::set< std::wstring >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_wstring_Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SetString")) SWIG_fail;
  result = (std::set< std::wstring > *)new std::set< std::wstring >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SetString",&obj0)) SWIG_fail;
  {
    std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *ptr = (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SetString" "', argument " "1"" of type '" "std::set< std::wstring > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SetString" "', argument " "1"" of type '" "std::set< std::wstring > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< std::wstring > *)new std::set< std::wstring >((std::set< std::wstring > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SetString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SetString__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__wstring_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetString__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SetString__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SetString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::wstring >::set(std::less< std::wstring > const &)\n"
    "    std::set< std::wstring >::set()\n"
    "    std::set< std::wstring >::set(std::set< std::wstring > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetString_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_empty" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (bool)((std::set< std::wstring > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_size" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = ((std::set< std::wstring > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_clear" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_swap" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_swap" "', argument " "2"" of type '" "std::set< std::wstring > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_swap" "', argument " "2"" of type '" "std::set< std::wstring > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::wstring > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_erase" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_count" "', argument " "1"" of type '" "std::set< std::wstring > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_count" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_count" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< std::wstring > const *)arg1)->count((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_begin" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_end" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_rbegin" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SetString_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_rend" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_erase" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::iterator""'");
    }
  }
  std_set_Sl_std_wstring_Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::iterator arg2 ;
  std::set< std::wstring >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SetString_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_erase" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "2"" of type '" "std::set< std::wstring >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "3"" of type '" "std::set< std::wstring >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SetString_erase" "', argument " "3"" of type '" "std::set< std::wstring >::iterator""'");
    }
  }
  std_set_Sl_std_wstring_Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SetString_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SetString_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::wstring >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SetString_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SetString_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::wstring >::erase(std::set< std::wstring >::key_type const &)\n"
    "    std::set< std::wstring >::erase(std::set< std::wstring >::iterator)\n"
    "    std::set< std::wstring >::erase(std::set< std::wstring >::iterator,std::set< std::wstring >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SetString_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_find" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_find" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_find" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_lower_bound" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_lower_bound" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_lower_bound" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< std::wstring >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_upper_bound" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_upper_bound" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_upper_bound" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::wstring >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< std::wstring >::iterator,std::set< std::wstring >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_equal_range" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_equal_range" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_equal_range" "', argument " "2"" of type '" "std::set< std::wstring >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::wstring >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::wstring >::iterator,std::set< std::wstring >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::wstring >::iterator,std::set< std::wstring >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetString_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  std::set< std::wstring >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< std::wstring >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SetString_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetString_insert" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetString_insert" "', argument " "2"" of type '" "std::set< std::wstring >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SetString_insert" "', argument " "2"" of type '" "std::set< std::wstring >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::wstring >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::wstring >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::wstring >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SetString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::wstring > *arg1 = (std::set< std::wstring > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SetString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SetString" "', argument " "1"" of type '" "std::set< std::wstring > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::wstring > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SetString_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeOfNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeOfNode")) SWIG_fail;
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__node,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::node const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node >::const_iterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::tree< freeling::node >::const_iterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::tree< freeling::node >::const_iterator const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node >::const_iterator * >(argp1);
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node >::const_iterator const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (freeling::tree< freeling::node > *)new freeling::tree< freeling::node >((freeling::tree< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeOfNode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfNode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfNode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfNode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeOfNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::tree()\n"
    "    freeling::tree< freeling::node >::tree(freeling::node const &)\n"
    "    freeling::tree< freeling::node >::tree(freeling::tree< freeling::node >::const_iterator const &)\n"
    "    freeling::tree< freeling::node >::tree(freeling::tree< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeOfNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeOfNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeOfNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_clear" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_is_root" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (bool)((freeling::tree< freeling::node > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_empty" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (bool)((freeling::tree< freeling::node > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_num_children" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (unsigned int)((freeling::tree< freeling::node > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_has_ancestor" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  result = (bool)((freeling::tree< freeling::node > const *)arg1)->has_ancestor((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child_ref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfNode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_add_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeOfNode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_add_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfNode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeOfNode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::add_child(freeling::tree< freeling::node > const &,bool)\n"
    "    freeling::tree< freeling::node >::add_child(freeling::tree< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::preorder_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::preorder_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node >::preorder_iterator * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::preorder_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::preorder_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::preorder_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node >::preorder_iterator * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::sibling_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::sibling_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node >::sibling_iterator * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  freeling::tree< freeling::node >::sibling_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::sibling_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node >::sibling_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node >::sibling_iterator * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfNode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfNode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfNode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfNode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfNode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfNode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node > &)\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node >::preorder_iterator &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node >::preorder_iterator &)\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node >::sibling_iterator &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree< freeling::node >::hang_child(freeling::tree< freeling::node >::sibling_iterator &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_get_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::preorder_iterator(static_cast< const freeling::tree< freeling::node >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::sibling_iterator(static_cast< const freeling::tree< freeling::node >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::tree< freeling::node > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfNode_nth_child__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfNode_nth_child__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_nth_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::nth_child(unsigned int)\n"
    "    freeling::tree< freeling::node >::nth_child(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child_ref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &((freeling::tree< freeling::node > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_nth_child_ref(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfNode_nth_child_ref__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfNode_nth_child_ref__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_nth_child_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::nth_child_ref(unsigned int)\n"
    "    freeling::tree< freeling::node >::nth_child_ref(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_get_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_get_parent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_get_parent__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_get_parent__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_get_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::get_parent()\n"
    "    freeling::tree< freeling::node >::get_parent() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::begin()\n"
    "    freeling::tree< freeling::node >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_preorder_iterator(static_cast< const freeling::tree< freeling::node >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::end()\n"
    "    freeling::tree< freeling::node >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_sibling_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::sibling_begin()\n"
    "    freeling::tree< freeling::node >::sibling_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_sibling_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::sibling_end()\n"
    "    freeling::tree< freeling::node >::sibling_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rbegin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_rbegin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_sibling_rbegin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::sibling_rbegin()\n"
    "    freeling::tree< freeling::node >::sibling_rbegin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::node >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = ((freeling::tree< freeling::node > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::node >::const_sibling_iterator(static_cast< const freeling::tree< freeling::node >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfNode_sibling_rend(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfNode_sibling_rend__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfNode_sibling_rend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::node >::sibling_rend()\n"
    "    freeling::tree< freeling::node >::sibling_rend() const\n");
  return 0;
}


SWIGINTERN PyObject *TreeOfNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__treeT_freeling__node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeOfDepnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeOfDepnode")) SWIG_fail;
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfDepnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__depnode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::depnode const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfDepnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode >::const_iterator *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode >::const_iterator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode >::const_iterator const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode >::const_iterator * >(argp1);
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode >::const_iterator const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfDepnode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeOfDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeOfDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (freeling::tree< freeling::depnode > *)new freeling::tree< freeling::depnode >((freeling::tree< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeOfDepnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeOfDepnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__depnode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfDepnode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfDepnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeOfDepnode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeOfDepnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::tree()\n"
    "    freeling::tree< freeling::depnode >::tree(freeling::depnode const &)\n"
    "    freeling::tree< freeling::depnode >::tree(freeling::tree< freeling::depnode >::const_iterator const &)\n"
    "    freeling::tree< freeling::depnode >::tree(freeling::tree< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeOfDepnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeOfDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeOfDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_clear" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_is_root" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree< freeling::depnode > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_empty" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree< freeling::depnode > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_num_children" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (unsigned int)((freeling::tree< freeling::depnode > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_has_ancestor" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree< freeling::depnode > const *)arg1)->has_ancestor((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child_ref__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfDepnode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_add_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeOfDepnode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_add_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfDepnode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeOfDepnode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &,bool)\n"
    "    freeling::tree< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode >::preorder_iterator * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::preorder_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode >::preorder_iterator * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeOfDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::sibling_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::sibling_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode >::sibling_iterator * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::sibling_iterator &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeOfDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode >::sibling_iterator &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode >::sibling_iterator * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfDepnode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfDepnode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeOfDepnode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfDepnode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfDepnode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeOfDepnode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &)\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode >::preorder_iterator &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode >::preorder_iterator &)\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode >::sibling_iterator &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree< freeling::depnode >::hang_child(freeling::tree< freeling::depnode >::sibling_iterator &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_get_parent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::preorder_iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::sibling_iterator& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfDepnode_nth_child__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfDepnode_nth_child__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_nth_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::nth_child(unsigned int)\n"
    "    freeling::tree< freeling::depnode >::nth_child(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child_ref__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeOfDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeOfDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &((freeling::tree< freeling::depnode > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_nth_child_ref(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfDepnode_nth_child_ref__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeOfDepnode_nth_child_ref__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_nth_child_ref'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::nth_child_ref(unsigned int)\n"
    "    freeling::tree< freeling::depnode >::nth_child_ref(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_get_parent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_get_parent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_get_parent__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_get_parent__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_get_parent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::get_parent()\n"
    "    freeling::tree< freeling::depnode >::get_parent() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::begin()\n"
    "    freeling::tree< freeling::depnode >::begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_preorder_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_preorder_iterator(static_cast< const freeling::tree< freeling::depnode >::const_preorder_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::end()\n"
    "    freeling::tree< freeling::depnode >::end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_sibling_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::sibling_begin()\n"
    "    freeling::tree< freeling::depnode >::sibling_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_sibling_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::sibling_end()\n"
    "    freeling::tree< freeling::depnode >::sibling_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rbegin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_rbegin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_sibling_rbegin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::sibling_rbegin()\n"
    "    freeling::tree< freeling::depnode >::sibling_rbegin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree< freeling::depnode >::const_sibling_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeOfDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeOfDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = ((freeling::tree< freeling::depnode > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree< freeling::depnode >::const_sibling_iterator(static_cast< const freeling::tree< freeling::depnode >::const_sibling_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeOfDepnode_sibling_rend(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeOfDepnode_sibling_rend__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeOfDepnode_sibling_rend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree< freeling::depnode >::sibling_rend()\n"
    "    freeling::tree< freeling::depnode >::sibling_rend() const\n");
  return 0;
}


SWIGINTERN PyObject *TreeOfDepnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__treeT_freeling__depnode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreePreorderIteratorNode")) SWIG_fail;
  result = (freeling::tree_preorder_iterator< freeling::node > *)new freeling::tree_preorder_iterator< freeling::node >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::node > *)new freeling::tree_preorder_iterator< freeling::node >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::node > *)new freeling::tree_preorder_iterator< freeling::node >((freeling::tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::node > *)new freeling::tree_preorder_iterator< freeling::node >((freeling::tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreePreorderIteratorNode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorNode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorNode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorNode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreePreorderIteratorNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::node >::tree_preorder_iterator()\n"
    "    freeling::tree_preorder_iterator< freeling::node >::tree_preorder_iterator(freeling::tree< freeling::node > *)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::tree_preorder_iterator(freeling::tree_preorder_iterator< freeling::node > const &)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::tree_preorder_iterator(freeling::tree_sibling_iterator< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreePreorderIteratorNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreePreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreePreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode___eq__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->operator ==((freeling::tree_preorder_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode___ne__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->operator !=((freeling::tree_preorder_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode___ref__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *) &((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode___deref__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_info" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_is_defined" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_is_root" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_empty" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_has_ancestor" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->has_ancestor((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_num_children" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (unsigned int)((freeling::tree_preorder_iterator< freeling::node > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_begin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_end" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorNode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_add_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePreorderIteratorNode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_add_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorNode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePreorderIteratorNode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorNode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::node >::add_child(freeling::tree< freeling::node > const &,bool)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::add_child(freeling::tree< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorNode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorNode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorNode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorNode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorNode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorNode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorNode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree< freeling::node > &)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree_preorder_iterator< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree_preorder_iterator< freeling::node > &)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree_sibling_iterator< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_preorder_iterator< freeling::node >::hang_child(freeling::tree_sibling_iterator< freeling::node > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_node_id" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_set_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_set_node_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_set_node_id" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_node_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_label" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_has_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorNode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorNode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorNode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_set_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_set_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_set_label" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_label((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_set_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_set_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_set_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorNode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorNode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (*arg1)->set_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_is_head" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_set_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_set_head",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_set_head" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorNode_set_head" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->set_head(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_is_chunk" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_set_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorNode_set_chunk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_set_chunk" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorNode_set_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->set_chunk(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorNode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = (freeling::tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorNode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorNode_get_chunk_ord" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreePreorderIteratorNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeSiblingIteratorNode")) SWIG_fail;
  result = (freeling::tree_sibling_iterator< freeling::node > *)new freeling::tree_sibling_iterator< freeling::node >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::node > *)new freeling::tree_sibling_iterator< freeling::node >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::node > *)new freeling::tree_sibling_iterator< freeling::node >((freeling::tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::node > *)new freeling::tree_sibling_iterator< freeling::node >((freeling::tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeSiblingIteratorNode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorNode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorNode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorNode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeSiblingIteratorNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::node >::tree_sibling_iterator()\n"
    "    freeling::tree_sibling_iterator< freeling::node >::tree_sibling_iterator(freeling::tree< freeling::node > *)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::tree_sibling_iterator(freeling::tree_sibling_iterator< freeling::node > const &)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::tree_sibling_iterator(freeling::tree_preorder_iterator< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeSiblingIteratorNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode___ref__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *) &((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode___deref__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_info" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode___eq__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode___eq__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->operator ==((freeling::tree_sibling_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode___ne__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode___ne__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->operator !=((freeling::tree_sibling_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_is_defined" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_is_root" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_empty" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_has_ancestor" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->has_ancestor((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_num_children" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (unsigned int)((freeling::tree_sibling_iterator< freeling::node > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_begin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_end" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::node >(static_cast< const freeling::tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::node >(static_cast< const freeling::tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorNode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorNode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeSiblingIteratorNode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorNode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::node >::add_child(freeling::tree< freeling::node > const &,bool)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::add_child(freeling::tree< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::node > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::node >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::node > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::node > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorNode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorNode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree< freeling::node > &)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree_preorder_iterator< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree_preorder_iterator< freeling::node > &)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree_sibling_iterator< freeling::node > &,freeling::tree_sibling_iterator< freeling::node >)\n"
    "    freeling::tree_sibling_iterator< freeling::node >::hang_child(freeling::tree_sibling_iterator< freeling::node > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_node_id" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_set_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_set_node_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_set_node_id" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_node_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_label" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_has_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorNode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorNode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorNode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_set_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_set_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_set_label" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_label((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_set_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_set_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_set_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorNode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorNode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (*arg1)->set_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_is_head" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_set_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_set_head",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_set_head" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorNode_set_head" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->set_head(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_is_chunk" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_set_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorNode_set_chunk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_set_chunk" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorNode_set_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->set_chunk(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorNode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = (freeling::tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorNode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorNode_get_chunk_ord" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeSiblingIteratorNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorDepnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreePreorderIteratorDepnode")) SWIG_fail;
  result = (freeling::tree_preorder_iterator< freeling::depnode > *)new freeling::tree_preorder_iterator< freeling::depnode >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorDepnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::depnode > *)new freeling::tree_preorder_iterator< freeling::depnode >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorDepnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::depnode > *)new freeling::tree_preorder_iterator< freeling::depnode >((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorDepnode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreePreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::tree_preorder_iterator< freeling::depnode > *)new freeling::tree_preorder_iterator< freeling::depnode >((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePreorderIteratorDepnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreePreorderIteratorDepnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorDepnode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorDepnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreePreorderIteratorDepnode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreePreorderIteratorDepnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::tree_preorder_iterator()\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::tree_preorder_iterator(freeling::tree< freeling::depnode > *)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::tree_preorder_iterator(freeling::tree_preorder_iterator< freeling::depnode > const &)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::tree_preorder_iterator(freeling::tree_sibling_iterator< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreePreorderIteratorDepnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreePreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreePreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode___eq__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->operator ==((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode___ne__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->operator !=((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *) &((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_info" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_is_defined" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_is_root" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_has_ancestor" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->has_ancestor((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (unsigned int)((freeling::tree_preorder_iterator< freeling::depnode > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_end" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorDepnode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorDepnode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePreorderIteratorDepnode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorDepnode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &,bool)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePreorderIteratorDepnode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorDepnode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree_preorder_iterator< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree_preorder_iterator< freeling::depnode > &)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree_sibling_iterator< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_preorder_iterator< freeling::depnode >::hang_child(freeling::tree_sibling_iterator< freeling::depnode > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_link(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::parse_tree::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_link",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_link" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'");
    } else {
      freeling::parse_tree::iterator * temp = reinterpret_cast< freeling::parse_tree::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->set_link(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_link__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_link__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_link(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorDepnode_get_link__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorDepnode_get_link__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorDepnode_get_link'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::get_link()\n"
    "    freeling::depnode::get_link() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_node_id" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_node_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_node_id" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_node_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_label" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_has_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePreorderIteratorDepnode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreePreorderIteratorDepnode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_label" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_label((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_word" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePreorderIteratorDepnode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePreorderIteratorDepnode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (*arg1)->set_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_is_head" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_head",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_head" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorDepnode_set_head" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->set_head(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_is_chunk" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_set_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePreorderIteratorDepnode_set_chunk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_set_chunk" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePreorderIteratorDepnode_set_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->set_chunk(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePreorderIteratorDepnode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePreorderIteratorDepnode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePreorderIteratorDepnode_get_chunk_ord" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreePreorderIteratorDepnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorDepnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeSiblingIteratorDepnode")) SWIG_fail;
  result = (freeling::tree_sibling_iterator< freeling::depnode > *)new freeling::tree_sibling_iterator< freeling::depnode >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorDepnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::depnode > *)new freeling::tree_sibling_iterator< freeling::depnode >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorDepnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::depnode > *)new freeling::tree_sibling_iterator< freeling::depnode >((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorDepnode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::tree_sibling_iterator< freeling::depnode > *)new freeling::tree_sibling_iterator< freeling::depnode >((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeSiblingIteratorDepnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeSiblingIteratorDepnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorDepnode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorDepnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeSiblingIteratorDepnode__SWIG_3(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeSiblingIteratorDepnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::tree_sibling_iterator()\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::tree_sibling_iterator(freeling::tree< freeling::depnode > *)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::tree_sibling_iterator(freeling::tree_sibling_iterator< freeling::depnode > const &)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::tree_sibling_iterator(freeling::tree_preorder_iterator< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeSiblingIteratorDepnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *) &((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_info" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode___eq__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->operator ==((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode___ne__" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->operator !=((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_is_defined" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_is_root" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_has_ancestor" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  result = (bool)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->has_ancestor((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (unsigned int)((freeling::tree_sibling_iterator< freeling::depnode > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_end" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_add_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorDepnode_add_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_add_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_add_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_add_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->add_child((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_add_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorDepnode_add_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeSiblingIteratorDepnode_add_child__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorDepnode_add_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &,bool)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::add_child(freeling::tree< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "3"" of type '" "freeling::tree_sibling_iterator< freeling::depnode >""'");
    } else {
      freeling::tree_sibling_iterator< freeling::depnode > * temp = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->hang_child(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_hang_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_hang_child" "', argument " "2"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp2);
  (arg1)->hang_child(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_hang_child(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeSiblingIteratorDepnode_hang_child__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorDepnode_hang_child'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree< freeling::depnode > &)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree_preorder_iterator< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree_preorder_iterator< freeling::depnode > &)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree_sibling_iterator< freeling::depnode > &,freeling::tree_sibling_iterator< freeling::depnode >)\n"
    "    freeling::tree_sibling_iterator< freeling::depnode >::hang_child(freeling::tree_sibling_iterator< freeling::depnode > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_link(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::parse_tree::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_link",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_link" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'");
    } else {
      freeling::parse_tree::iterator * temp = reinterpret_cast< freeling::parse_tree::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (*arg1)->set_link(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_link__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_link__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_link(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_link__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_link__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorDepnode_get_link'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::get_link()\n"
    "    freeling::depnode::get_link() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_node_id" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_node_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_node_id" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_node_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_label" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_has_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeSiblingIteratorDepnode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_label" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->set_label((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_word" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeSiblingIteratorDepnode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeSiblingIteratorDepnode_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (*arg1)->set_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_is_head" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_head",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_head" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorDepnode_set_head" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->set_head(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_is_chunk" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_set_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeSiblingIteratorDepnode_set_chunk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_set_chunk" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeSiblingIteratorDepnode_set_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (*arg1)->set_chunk(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeSiblingIteratorDepnode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeSiblingIteratorDepnode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeSiblingIteratorDepnode_get_chunk_ord" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeSiblingIteratorDepnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeConstPreorderIteratorNode")) SWIG_fail;
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >((freeling::tree< freeling::node > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >((freeling::tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >((freeling::tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >((freeling::const_tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::node > *)new freeling::const_tree_preorder_iterator< freeling::node >((freeling::const_tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeConstPreorderIteratorNode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorNode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorNode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorNode__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorNode__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorNode__SWIG_5(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeConstPreorderIteratorNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator()\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator(freeling::tree< freeling::node > const *)\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator(freeling::tree_preorder_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator(freeling::tree_sibling_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator(freeling::const_tree_preorder_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::node >::const_tree_preorder_iterator(freeling::const_tree_sibling_iterator< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeConstPreorderIteratorNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeConstPreorderIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeConstPreorderIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode___ref__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *) &((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode___deref__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode___eq__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorNode___eq__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorNode___eq__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->operator ==((freeling::const_tree_preorder_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode___ne__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorNode___ne__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorNode___ne__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->operator !=((freeling::const_tree_preorder_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_info" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_is_defined" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_is_root" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_empty" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorNode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_has_ancestor" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->has_ancestor((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_num_children" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (unsigned int)((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstPreorderIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstPreorderIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_begin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_end" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::node > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_node_id" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_label" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_has_word" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_word" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstPreorderIteratorNode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstPreorderIteratorNode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_is_head" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_is_chunk" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorNode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = (freeling::const_tree_preorder_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorNode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorNode_get_chunk_ord" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeConstPreorderIteratorNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeConstSiblingIteratorNode")) SWIG_fail;
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::node > *arg1 = (freeling::tree< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::node > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >((freeling::tree< freeling::node > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >((freeling::tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >((freeling::tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >((freeling::const_tree_sibling_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::node > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::node > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::node > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::node > *)new freeling::const_tree_sibling_iterator< freeling::node >((freeling::const_tree_preorder_iterator< freeling::node > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeConstSiblingIteratorNode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorNode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorNode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorNode__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorNode__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorNode__SWIG_5(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeConstSiblingIteratorNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator()\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator(freeling::tree< freeling::node > const *)\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator(freeling::tree_sibling_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator(freeling::tree_preorder_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator(freeling::const_tree_sibling_iterator< freeling::node > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::node >::const_tree_sibling_iterator(freeling::const_tree_preorder_iterator< freeling::node > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeConstSiblingIteratorNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeConstSiblingIteratorNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeConstSiblingIteratorNode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode___ref__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *) &((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode___deref__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorNode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode___eq__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorNode___eq__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorNode___eq__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->operator ==((freeling::const_tree_sibling_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorNode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode___ne__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorNode___ne__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorNode___ne__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->operator !=((freeling::const_tree_sibling_iterator< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_info" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::node *)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_is_defined" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_is_root" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_empty" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  freeling::tree< freeling::node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorNode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_has_ancestor" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__node_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorNode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::node > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::node > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->has_ancestor((freeling::tree< freeling::node > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_num_children" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (unsigned int)((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_parent" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorNode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_nth_child" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstSiblingIteratorNode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::node > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorNode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_nth_child_ref" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstSiblingIteratorNode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::node > *) &((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__node_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_begin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_end" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::node >(static_cast< const freeling::const_tree_preorder_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_sibling_begin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_sibling_end" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_sibling_rbegin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::node > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_sibling_rend" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::node > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::node >(static_cast< const freeling::const_tree_sibling_iterator< freeling::node >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_node_id" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_label" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_has_word" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_word" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstSiblingIteratorNode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstSiblingIteratorNode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_is_head" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_is_chunk" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorNode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::node > *arg1 = (freeling::const_tree_sibling_iterator< freeling::node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorNode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorNode_get_chunk_ord" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::node > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::node > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeConstSiblingIteratorNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeConstPreorderIteratorDepnode")) SWIG_fail;
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >((freeling::tree< freeling::depnode > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >((freeling::const_tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_preorder_iterator< freeling::depnode > *)new freeling::const_tree_preorder_iterator< freeling::depnode >((freeling::const_tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstPreorderIteratorDepnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstPreorderIteratorDepnode__SWIG_5(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeConstPreorderIteratorDepnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator()\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator(freeling::tree< freeling::depnode > const *)\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator(freeling::tree_preorder_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator(freeling::tree_sibling_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator(freeling::const_tree_preorder_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_preorder_iterator< freeling::depnode >::const_tree_preorder_iterator(freeling::const_tree_sibling_iterator< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeConstPreorderIteratorDepnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeConstPreorderIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeConstPreorderIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *) &((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorDepnode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode___eq__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->operator ==((freeling::const_tree_preorder_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorDepnode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode___ne__" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->operator !=((freeling::const_tree_preorder_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_info" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_is_defined" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_is_root" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorDepnode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_has_ancestor" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstPreorderIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstPreorderIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->has_ancestor((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (unsigned int)((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstPreorderIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstPreorderIteratorDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstPreorderIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_end" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_preorder_iterator< freeling::depnode > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_link__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_link(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_link__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstPreorderIteratorDepnode_get_link__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstPreorderIteratorDepnode_get_link'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::get_link()\n"
    "    freeling::depnode::get_link() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_node_id" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_label" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_has_word" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstPreorderIteratorDepnode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstPreorderIteratorDepnode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_is_head" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_is_chunk" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstPreorderIteratorDepnode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = (freeling::const_tree_preorder_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstPreorderIteratorDepnode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstPreorderIteratorDepnode_get_chunk_ord" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeConstPreorderIteratorDepnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeConstSiblingIteratorDepnode")) SWIG_fail;
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree< freeling::depnode > *arg1 = (freeling::tree< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >((freeling::tree< freeling::depnode > const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >((freeling::tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >((freeling::tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >((freeling::const_tree_sibling_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_preorder_iterator< freeling::depnode > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_preorder_iterator< freeling::depnode > const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_preorder_iterator< freeling::depnode > * >(argp1);
  result = (freeling::const_tree_sibling_iterator< freeling::depnode > *)new freeling::const_tree_sibling_iterator< freeling::depnode >((freeling::const_tree_preorder_iterator< freeling::depnode > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeConstSiblingIteratorDepnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeConstSiblingIteratorDepnode__SWIG_5(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TreeConstSiblingIteratorDepnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator()\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator(freeling::tree< freeling::depnode > const *)\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator(freeling::tree_sibling_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator(freeling::tree_preorder_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator(freeling::const_tree_sibling_iterator< freeling::depnode > const &)\n"
    "    freeling::const_tree_sibling_iterator< freeling::depnode >::const_tree_sibling_iterator(freeling::const_tree_preorder_iterator< freeling::depnode > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TreeConstSiblingIteratorDepnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeConstSiblingIteratorDepnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeConstSiblingIteratorDepnode" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode___ref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode___ref__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *) &((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode___deref__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode___deref__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorDepnode___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode___eq__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorDepnode___eq__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->operator ==((freeling::const_tree_sibling_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorDepnode___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode___ne__" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorDepnode___ne__" "', argument " "2"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->operator !=((freeling::const_tree_sibling_iterator< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_info" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::depnode *)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->get_info();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_is_defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_is_defined",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_is_defined" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->is_defined();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_is_root(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_is_root",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_is_root" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->is_root();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_empty" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_has_ancestor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  freeling::tree< freeling::depnode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorDepnode_has_ancestor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_has_ancestor" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__treeT_freeling__depnode_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeConstSiblingIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeConstSiblingIteratorDepnode_has_ancestor" "', argument " "2"" of type '" "freeling::tree< freeling::depnode > const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::tree< freeling::depnode > * >(argp2);
  result = (bool)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->has_ancestor((freeling::tree< freeling::depnode > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_num_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_num_children",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_num_children" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (unsigned int)((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->num_children();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_parent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_parent" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->get_parent();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_nth_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorDepnode_nth_child",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_nth_child" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstSiblingIteratorDepnode_nth_child" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->nth_child(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::tree< freeling::depnode > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeConstSiblingIteratorDepnode_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_nth_child_ref" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeConstSiblingIteratorDepnode_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::tree< freeling::depnode > *) &((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__treeT_freeling__depnode_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_begin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_preorder_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_end" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_preorder_iterator< freeling::depnode >(static_cast< const freeling::const_tree_preorder_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_sibling_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_sibling_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_sibling_begin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->sibling_begin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_sibling_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_sibling_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_sibling_end" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->sibling_end();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_sibling_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_sibling_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_sibling_rbegin" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->sibling_rbegin();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_sibling_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::const_tree_sibling_iterator< freeling::depnode > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_sibling_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_sibling_rend" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = ((freeling::const_tree_sibling_iterator< freeling::depnode > const *)arg1)->sibling_rend();
  resultobj = SWIG_NewPointerObj((new freeling::const_tree_sibling_iterator< freeling::depnode >(static_cast< const freeling::const_tree_sibling_iterator< freeling::depnode >& >(result))), SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_link__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_link" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_link(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_link__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstSiblingIteratorDepnode_get_link__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstSiblingIteratorDepnode_get_link'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::get_link()\n"
    "    freeling::depnode::get_link() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_node_id" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_label" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (*arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_has_word" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_word" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (freeling::word *) &(*arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeSiblingIteratorDepnode_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeConstSiblingIteratorDepnode_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TreeConstSiblingIteratorDepnode_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_is_head" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_is_chunk" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (bool)(*arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeConstSiblingIteratorDepnode_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::const_tree_sibling_iterator< freeling::depnode > *arg1 = (freeling::const_tree_sibling_iterator< freeling::depnode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeConstSiblingIteratorDepnode_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeConstSiblingIteratorDepnode_get_chunk_ord" "', argument " "1"" of type '" "freeling::const_tree_sibling_iterator< freeling::depnode > const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::const_tree_sibling_iterator< freeling::depnode > * >(argp1);
  result = (int)(*arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeConstSiblingIteratorDepnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_analysis_user_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *arg2 = (std::vector< std::wstring,std::allocator< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_user_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_user_set" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_user_set" "', argument " "2"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::wstring,std::allocator< std::wstring > > * >(argp2);
  if (arg1) (arg1)->user = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_user_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_user_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_user_get" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (std::vector< std::wstring,std::allocator< std::wstring > > *)& ((arg1)->user);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_analysis")) SWIG_fail;
  result = (freeling::analysis *)new freeling::analysis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::analysis *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_analysis",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_analysis" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_analysis" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_analysis" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_analysis" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::analysis *)new freeling::analysis((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__analysis, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_analysis__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_analysis__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::analysis::analysis()\n"
    "    freeling::analysis::analysis(std::wstring const &,std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_analysis" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:analysis_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_init" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_init" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_init" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "analysis_init" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_init" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->init((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_lemma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_lemma" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_set_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_set_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_lemma((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_tag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_tag" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_set_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_set_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_tag((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_prob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_prob",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_prob" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_set_prob" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_prob(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_distance" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_set_distance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_distance(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_retokenizable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_retokenizable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_retokenizable" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_set_retokenizable" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_set_retokenizable" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_retokenizable((std::list< freeling::word,std::allocator< freeling::word > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_has_prob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_has_prob",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_has_prob" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (bool)((freeling::analysis const *)arg1)->has_prob();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_has_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_has_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_has_distance" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (bool)((freeling::analysis const *)arg1)->has_distance();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_lemma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_lemma" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = ((freeling::analysis const *)arg1)->get_lemma();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_tag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_tag" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = ((freeling::analysis const *)arg1)->get_tag();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_prob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_prob",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_prob" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (double)((freeling::analysis const *)arg1)->get_prob();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_distance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_distance" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (double)((freeling::analysis const *)arg1)->get_distance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_is_retokenizable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_is_retokenizable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_retokenizable" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (bool)((freeling::analysis const *)arg1)->is_retokenizable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_retokenizable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_retokenizable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_retokenizable" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = ((freeling::analysis const *)arg1)->get_retokenizable();
  resultobj = swig::from(static_cast< std::list< freeling::word,std::allocator< freeling::word > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_senses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_senses" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = ((freeling::analysis const *)arg1)->get_senses();
  resultobj = swig::from(static_cast< std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_set_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_set_senses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_set_senses" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_senses((std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_get_senses_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_get_senses_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_get_senses_string" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = ((freeling::analysis const *)arg1)->get_senses_string();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis___gt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis___gt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis___gt__" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis___gt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis___gt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::analysis * >(argp2);
  result = (bool)((freeling::analysis const *)arg1)->operator >((freeling::analysis const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis___lt__" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis___lt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis___lt__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::analysis * >(argp2);
  result = (bool)((freeling::analysis const *)arg1)->operator <((freeling::analysis const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  freeling::analysis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis___eq__" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "analysis___eq__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "analysis___eq__" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::analysis * >(argp2);
  result = (bool)((freeling::analysis const *)arg1)->operator ==((freeling::analysis const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_is_selected__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_is_selected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_selected" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_is_selected" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((freeling::analysis const *)arg1)->is_selected(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_is_selected__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_is_selected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_is_selected" "', argument " "1"" of type '" "freeling::analysis const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  result = (bool)((freeling::analysis const *)arg1)->is_selected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_is_selected(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_analysis_is_selected__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_analysis_is_selected__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'analysis_is_selected'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::analysis::is_selected(int) const\n"
    "    freeling::analysis::is_selected() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_analysis_mark_selected__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_mark_selected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_mark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_mark_selected" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->mark_selected(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_mark_selected__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_mark_selected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_mark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  (arg1)->mark_selected();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_mark_selected(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_analysis_mark_selected__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_analysis_mark_selected__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'analysis_mark_selected'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::analysis::mark_selected(int)\n"
    "    freeling::analysis::mark_selected()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_analysis_unmark_selected__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:analysis_unmark_selected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_unmark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "analysis_unmark_selected" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->unmark_selected(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_unmark_selected__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::analysis *arg1 = (freeling::analysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:analysis_unmark_selected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__analysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "analysis_unmark_selected" "', argument " "1"" of type '" "freeling::analysis *""'"); 
  }
  arg1 = reinterpret_cast< freeling::analysis * >(argp1);
  (arg1)->unmark_selected();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_analysis_unmark_selected(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_analysis_unmark_selected__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__analysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_analysis_unmark_selected__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'analysis_unmark_selected'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::analysis::unmark_selected(int)\n"
    "    freeling::analysis::unmark_selected()\n");
  return 0;
}


SWIGINTERN PyObject *analysis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__analysis, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_word_user_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *arg2 = (std::vector< std::wstring,std::allocator< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_user_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_user_set" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_user_set" "', argument " "2"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::wstring,std::allocator< std::wstring > > * >(argp2);
  if (arg1) (arg1)->user = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_user_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_user_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_user_get" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (std::vector< std::wstring,std::allocator< std::wstring > > *)& ((arg1)->user);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_word")) SWIG_fail;
  result = (freeling::word *)new freeling::word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_word",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_word",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_word" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *arg2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_word",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::list< freeling::analysis,std::allocator< freeling::analysis > > *ptr = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_word" "', argument " "2"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "2"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (freeling::word *)new freeling::word((std::wstring const &)*arg1,(std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)*arg2,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_word" "', argument " "1"" of type '" "freeling::word const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_word" "', argument " "1"" of type '" "freeling::word const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (freeling::word *)new freeling::word((freeling::word const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_word__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_word__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_word__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_word__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_word__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::word()\n"
    "    freeling::word::word(std::wstring const &)\n"
    "    freeling::word::word(std::wstring const &,std::list< freeling::word,std::allocator< freeling::word > > const &)\n"
    "    freeling::word::word(std::wstring const &,std::list< freeling::analysis,std::allocator< freeling::analysis > > const &,std::list< freeling::word,std::allocator< freeling::word > > const &)\n"
    "    freeling::word::word(freeling::word const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_word" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_copy_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_copy_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_copy_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_copy_analysis" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_copy_analysis" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (arg1)->copy_analysis((freeling::word const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_n_selected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_n_selected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_selected" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (int)((freeling::word const *)arg1)->get_n_selected();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_n_unselected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_n_unselected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_unselected" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (int)((freeling::word const *)arg1)->get_n_unselected();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_is_multiword(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_is_multiword",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_is_multiword" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->is_multiword();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_is_ambiguous_mw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_is_ambiguous_mw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_is_ambiguous_mw" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->is_ambiguous_mw();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_ambiguous_mw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_ambiguous_mw",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_ambiguous_mw" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_ambiguous_mw" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_ambiguous_mw(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_n_words_mw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_n_words_mw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_words_mw" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (int)((freeling::word const *)arg1)->get_n_words_mw();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_words_mw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_words_mw",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_words_mw" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (std::list< freeling::word,std::allocator< freeling::word > > *) &((freeling::word const *)arg1)->get_words_mw();
  resultobj = swig::from(static_cast< std::list< freeling::word,std::allocator< freeling::word > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_form",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_form" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_form();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_lc_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_lc_form",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lc_form" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_lc_form();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_ph_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_ph_form",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_ph_form" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_ph_form();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_selected_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_begin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->selected_begin(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_selected_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->selected_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_selected_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_end" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->selected_end(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_selected_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->selected_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselected_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_begin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->unselected_begin(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_unselected_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->unselected_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselected_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_end" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (arg1)->unselected_end(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_unselected_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->unselected_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_begin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_selected_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_begin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->selected_begin(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_begin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_selected_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->selected_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_selected_begin__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_selected_begin__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_selected_begin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_selected_begin__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_selected_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::selected_begin(int)\n"
    "    freeling::word::selected_begin()\n"
    "    freeling::word::selected_begin(int) const\n"
    "    freeling::word::selected_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_selected_end__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_selected_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_selected_end" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->selected_end(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_end__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_selected_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_selected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->selected_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_selected_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_selected_end__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_selected_end__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_selected_end__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_selected_end__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_selected_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::selected_end(int)\n"
    "    freeling::word::selected_end()\n"
    "    freeling::word::selected_end(int) const\n"
    "    freeling::word::selected_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_unselected_begin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselected_begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_begin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->unselected_begin(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_begin__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_unselected_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->unselected_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_unselected_begin__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_unselected_begin__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_unselected_begin__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_unselected_begin__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_unselected_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::unselected_begin(int)\n"
    "    freeling::word::unselected_begin()\n"
    "    freeling::word::unselected_begin(int) const\n"
    "    freeling::word::unselected_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_unselected_end__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselected_end",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselected_end" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->unselected_end(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_end__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_unselected_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselected_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->unselected_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselected_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_unselected_end__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_unselected_end__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_unselected_end__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_unselected_end__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_unselected_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::unselected_end(int)\n"
    "    freeling::word::unselected_end()\n"
    "    freeling::word::unselected_end(int) const\n"
    "    freeling::word::unselected_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_num_kbest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_num_kbest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_num_kbest" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (unsigned int)((freeling::word const *)arg1)->num_kbest();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_lemma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_get_lemma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lemma" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_lemma" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->get_lemma(arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_lemma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_lemma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_lemma" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_lemma();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_lemma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_lemma__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_get_lemma__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_get_lemma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::get_lemma(int) const\n"
    "    freeling::word::get_lemma() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_get_tag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_get_tag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_tag" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_tag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->get_tag(arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_tag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_tag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_tag" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_tag();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_tag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_tag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_get_tag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_get_tag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::get_tag(int) const\n"
    "    freeling::word::get_tag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_get_senses__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_get_senses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_senses" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->get_senses(arg2);
  resultobj = swig::from(static_cast< std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_senses__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_senses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_senses();
  resultobj = swig::from(static_cast< std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_senses(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_senses__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_get_senses__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_get_senses'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::get_senses(int) const\n"
    "    freeling::word::get_senses() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_get_senses_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_get_senses_string",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses_string" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_get_senses_string" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::word const *)arg1)->get_senses_string(arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_senses_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_senses_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_senses_string" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_senses_string();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_senses_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_senses_string__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_get_senses_string__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_get_senses_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::get_senses_string(int) const\n"
    "    freeling::word::get_senses_string() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_set_senses__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:word_set_senses",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_senses" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_set_senses" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_senses((std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_senses__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_senses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_senses" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_senses" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_senses((std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_senses(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_word_set_senses__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_word_set_senses__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_set_senses'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::set_senses(std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &,int)\n"
    "    freeling::word::set_senses(std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_get_span_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_span_start",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_span_start" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (unsigned long)((freeling::word const *)arg1)->get_span_start();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_span_finish(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_span_finish",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_span_finish" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (unsigned long)((freeling::word const *)arg1)->get_span_finish();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_found_in_dict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_found_in_dict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_found_in_dict" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->found_in_dict();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_found_in_dict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_found_in_dict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_found_in_dict" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_found_in_dict" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_found_in_dict(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_has_retokenizable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_has_retokenizable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_has_retokenizable" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->has_retokenizable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_lock_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_lock_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_lock_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  (arg1)->lock_analysis();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_is_locked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_is_locked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_is_locked" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->is_locked();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_add_alternative(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:word_add_alternative",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_add_alternative" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_add_alternative" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_add_alternative" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_add_alternative" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->add_alternative((std::wstring const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_alternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_alternatives",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_alternatives" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_alternatives" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_alternatives" "', argument " "2"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > * >(argp2);
  (arg1)->set_alternatives((std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_clear_alternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_clear_alternatives",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_clear_alternatives" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  (arg1)->clear_alternatives();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_has_alternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_has_alternatives",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_has_alternatives" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (bool)((freeling::word const *)arg1)->has_alternatives();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_alternatives__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_alternatives",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_alternatives" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *) &(arg1)->get_alternatives();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_alternatives_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_alternatives_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->alternatives_begin();
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator(static_cast< const std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_alternatives_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_alternatives_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->alternatives_end();
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator(static_cast< const std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_alternatives__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_alternatives",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_alternatives" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *) &((freeling::word const *)arg1)->get_alternatives();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_alternatives(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_alternatives__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_get_alternatives__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_get_alternatives'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::get_alternatives()\n"
    "    freeling::word::get_alternatives() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_alternatives_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_alternatives_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->alternatives_begin();
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator(static_cast< const std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_alternatives_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_alternatives_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_alternatives_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_alternatives_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::alternatives_begin()\n"
    "    freeling::word::alternatives_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_alternatives_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_alternatives_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_alternatives_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->alternatives_end();
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator(static_cast< const std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_alternatives_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_alternatives_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_alternatives_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_alternatives_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::alternatives_end()\n"
    "    freeling::word::alternatives_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_add_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::analysis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_add_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_add_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_add_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_add_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::analysis * >(argp2);
  (arg1)->add_analysis((freeling::analysis const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::analysis *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_analysis" "', argument " "2"" of type '" "freeling::analysis const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::analysis * >(argp2);
  (arg1)->set_analysis((freeling::analysis const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::list< freeling::analysis,std::allocator< freeling::analysis > > *ptr = (std::list< freeling::analysis,std::allocator< freeling::analysis > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_analysis" "', argument " "2"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_analysis" "', argument " "2"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_analysis((std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__analysis, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_word_set_analysis__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::analysis,std::allocator< freeling::analysis > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_word_set_analysis__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_set_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::set_analysis(freeling::analysis const &)\n"
    "    freeling::word::set_analysis(std::list< freeling::analysis,std::allocator< freeling::analysis > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_set_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_form",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_form" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_form((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_ph_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_ph_form",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_ph_form" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_set_ph_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_set_ph_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_ph_form((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_span(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:word_set_span",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_span" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_span" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_set_span" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  (arg1)->set_span(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_set_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_set_position",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_set_position" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_set_position" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  (arg1)->set_position(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_position" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_position();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_find_tag_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::regexp *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_find_tag_match",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_find_tag_match" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__regexp,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "word_find_tag_match" "', argument " "2"" of type '" "freeling::regexp &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "word_find_tag_match" "', argument " "2"" of type '" "freeling::regexp &""'"); 
  }
  arg2 = reinterpret_cast< freeling::regexp * >(argp2);
  result = (bool)(arg1)->find_tag_match(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_get_n_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_n_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_n_analysis" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (int)((freeling::word const *)arg1)->get_n_analysis();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselect_all_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselect_all_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_unselect_all_analysis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->unselect_all_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselect_all_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_unselect_all_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  (arg1)->unselect_all_analysis();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselect_all_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_unselect_all_analysis__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_unselect_all_analysis__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_unselect_all_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::unselect_all_analysis(int)\n"
    "    freeling::word::unselect_all_analysis()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_select_all_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_select_all_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "word_select_all_analysis" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->select_all_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_select_all_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_select_all_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_all_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  (arg1)->select_all_analysis();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_select_all_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_select_all_analysis__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_word_select_all_analysis__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_select_all_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::select_all_analysis(int)\n"
    "    freeling::word::select_all_analysis()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_select_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:word_select_analysis",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::word::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_select_analysis" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->select_analysis(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_select_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_select_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_select_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::word::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_select_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
    }
  }
  (arg1)->select_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_select_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_word_select_analysis__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_word_select_analysis__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_select_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::select_analysis(freeling::word::iterator,int)\n"
    "    freeling::word::select_analysis(freeling::word::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_unselect_analysis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:word_unselect_analysis",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::word::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "word_unselect_analysis" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->unselect_analysis(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselect_analysis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  freeling::word::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:word_unselect_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_unselect_analysis" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::word::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "word_unselect_analysis" "', argument " "2"" of type '" "freeling::word::iterator""'");
    }
  }
  (arg1)->unselect_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_unselect_analysis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_word_unselect_analysis__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::word::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_word_unselect_analysis__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_unselect_analysis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::unselect_analysis(freeling::word::iterator,int)\n"
    "    freeling::word::unselect_analysis(freeling::word::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_get_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_get_analysis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_get_analysis" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->get_analysis();
  resultobj = swig::from(static_cast< std::list< freeling::analysis,std::allocator< freeling::analysis > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_analysis_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_analysis_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_begin" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->analysis_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_analysis_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_analysis_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_end" "', argument " "1"" of type '" "freeling::word *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = (arg1)->analysis_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_analysis_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_analysis_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_begin" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->analysis_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_analysis_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_analysis_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_analysis_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_analysis_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::analysis_begin()\n"
    "    freeling::word::analysis_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_word_analysis_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::word *arg1 = (freeling::word *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:word_analysis_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__word, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "word_analysis_end" "', argument " "1"" of type '" "freeling::word const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::word * >(argp1);
  result = ((freeling::word const *)arg1)->analysis_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::word::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_word_analysis_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_analysis_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__word, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_word_analysis_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'word_analysis_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::word::analysis_end()\n"
    "    freeling::word::analysis_end() const\n");
  return 0;
}


SWIGINTERN PyObject *word_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__word, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_node__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_node")) SWIG_fail;
  result = (freeling::node *)new freeling::node();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_node__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_node",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_node" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_node" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::node *)new freeling::node((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__node, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_node(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_node__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_node__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_node'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::node()\n"
    "    freeling::node::node(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_node",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_node" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_get_node_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_node_id" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = ((freeling::node const *)arg1)->get_node_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_set_node_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:node_set_node_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_node_id" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_set_node_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_node_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_get_label",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_label" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = ((freeling::node const *)arg1)->get_label();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_has_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_has_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_has_word" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (bool)((freeling::node const *)arg1)->has_word();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_word" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (freeling::word *) &(arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_get_word",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_word" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (freeling::word *) &((freeling::node const *)arg1)->get_word();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_node_get_word__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_node_get_word__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'node_get_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::node::get_word()\n"
    "    freeling::node::get_word() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_node_set_label(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:node_set_label",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_label" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_set_label" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_label((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_set_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:node_set_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_word" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "node_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "node_set_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (arg1)->set_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_is_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_is_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_is_head" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (bool)((freeling::node const *)arg1)->is_head();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_set_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:node_set_head",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_head" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_set_head" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_head(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_is_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_is_chunk",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_is_chunk" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (bool)((freeling::node const *)arg1)->is_chunk();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_set_chunk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:node_set_chunk",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_set_chunk" "', argument " "1"" of type '" "freeling::node *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "node_set_chunk" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_chunk(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_node_get_chunk_ord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = (freeling::node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:node_get_chunk_ord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "node_get_chunk_ord" "', argument " "1"" of type '" "freeling::node const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (int)((freeling::node const *)arg1)->get_chunk_ord();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__node, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_parse_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_parse_tree")) SWIG_fail;
  result = (freeling::parse_tree *)new freeling::parse_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_parse_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree::iterator arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_parse_tree",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::parse_tree::iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::parse_tree::iterator""'");
    } else {
      freeling::parse_tree::iterator * temp = reinterpret_cast< freeling::parse_tree::iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (freeling::parse_tree *)new freeling::parse_tree(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_parse_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_parse_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__node,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_parse_tree" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (freeling::parse_tree *)new freeling::parse_tree((freeling::node const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_parse_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_parse_tree__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_parse_tree__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_parse_tree__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_parse_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::parse_tree::parse_tree()\n"
    "    freeling::parse_tree::parse_tree(freeling::parse_tree::iterator)\n"
    "    freeling::parse_tree::parse_tree(freeling::node const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parse_tree_build_node_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_build_node_index",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_build_node_index" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_tree_build_node_index" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_build_node_index" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->build_node_index((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_rebuild_node_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parse_tree_rebuild_node_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_rebuild_node_index" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  (arg1)->rebuild_node_index();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_id__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_get_node_by_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_node_by_id" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_tree_get_node_by_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_get_node_by_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->get_node_by_id((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_pos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_get_node_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_node_by_pos" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "parse_tree_get_node_by_pos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_node_by_pos(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_id__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_get_node_by_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_node_by_id" "', argument " "1"" of type '" "freeling::parse_tree const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_tree_get_node_by_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_get_node_by_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::parse_tree const *)arg1)->get_node_by_id((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_id(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__parse_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse_tree_get_node_by_id__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__parse_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parse_tree_get_node_by_id__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parse_tree_get_node_by_id'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::parse_tree::get_node_by_id(std::wstring const &)\n"
    "    freeling::parse_tree::get_node_by_id(std::wstring const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_pos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_get_node_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_node_by_pos" "', argument " "1"" of type '" "freeling::parse_tree const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "parse_tree_get_node_by_pos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((freeling::parse_tree const *)arg1)->get_node_by_pos(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_node_by_pos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__parse_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_parse_tree_get_node_by_pos__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__parse_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_parse_tree_get_node_by_pos__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'parse_tree_get_node_by_pos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::parse_tree::get_node_by_pos(size_t)\n"
    "    freeling::parse_tree::get_node_by_pos(size_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_head_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree::const_iterator arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parse_tree_get_head_word",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_head_word" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_get_head_word" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (freeling::word *) &freeling::parse_tree::get_head_word(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_get_head_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree::const_iterator arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parse_tree_get_head_position",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_get_head_position" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_get_head_position" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (int)freeling::parse_tree::get_head_position(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_C_commands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree::const_iterator arg1 ;
  freeling::parse_tree::const_iterator arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_C_commands",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_C_commands" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_C_commands" "', argument " "1"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_tree_C_commands" "', argument " "2"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_tree_C_commands" "', argument " "2"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)freeling::parse_tree::C_commands(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_tree_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:parse_tree_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_tree_nth_child_ref" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "parse_tree_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::parse_tree *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_parse_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::parse_tree *arg1 = (freeling::parse_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_parse_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__parse_tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_parse_tree" "', argument " "1"" of type '" "freeling::parse_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::parse_tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *parse_tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__parse_tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_depnode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_depnode")) SWIG_fail;
  result = (freeling::depnode *)new freeling::depnode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_depnode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_depnode",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_depnode" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_depnode" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::depnode *)new freeling::depnode((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_depnode__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::node *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::depnode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_depnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__node,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_depnode" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_depnode" "', argument " "1"" of type '" "freeling::node const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::node * >(argp1);
  result = (freeling::depnode *)new freeling::depnode((freeling::node const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__depnode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_depnode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_depnode__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_depnode__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_depnode__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_depnode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::depnode()\n"
    "    freeling::depnode::depnode(std::wstring const &)\n"
    "    freeling::depnode::depnode(freeling::node const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_depnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_depnode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__depnode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_depnode" "', argument " "1"" of type '" "freeling::depnode *""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depnode_set_link(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  freeling::parse_tree::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:depnode_set_link",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_set_link" "', argument " "1"" of type '" "freeling::depnode *""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "depnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "depnode_set_link" "', argument " "2"" of type '" "freeling::parse_tree::iterator const""'");
    } else {
      freeling::parse_tree::iterator * temp = reinterpret_cast< freeling::parse_tree::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->set_link(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depnode_get_link__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:depnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_get_link" "', argument " "1"" of type '" "freeling::depnode *""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  result = (arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::iterator(static_cast< const freeling::parse_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depnode_get_link__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = (freeling::depnode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:depnode_get_link",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__depnode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "depnode_get_link" "', argument " "1"" of type '" "freeling::depnode const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  result = ((freeling::depnode const *)arg1)->get_link();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_depnode_get_link(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__depnode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depnode_get_link__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__depnode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_depnode_get_link__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'depnode_get_link'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::depnode::get_link()\n"
    "    freeling::depnode::get_link() const\n");
  return 0;
}


SWIGINTERN PyObject *depnode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__depnode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dep_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_dep_tree")) SWIG_fail;
  result = (freeling::dep_tree *)new freeling::dep_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dep_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::depnode *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dep_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__depnode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dep_tree" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dep_tree" "', argument " "1"" of type '" "freeling::depnode const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::depnode * >(argp1);
  result = (freeling::dep_tree *)new freeling::dep_tree((freeling::depnode const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dep_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_dep_tree__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__depnode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_dep_tree__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dep_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dep_tree::dep_tree()\n"
    "    freeling::dep_tree::dep_tree(freeling::depnode const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dep_tree_get_node_by_pos__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_tree::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_tree_get_node_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_get_node_by_pos" "', argument " "1"" of type '" "freeling::dep_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dep_tree_get_node_by_pos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (arg1)->get_node_by_pos(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::dep_tree::iterator(static_cast< const freeling::dep_tree::iterator& >(result))), SWIGTYPE_p_freeling__tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_tree_get_node_by_pos__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_tree_get_node_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_get_node_by_pos" "', argument " "1"" of type '" "freeling::dep_tree const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dep_tree_get_node_by_pos" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = ((freeling::dep_tree const *)arg1)->get_node_by_pos(arg2);
  resultobj = SWIG_NewPointerObj((new freeling::dep_tree::const_iterator(static_cast< const freeling::dep_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_tree_get_node_by_pos(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_dep_tree_get_node_by_pos__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_tree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_dep_tree_get_node_by_pos__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dep_tree_get_node_by_pos'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dep_tree::get_node_by_pos(size_t)\n"
    "    freeling::dep_tree::get_node_by_pos(size_t) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dep_tree_rebuild_node_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dep_tree_rebuild_node_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_rebuild_node_index" "', argument " "1"" of type '" "freeling::dep_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
  (arg1)->rebuild_node_index();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_tree_get_first_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree::const_iterator arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dep_tree_get_first_word",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_get_first_word" "', argument " "1"" of type '" "freeling::dep_tree::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_tree_get_first_word" "', argument " "1"" of type '" "freeling::dep_tree::const_iterator""'");
    } else {
      freeling::dep_tree::const_iterator * temp = reinterpret_cast< freeling::dep_tree::const_iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = freeling::dep_tree::get_first_word(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_tree_get_last_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree::const_iterator arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dep_tree_get_last_word",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_get_last_word" "', argument " "1"" of type '" "freeling::dep_tree::const_iterator""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_tree_get_last_word" "', argument " "1"" of type '" "freeling::dep_tree::const_iterator""'");
    } else {
      freeling::dep_tree::const_iterator * temp = reinterpret_cast< freeling::dep_tree::const_iterator * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = freeling::dep_tree::get_last_word(arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_tree_nth_child_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_tree_nth_child_ref",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_tree_nth_child_ref" "', argument " "1"" of type '" "freeling::dep_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dep_tree_nth_child_ref" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (freeling::dep_tree *) &(arg1)->nth_child_ref(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dep_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_tree *arg1 = (freeling::dep_tree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dep_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_tree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dep_tree" "', argument " "1"" of type '" "freeling::dep_tree *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_tree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dep_tree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__dep_tree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_argument_EMPTY_ROLE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable argument_EMPTY_ROLE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_argument_EMPTY_ROLE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_wstring(static_cast< std::wstring >(freeling::argument::EMPTY_ROLE));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_argument__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::argument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_argument")) SWIG_fail;
  result = (freeling::argument *)new freeling::argument();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::argument *arg1 = (freeling::argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_argument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__argument, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_argument" "', argument " "1"" of type '" "freeling::argument *""'"); 
  }
  arg1 = reinterpret_cast< freeling::argument * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_argument__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::wstring *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::argument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_argument",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_argument" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::argument *)new freeling::argument(arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_argument(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_argument__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_argument__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_argument'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::argument::argument()\n"
    "    freeling::argument::argument(int,std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_argument_get_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::argument *arg1 = (freeling::argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:argument_get_position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "argument_get_position" "', argument " "1"" of type '" "freeling::argument const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::argument * >(argp1);
  result = (int)((freeling::argument const *)arg1)->get_position();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_argument_get_role(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::argument *arg1 = (freeling::argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:argument_get_role",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "argument_get_role" "', argument " "1"" of type '" "freeling::argument const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::argument * >(argp1);
  result = ((freeling::argument const *)arg1)->get_role();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *argument_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__argument, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_predicate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_predicate")) SWIG_fail;
  result = (freeling::predicate *)new freeling::predicate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_predicate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_predicate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_predicate" "', argument " "1"" of type '" "freeling::predicate *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_predicate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::wstring *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::predicate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_predicate",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_predicate" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_predicate" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_predicate" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::predicate *)new freeling::predicate(arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_predicate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::predicate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_predicate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_predicate" "', argument " "1"" of type '" "freeling::predicate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_predicate" "', argument " "1"" of type '" "freeling::predicate const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  result = (freeling::predicate *)new freeling::predicate((freeling::predicate const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_predicate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_predicate__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__predicate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_predicate__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_predicate__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_predicate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::predicate::predicate()\n"
    "    freeling::predicate::predicate(int,std::wstring const &)\n"
    "    freeling::predicate::predicate(freeling::predicate const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_predicate_get_sense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:predicate_get_sense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predicate_get_sense" "', argument " "1"" of type '" "freeling::predicate const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  result = ((freeling::predicate const *)arg1)->get_sense();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_predicate_get_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:predicate_get_position",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predicate_get_position" "', argument " "1"" of type '" "freeling::predicate const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  result = (int)((freeling::predicate const *)arg1)->get_position();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_predicate_has_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:predicate_has_argument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predicate_has_argument" "', argument " "1"" of type '" "freeling::predicate const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "predicate_has_argument" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((freeling::predicate const *)arg1)->has_argument(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_predicate_add_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:predicate_add_argument",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predicate_add_argument" "', argument " "1"" of type '" "freeling::predicate *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "predicate_add_argument" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "predicate_add_argument" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "predicate_add_argument" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->add_argument(arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_predicate_get_argument_by_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::predicate *arg1 = (freeling::predicate *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::argument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:predicate_get_argument_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__predicate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "predicate_get_argument_by_pos" "', argument " "1"" of type '" "freeling::predicate const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::predicate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "predicate_get_argument_by_pos" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::argument *) &((freeling::predicate const *)arg1)->get_argument_by_pos(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__argument, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *predicate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__predicate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sentence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_sentence")) SWIG_fail;
  result = (freeling::sentence *)new freeling::sentence();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sentence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::word,std::allocator< freeling::word > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::sentence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_sentence",&obj0)) SWIG_fail;
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sentence" "', argument " "1"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sentence" "', argument " "1"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::sentence *)new freeling::sentence((std::list< freeling::word,std::allocator< freeling::word > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sentence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_sentence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sentence" "', argument " "1"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sentence" "', argument " "1"" of type '" "freeling::sentence const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::sentence *)new freeling::sentence((freeling::sentence const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sentence(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_sentence__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sentence__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sentence__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_sentence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::sentence()\n"
    "    freeling::sentence::sentence(std::list< freeling::word,std::allocator< freeling::word > > const &)\n"
    "    freeling::sentence::sentence(freeling::sentence const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_sentence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_sentence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sentence" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_num_kbest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_num_kbest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_num_kbest" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (unsigned int)((freeling::sentence const *)arg1)->num_kbest();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_push_back" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_push_back" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_push_back" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  (arg1)->push_back((freeling::word const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_rebuild_word_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_rebuild_word_index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_rebuild_word_index" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  (arg1)->rebuild_word_index();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_clear" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_sentence_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_set_sentence_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_sentence_id" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_sentence_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_sentence_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_sentence_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_sentence_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_sentence_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_sentence_id" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (arg1)->get_sentence_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_is_tagged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_set_is_tagged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_is_tagged" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_set_is_tagged" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_is_tagged(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_is_tagged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_is_tagged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_tagged" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (bool)((freeling::sentence const *)arg1)->is_tagged();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_parse_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::parse_tree *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sentence_set_parse_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__parse_tree,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::parse_tree * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sentence_set_parse_tree" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_parse_tree((freeling::parse_tree const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_parse_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::parse_tree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_set_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__parse_tree,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_parse_tree" "', argument " "2"" of type '" "freeling::parse_tree const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::parse_tree * >(argp2);
  (arg1)->set_parse_tree((freeling::parse_tree const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_parse_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__parse_tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sentence_set_parse_tree__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__parse_tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sentence_set_parse_tree__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_set_parse_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::set_parse_tree(freeling::parse_tree const &,int)\n"
    "    freeling::sentence::set_parse_tree(freeling::parse_tree const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_get_parse_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_parse_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::parse_tree *) &(arg1)->get_parse_tree(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_parse_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_parse_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_parse_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::parse_tree *) &(arg1)->get_parse_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_parse_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_parse_tree" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_parse_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::parse_tree *) &((freeling::sentence const *)arg1)->get_parse_tree(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_parse_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_parse_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_parse_tree" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::parse_tree *) &((freeling::sentence const *)arg1)->get_parse_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__parse_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_parse_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_get_parse_tree__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_get_parse_tree__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sentence_get_parse_tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sentence_get_parse_tree__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_get_parse_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::get_parse_tree(int)\n"
    "    freeling::sentence::get_parse_tree()\n"
    "    freeling::sentence::get_parse_tree(int) const\n"
    "    freeling::sentence::get_parse_tree() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_is_parsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_is_parsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_parsed" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (bool)((freeling::sentence const *)arg1)->is_parsed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_dep_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::dep_tree *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sentence_set_dep_tree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__dep_tree,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::dep_tree * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sentence_set_dep_tree" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->set_dep_tree((freeling::dep_tree const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_dep_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::dep_tree *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_set_dep_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_set_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__dep_tree,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_set_dep_tree" "', argument " "2"" of type '" "freeling::dep_tree const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::dep_tree * >(argp2);
  (arg1)->set_dep_tree((freeling::dep_tree const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_set_dep_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__dep_tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sentence_set_dep_tree__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__dep_tree, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_sentence_set_dep_tree__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_set_dep_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::set_dep_tree(freeling::dep_tree const &,int)\n"
    "    freeling::sentence::set_dep_tree(freeling::dep_tree const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_get_dep_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_dep_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_dep_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::dep_tree *) &(arg1)->get_dep_tree(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_dep_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_dep_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_dep_tree" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::dep_tree *) &(arg1)->get_dep_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_dep_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_dep_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_dep_tree" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_dep_tree" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::dep_tree *) &((freeling::sentence const *)arg1)->get_dep_tree(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_dep_tree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::dep_tree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_dep_tree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_dep_tree" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::dep_tree *) &((freeling::sentence const *)arg1)->get_dep_tree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_tree, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_dep_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_get_dep_tree__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_get_dep_tree__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sentence_get_dep_tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_sentence_get_dep_tree__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_get_dep_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::get_dep_tree(int)\n"
    "    freeling::sentence::get_dep_tree()\n"
    "    freeling::sentence::get_dep_tree(int) const\n"
    "    freeling::sentence::get_dep_tree() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_is_dep_parsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_is_dep_parsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_dep_parsed" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (bool)((freeling::sentence const *)arg1)->is_dep_parsed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::word,std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_words",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_words" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = ((freeling::sentence const *)arg1)->get_words();
  resultobj = swig::from(static_cast< std::vector< freeling::word,std::allocator< freeling::word > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_words_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_words_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_begin" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (arg1)->words_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_words_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_words_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_end" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (arg1)->words_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_words_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_words_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_begin" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = ((freeling::sentence const *)arg1)->words_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_words_begin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_words_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_words_begin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_words_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::words_begin()\n"
    "    freeling::sentence::words_begin() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_words_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_words_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_words_end" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = ((freeling::sentence const *)arg1)->words_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_words_end(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_words_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_sentence_words_end__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_words_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::words_end()\n"
    "    freeling::sentence::words_end() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_get_word_iterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_word_iterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_word_iterator" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_get_word_iterator" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_get_word_iterator" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  result = ((freeling::sentence const *)arg1)->get_word_iterator((freeling::word const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_word_iterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_word_iterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_word_iterator" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_get_word_iterator" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_get_word_iterator" "', argument " "2"" of type '" "freeling::word const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  result = (arg1)->get_word_iterator((freeling::word const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_word_iterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sentence_get_word_iterator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__sentence, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_sentence_get_word_iterator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'sentence_get_word_iterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::sentence::get_word_iterator(freeling::word const &) const\n"
    "    freeling::sentence::get_word_iterator(freeling::word const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_sentence_add_predicate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  freeling::predicate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_add_predicate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_add_predicate" "', argument " "1"" of type '" "freeling::sentence *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__predicate,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sentence_add_predicate" "', argument " "2"" of type '" "freeling::predicate const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sentence_add_predicate" "', argument " "2"" of type '" "freeling::predicate const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::predicate * >(argp2);
  (arg1)->add_predicate((freeling::predicate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_is_predicate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_is_predicate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_is_predicate" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_is_predicate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)((freeling::sentence const *)arg1)->is_predicate(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_predicate_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_predicate_number",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_predicate_number" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_predicate_number" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((freeling::sentence const *)arg1)->get_predicate_number(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_predicate_position(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_predicate_position",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_predicate_position" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_predicate_position" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((freeling::sentence const *)arg1)->get_predicate_position(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_predicate_by_pos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::predicate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_predicate_by_pos",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_predicate_by_pos" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_predicate_by_pos" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::predicate *) &((freeling::sentence const *)arg1)->get_predicate_by_pos(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_predicate_by_number(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::predicate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sentence_get_predicate_by_number",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_predicate_by_number" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sentence_get_predicate_by_number" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::predicate *) &((freeling::sentence const *)arg1)->get_predicate_by_number(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__predicate, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sentence_get_predicates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sentence *arg1 = (freeling::sentence *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::predicates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sentence_get_predicates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sentence, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sentence_get_predicates" "', argument " "1"" of type '" "freeling::sentence const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sentence * >(argp1);
  result = (freeling::sentence::predicates *) &((freeling::sentence const *)arg1)->get_predicates();
  resultobj = swig::from(static_cast< std::vector< freeling::predicate,std::allocator< freeling::predicate > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sentence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__sentence, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_paragraph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::paragraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_paragraph")) SWIG_fail;
  result = (freeling::paragraph *)new freeling::paragraph();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_paragraph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::paragraph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_paragraph",&obj0)) SWIG_fail;
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_paragraph" "', argument " "1"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_paragraph" "', argument " "1"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::paragraph *)new freeling::paragraph((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__paragraph, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_paragraph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_paragraph__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_paragraph__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_paragraph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::paragraph::paragraph()\n"
    "    freeling::paragraph::paragraph(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_paragraph_set_paragraph_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::paragraph *arg1 = (freeling::paragraph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:paragraph_set_paragraph_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__paragraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "paragraph_set_paragraph_id" "', argument " "1"" of type '" "freeling::paragraph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::paragraph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "paragraph_set_paragraph_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "paragraph_set_paragraph_id" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_paragraph_id((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_paragraph_get_paragraph_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::paragraph *arg1 = (freeling::paragraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:paragraph_get_paragraph_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__paragraph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "paragraph_get_paragraph_id" "', argument " "1"" of type '" "freeling::paragraph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::paragraph * >(argp1);
  result = ((freeling::paragraph const *)arg1)->get_paragraph_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_paragraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::paragraph *arg1 = (freeling::paragraph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_paragraph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__paragraph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_paragraph" "', argument " "1"" of type '" "freeling::paragraph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::paragraph * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *paragraph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__paragraph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_mention__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  freeling::paragraph::const_iterator arg3 ;
  freeling::parse_tree::const_iterator arg4 ;
  int arg5 ;
  freeling::sentence::const_iterator arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  swig::SwigPyIterator *iter6 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  freeling::mention *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_mention",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mention" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_mention" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "3"" of type '" "freeling::paragraph::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "3"" of type '" "freeling::paragraph::const_iterator""'");
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_mention" "', argument " "4"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mention" "', argument " "4"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_mention" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  res6 = SWIG_ConvertPtr(obj5, SWIG_as_voidptrptr(&iter6), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res6) || !iter6) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "6"" of type '" "freeling::sentence::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::sentence::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter6);
    if (iter_t) {
      arg6 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "6"" of type '" "freeling::sentence::const_iterator""'");
    }
  }
  result = (freeling::mention *)new freeling::mention(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__mention, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mention__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  freeling::paragraph::const_iterator arg3 ;
  freeling::sentence::const_iterator arg4 ;
  freeling::sentence::const_iterator arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  swig::SwigPyIterator *iter4 = 0 ;
  int res4 ;
  swig::SwigPyIterator *iter5 = 0 ;
  int res5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  freeling::mention *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_mention",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_mention" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_mention" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "3"" of type '" "freeling::paragraph::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "3"" of type '" "freeling::paragraph::const_iterator""'");
    }
  }
  res4 = SWIG_ConvertPtr(obj3, SWIG_as_voidptrptr(&iter4), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res4) || !iter4) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "4"" of type '" "freeling::sentence::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::sentence::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter4);
    if (iter_t) {
      arg4 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "4"" of type '" "freeling::sentence::const_iterator""'");
    }
  }
  res5 = SWIG_ConvertPtr(obj4, SWIG_as_voidptrptr(&iter5), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res5) || !iter5) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "5"" of type '" "freeling::sentence::const_iterator""'");
  } else {
    swig::SwigPyIterator_T<freeling::sentence::const_iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter5);
    if (iter_t) {
      arg5 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_mention" "', argument " "5"" of type '" "freeling::sentence::const_iterator""'");
    }
  }
  result = (freeling::mention *)new freeling::mention(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__mention, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mention__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::mention *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mention",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__mention,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mention" "', argument " "1"" of type '" "freeling::mention const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mention" "', argument " "1"" of type '" "freeling::mention const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (freeling::mention *)new freeling::mention((freeling::mention const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__mention, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mention(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__mention, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_mention__SWIG_2(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *>(iter) != 0));
        if (_v) {
          swig::SwigPyIterator *iter = 0;
          int res = SWIG_ConvertPtr(argv[3], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
          _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter) != 0));
          if (_v) {
            swig::SwigPyIterator *iter = 0;
            int res = SWIG_ConvertPtr(argv[4], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
            _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter) != 0));
            if (_v) {
              return _wrap_new_mention__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::paragraph::const_iterator > *>(iter) != 0));
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              swig::SwigPyIterator *iter = 0;
              int res = SWIG_ConvertPtr(argv[5], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
              _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<freeling::sentence::const_iterator > *>(iter) != 0));
              if (_v) {
                return _wrap_new_mention__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_mention'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::mention::mention(int,int,freeling::paragraph::const_iterator,freeling::parse_tree::const_iterator,int,freeling::sentence::const_iterator)\n"
    "    freeling::mention::mention(int,int,freeling::paragraph::const_iterator,freeling::sentence::const_iterator,freeling::sentence::const_iterator)\n"
    "    freeling::mention::mention(freeling::mention const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mention___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  freeling::mention *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention___lt__" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__mention,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mention___lt__" "', argument " "2"" of type '" "freeling::mention const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mention___lt__" "', argument " "2"" of type '" "freeling::mention const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::mention * >(argp2);
  result = (bool)((freeling::mention const *)arg1)->operator <((freeling::mention const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_set_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_set_id",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_set_id" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_set_id" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_id(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_set_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  freeling::mention::mentionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_set_type",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_set_type" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_set_type" "', argument " "2"" of type '" "freeling::mention::mentionType""'");
  } 
  arg2 = static_cast< freeling::mention::mentionType >(val2);
  (arg1)->set_type(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_set_initial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_set_initial",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_set_initial" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_set_initial" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_initial(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_set_group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_set_group",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_set_group" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_set_group" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_group(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_subsumed_with_no_verb__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_subsumed_with_no_verb",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_subsumed_with_no_verb" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_subsumed_with_no_verb" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->subsumed_with_no_verb(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_subsumed_with_no_verb__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_subsumed_with_no_verb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_subsumed_with_no_verb" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  (arg1)->subsumed_with_no_verb();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_subsumed_with_no_verb(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__mention, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mention_subsumed_with_no_verb__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__mention, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mention_subsumed_with_no_verb__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'mention_subsumed_with_no_verb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::mention::subsumed_with_no_verb(bool)\n"
    "    freeling::mention::subsumed_with_no_verb()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_mention_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_id" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (int)((freeling::mention const *)arg1)->get_id();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_n_sentence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_n_sentence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_n_sentence" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (int)((freeling::mention const *)arg1)->get_n_sentence();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_sentence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::paragraph::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_sentence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_sentence" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->get_sentence();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::paragraph::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_pos_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_pos_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_pos_begin" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (int)((freeling::mention const *)arg1)->get_pos_begin();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_pos_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_pos_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_pos_end" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (int)((freeling::mention const *)arg1)->get_pos_end();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_it_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_it_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_it_begin" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->get_it_begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_it_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_it_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_it_end" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->get_it_end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_it_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::sentence::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_it_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_it_head" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->get_it_head();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const freeling::sentence::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::mention::mentionType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_type" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (freeling::mention::mentionType)((freeling::mention const *)arg1)->get_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_group(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_group",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_group" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (int)((freeling::mention const *)arg1)->get_group();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_is_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  freeling::mention::mentionType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mention_is_type",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_is_type" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mention_is_type" "', argument " "2"" of type '" "freeling::mention::mentionType""'");
  } 
  arg2 = static_cast< freeling::mention::mentionType >(val2);
  result = (bool)((freeling::mention const *)arg1)->is_type(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_is_initial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_is_initial",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_is_initial" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (bool)((freeling::mention const *)arg1)->is_initial();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_is_subsumed_with_no_verb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_is_subsumed_with_no_verb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_is_subsumed_with_no_verb" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (bool)((freeling::mention const *)arg1)->is_subsumed_with_no_verb();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_ptree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::parse_tree::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_ptree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_ptree" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->get_ptree();
  resultobj = SWIG_NewPointerObj((new freeling::parse_tree::const_iterator(static_cast< const freeling::parse_tree::const_iterator& >(result))), SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_get_head(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::word *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_get_head",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_get_head" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = (freeling::word *) &((freeling::mention const *)arg1)->get_head();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__word, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mention_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mention_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mention_value" "', argument " "1"" of type '" "freeling::mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  result = ((freeling::mention const *)arg1)->value();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::mention *arg1 = (freeling::mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mention",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__mention, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mention" "', argument " "1"" of type '" "freeling::mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::mention * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mention_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__mention, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SG_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::semgraph::SG_mention *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SG_mention",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SG_mention" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_mention" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SG_mention" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_mention" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SG_mention" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_mention" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (freeling::semgraph::SG_mention *)new freeling::semgraph::SG_mention((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_mention, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SG_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_mention *arg1 = (freeling::semgraph::SG_mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SG_mention",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_mention, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SG_mention" "', argument " "1"" of type '" "freeling::semgraph::SG_mention *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_mention * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_mention_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_mention *arg1 = (freeling::semgraph::SG_mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_mention_get_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_mention_get_id" "', argument " "1"" of type '" "freeling::semgraph::SG_mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_mention * >(argp1);
  result = ((freeling::semgraph::SG_mention const *)arg1)->get_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_mention_get_sentence_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_mention *arg1 = (freeling::semgraph::SG_mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_mention_get_sentence_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_mention_get_sentence_id" "', argument " "1"" of type '" "freeling::semgraph::SG_mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_mention * >(argp1);
  result = ((freeling::semgraph::SG_mention const *)arg1)->get_sentence_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_mention_get_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_mention *arg1 = (freeling::semgraph::SG_mention *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_mention_get_words",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_mention, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_mention_get_words" "', argument " "1"" of type '" "freeling::semgraph::SG_mention const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_mention * >(argp1);
  result = (std::list< std::wstring,std::allocator< std::wstring > > *) &((freeling::semgraph::SG_mention const *)arg1)->get_words();
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SG_mention_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph__SG_mention, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ENTITY_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "ENTITY",SWIG_From_int(static_cast< int >(freeling::semgraph::ENTITY)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *WORD_swigconstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *module;
  PyObject *d;
  if (!PyArg_ParseTuple(args,(char*)"O:swigconstant", &module)) return NULL;
  d = PyModule_GetDict(module);
  if (!d) return NULL;
  SWIG_Python_SetConstant(d, "WORD",SWIG_From_int(static_cast< int >(freeling::semgraph::WORD)));
  return SWIG_Py_Void();
}


SWIGINTERN PyObject *_wrap_new_SG_entity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  freeling::semgraph::entityType arg3 ;
  std::wstring *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  freeling::semgraph::SG_entity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SG_entity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SG_entity" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_entity" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SG_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SG_entity" "', argument " "3"" of type '" "freeling::semgraph::entityType""'");
  } 
  arg3 = static_cast< freeling::semgraph::entityType >(val3);
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SG_entity" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_entity" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  result = (freeling::semgraph::SG_entity *)new freeling::semgraph::SG_entity((std::wstring const &)*arg1,(std::wstring const &)*arg2,arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SG_entity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SG_entity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SG_entity" "', argument " "1"" of type '" "freeling::semgraph::SG_entity *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_set_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SG_entity_set_lemma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_set_lemma" "', argument " "1"" of type '" "freeling::semgraph::SG_entity *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SG_entity_set_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SG_entity_set_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_lemma((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_id" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = ((freeling::semgraph::SG_entity const *)arg1)->get_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_lemma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_lemma" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = ((freeling::semgraph::SG_entity const *)arg1)->get_lemma();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_semclass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_semclass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_semclass" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = ((freeling::semgraph::SG_entity const *)arg1)->get_semclass();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::semgraph::entityType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_type",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_type" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = (freeling::semgraph::entityType)((freeling::semgraph::SG_entity const *)arg1)->get_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_sense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_sense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_sense" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = ((freeling::semgraph::SG_entity const *)arg1)->get_sense();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_entity_get_mentions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_entity *arg1 = (freeling::semgraph::SG_entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_entity_get_mentions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_entity_get_mentions" "', argument " "1"" of type '" "freeling::semgraph::SG_entity const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp1);
  result = (std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *) &((freeling::semgraph::SG_entity const *)arg1)->get_mentions();
  resultobj = swig::from(static_cast< std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SG_entity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph__SG_entity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SG_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::semgraph::SG_argument *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SG_argument",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SG_argument" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_argument" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SG_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::semgraph::SG_argument *)new freeling::semgraph::SG_argument((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_argument, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SG_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_argument *arg1 = (freeling::semgraph::SG_argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SG_argument",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_argument, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SG_argument" "', argument " "1"" of type '" "freeling::semgraph::SG_argument *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_argument * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_argument_get_role(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_argument *arg1 = (freeling::semgraph::SG_argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_argument_get_role",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_argument_get_role" "', argument " "1"" of type '" "freeling::semgraph::SG_argument const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_argument * >(argp1);
  result = ((freeling::semgraph::SG_argument const *)arg1)->get_role();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_argument_get_entity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_argument *arg1 = (freeling::semgraph::SG_argument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_argument_get_entity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_argument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_argument_get_entity" "', argument " "1"" of type '" "freeling::semgraph::SG_argument const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_argument * >(argp1);
  result = ((freeling::semgraph::SG_argument const *)arg1)->get_entity();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SG_argument_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph__SG_argument, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SG_frame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  freeling::semgraph::SG_frame *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SG_frame",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SG_frame" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_frame" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SG_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SG_frame" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_frame" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_SG_frame" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SG_frame" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  result = (freeling::semgraph::SG_frame *)new freeling::semgraph::SG_frame((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SG_frame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SG_frame",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SG_frame" "', argument " "1"" of type '" "freeling::semgraph::SG_frame *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_id" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = ((freeling::semgraph::SG_frame const *)arg1)->get_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_lemma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_lemma" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = ((freeling::semgraph::SG_frame const *)arg1)->get_lemma();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_sense(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_sense",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_sense" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = ((freeling::semgraph::SG_frame const *)arg1)->get_sense();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_token_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_token_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_token_id" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = ((freeling::semgraph::SG_frame const *)arg1)->get_token_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_sentence_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_sentence_id",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_sentence_id" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = ((freeling::semgraph::SG_frame const *)arg1)->get_sentence_id();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SG_frame_get_arguments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::SG_frame *arg1 = (freeling::semgraph::SG_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SG_frame_get_arguments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SG_frame_get_arguments" "', argument " "1"" of type '" "freeling::semgraph::SG_frame const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp1);
  result = (std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *) &((freeling::semgraph::SG_frame const *)arg1)->get_arguments();
  resultobj = swig::from(static_cast< std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SG_frame_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph__SG_frame, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_semantic_graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_semantic_graph")) SWIG_fail;
  result = (freeling::semgraph::semantic_graph *)new freeling::semgraph::semantic_graph();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__semantic_graph, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_semantic_graph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_semantic_graph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_semantic_graph" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_add_entity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  freeling::semgraph::SG_entity *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_add_entity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_add_entity" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_entity,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_add_entity" "', argument " "2"" of type '" "freeling::semgraph::SG_entity &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_entity" "', argument " "2"" of type '" "freeling::semgraph::SG_entity &""'"); 
  }
  arg2 = reinterpret_cast< freeling::semgraph::SG_entity * >(argp2);
  result = (arg1)->add_entity(*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_add_frame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  freeling::semgraph::SG_frame *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_add_frame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_add_frame" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__semgraph__SG_frame,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_add_frame" "', argument " "2"" of type '" "freeling::semgraph::SG_frame &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_frame" "', argument " "2"" of type '" "freeling::semgraph::SG_frame &""'"); 
  }
  arg2 = reinterpret_cast< freeling::semgraph::SG_frame * >(argp2);
  result = (arg1)->add_frame(*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frame__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::semgraph::SG_frame *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_get_frame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_frame" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::semgraph::SG_frame *) &((freeling::semgraph::semantic_graph const *)arg1)->get_frame((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::semgraph::SG_entity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_get_entity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entity" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::semgraph::SG_entity *) &((freeling::semgraph::semantic_graph const *)arg1)->get_entity((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entities__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:semantic_graph_get_entities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entities" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  result = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *) &((freeling::semgraph::semantic_graph const *)arg1)->get_entities();
  resultobj = swig::from(static_cast< std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frames__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:semantic_graph_get_frames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_frames" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  result = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *) &((freeling::semgraph::semantic_graph const *)arg1)->get_frames();
  resultobj = swig::from(static_cast< std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frame__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::semgraph::SG_frame *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_get_frame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_frame" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::semgraph::SG_frame *) &(arg1)->get_frame((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_frame, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frame(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_semantic_graph_get_frame__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_semantic_graph_get_frame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'semantic_graph_get_frame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::semgraph::semantic_graph::get_frame(std::wstring const &) const\n"
    "    freeling::semgraph::semantic_graph::get_frame(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entity_id_by_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:semantic_graph_get_entity_id_by_mention",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entity_id_by_mention" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_entity_id_by_mention" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity_id_by_mention" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semantic_graph_get_entity_id_by_mention" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity_id_by_mention" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((freeling::semgraph::semantic_graph const *)arg1)->get_entity_id_by_mention((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entity_id_by_lemma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:semantic_graph_get_entity_id_by_lemma",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entity_id_by_lemma" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_entity_id_by_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity_id_by_lemma" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semantic_graph_get_entity_id_by_lemma" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity_id_by_lemma" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((freeling::semgraph::semantic_graph const *)arg1)->get_entity_id_by_lemma((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::semgraph::SG_entity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_get_entity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entity" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_get_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_get_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::semgraph::SG_entity *) &(arg1)->get_entity((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__SG_entity, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entity(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_semantic_graph_get_entity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_semantic_graph_get_entity__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'semantic_graph_get_entity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::semgraph::semantic_graph::get_entity(std::wstring const &) const\n"
    "    freeling::semgraph::semantic_graph::get_entity(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entities__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:semantic_graph_get_entities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_entities" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  result = (std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *) &(arg1)->get_entities();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_entities(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_semantic_graph_get_entities__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_semantic_graph_get_entities__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'semantic_graph_get_entities'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::semgraph::semantic_graph::get_entities() const\n"
    "    freeling::semgraph::semantic_graph::get_entities()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frames__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:semantic_graph_get_frames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_get_frames" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  result = (std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *) &(arg1)->get_frames();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_get_frames(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_semantic_graph_get_frames__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__semgraph__semantic_graph, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_semantic_graph_get_frames__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'semantic_graph_get_frames'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::semgraph::semantic_graph::get_frames() const\n"
    "    freeling::semgraph::semantic_graph::get_frames()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_semantic_graph_add_mention_to_entity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  freeling::semgraph::SG_mention *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:semantic_graph_add_mention_to_entity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_add_mention_to_entity" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_add_mention_to_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_mention_to_entity" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__semgraph__SG_mention,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semantic_graph_add_mention_to_entity" "', argument " "3"" of type '" "freeling::semgraph::SG_mention const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_mention_to_entity" "', argument " "3"" of type '" "freeling::semgraph::SG_mention const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::semgraph::SG_mention * >(argp3);
  (arg1)->add_mention_to_entity((std::wstring const &)*arg2,(freeling::semgraph::SG_mention const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_add_argument_to_frame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:semantic_graph_add_argument_to_frame",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_add_argument_to_frame" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_add_argument_to_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_argument_to_frame" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semantic_graph_add_argument_to_frame" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_argument_to_frame" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "semantic_graph_add_argument_to_frame" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_add_argument_to_frame" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->add_argument_to_frame((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_is_argument(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_is_argument",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_is_argument" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_is_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_is_argument" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((freeling::semgraph::semantic_graph const *)arg1)->is_argument((std::wstring const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_has_arguments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semantic_graph_has_arguments",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_has_arguments" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semantic_graph_has_arguments" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semantic_graph_has_arguments" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((freeling::semgraph::semantic_graph const *)arg1)->has_arguments((std::wstring const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semantic_graph_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph::semantic_graph *arg1 = (freeling::semgraph::semantic_graph *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:semantic_graph_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semantic_graph_empty" "', argument " "1"" of type '" "freeling::semgraph::semantic_graph const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph::semantic_graph * >(argp1);
  result = (bool)((freeling::semgraph::semantic_graph const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *semantic_graph_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph__semantic_graph, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_document__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_document")) SWIG_fail;
  result = (freeling::document *)new freeling::document();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__document, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_document__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::document *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_document",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_document" "', argument " "1"" of type '" "freeling::document const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_document" "', argument " "1"" of type '" "freeling::document const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (freeling::document *)new freeling::document((freeling::document const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__document, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_document(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_document__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_document__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_document'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::document::document()\n"
    "    freeling::document::document(freeling::document const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_document_is_parsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_is_parsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_is_parsed" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (bool)((freeling::document const *)arg1)->is_parsed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_is_dep_parsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_is_dep_parsed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_is_dep_parsed" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (bool)((freeling::document const *)arg1)->is_dep_parsed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_add_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  freeling::mention *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:document_add_mention",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_add_mention" "', argument " "1"" of type '" "freeling::document *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__mention,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "document_add_mention" "', argument " "2"" of type '" "freeling::mention const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "document_add_mention" "', argument " "2"" of type '" "freeling::mention const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::mention * >(argp2);
  (arg1)->add_mention((freeling::mention const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_num_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_get_num_words",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_num_words" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (int)((freeling::document const *)arg1)->get_num_words();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_num_groups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_get_num_groups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_num_groups" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (int)((freeling::document const *)arg1)->get_num_groups();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_groups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_get_groups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_groups" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (std::list< int,std::allocator< int > > *) &((freeling::document const *)arg1)->get_groups();
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_begin_mentions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_begin_mentions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_begin_mentions" "', argument " "1"" of type '" "freeling::document *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (arg1)->begin_mentions();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator(static_cast< const std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator& >(result))), SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_end_mentions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_end_mentions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_end_mentions" "', argument " "1"" of type '" "freeling::document *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (arg1)->end_mentions();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator(static_cast< const std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator& >(result))), SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_begin_mentions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_begin_mentions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_begin_mentions" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = ((freeling::document const *)arg1)->begin_mentions();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator(static_cast< const std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_begin_mentions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_begin_mentions__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_begin_mentions__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'document_begin_mentions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::document::begin_mentions()\n"
    "    freeling::document::begin_mentions() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_document_end_mentions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_end_mentions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_end_mentions" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = ((freeling::document const *)arg1)->end_mentions();
  resultobj = SWIG_NewPointerObj((new std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator(static_cast< const std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator& >(result))), SWIGTYPE_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_end_mentions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_end_mentions__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_end_mentions__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'document_end_mentions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::document::end_mentions()\n"
    "    freeling::document::end_mentions() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_document_get_semantic_graph__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::semgraph::semantic_graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_get_semantic_graph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_semantic_graph" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (freeling::semgraph::semantic_graph *) &((freeling::document const *)arg1)->get_semantic_graph();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_semantic_graph__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::semgraph::semantic_graph *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:document_get_semantic_graph",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_semantic_graph" "', argument " "1"" of type '" "freeling::document *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  result = (freeling::semgraph::semantic_graph *) &(arg1)->get_semantic_graph();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph__semantic_graph, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_semantic_graph(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_get_semantic_graph__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_document_get_semantic_graph__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'document_get_semantic_graph'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::document::get_semantic_graph() const\n"
    "    freeling::document::get_semantic_graph()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_document_get_mention(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::mention *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:document_get_mention",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_mention" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "document_get_mention" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (freeling::mention *) &((freeling::document const *)arg1)->get_mention(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__mention, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_document_get_coref_id_mentions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< int,std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:document_get_coref_id_mentions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "document_get_coref_id_mentions" "', argument " "1"" of type '" "freeling::document const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "document_get_coref_id_mentions" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((freeling::document const *)arg1)->get_coref_id_mentions(arg2);
  resultobj = swig::from(static_cast< std::list< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_document(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::document *arg1 = (freeling::document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_document",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__document, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_document" "', argument " "1"" of type '" "freeling::document *""'"); 
  }
  arg1 = reinterpret_cast< freeling::document * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *document_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__document, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_traces_TraceLevel_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""freeling::traces::TraceLevel""' of type '""int""'");
    }
    freeling::traces::TraceLevel = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_traces_TraceLevel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(freeling::traces::TraceLevel));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_traces_TraceLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_traces_TraceLevel_get();
}


SWIGINTERN PyObject *_wrap_traces_TraceLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_traces_TraceLevel_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_traces_TraceModule_set(PyObject *_val) {
  {
    unsigned long val;
    int res = SWIG_AsVal_unsigned_SS_long(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""freeling::traces::TraceModule""' of type '""unsigned long""'");
    }
    freeling::traces::TraceModule = static_cast< unsigned long >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_traces_TraceModule_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(freeling::traces::TraceModule));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_traces_TraceModule_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_traces_TraceModule_get();
}


SWIGINTERN PyObject *_wrap_traces_TraceModule_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  int res;
  PyObject *value;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_traces_TraceModule_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_new_traces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::traces *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_traces")) SWIG_fail;
  result = (freeling::traces *)new freeling::traces();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__traces, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_traces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::traces *arg1 = (freeling::traces *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_traces",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__traces, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_traces" "', argument " "1"" of type '" "freeling::traces *""'"); 
  }
  arg1 = reinterpret_cast< freeling::traces * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *traces_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__traces, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_lang_ident__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_lang_ident")) SWIG_fail;
  result = (freeling::lang_ident *)new freeling::lang_ident();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__lang_ident, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lang_ident__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::lang_ident *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_lang_ident",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_lang_ident" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_lang_ident" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::lang_ident *)new freeling::lang_ident((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__lang_ident, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_lang_ident(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_lang_ident__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_lang_ident__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_lang_ident'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::lang_ident::lang_ident()\n"
    "    freeling::lang_ident::lang_ident(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_lang_ident(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_lang_ident",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_lang_ident" "', argument " "1"" of type '" "freeling::lang_ident *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_add_language(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:lang_ident_add_language",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_add_language" "', argument " "1"" of type '" "freeling::lang_ident *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_add_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_add_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_language((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_train_language(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  size_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  size_t val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:lang_ident_train_language",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_train_language" "', argument " "1"" of type '" "freeling::lang_ident *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_train_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_train_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lang_ident_train_language" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_train_language" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lang_ident_train_language" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_train_language" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_size_t(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "lang_ident_train_language" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  (arg1)->train_language((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_identify_language__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:lang_ident_identify_language",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_identify_language" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_identify_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_identify_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *ptr = (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lang_ident_identify_language" "', argument " "3"" of type '" "std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_identify_language" "', argument " "3"" of type '" "std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2,(std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_identify_language__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:lang_ident_identify_language",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_identify_language" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_identify_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_identify_language" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::lang_ident const *)arg1)->identify_language((std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_identify_language(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_lang_ident_identify_language__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_lang_ident_identify_language__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lang_ident_identify_language'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::lang_ident::identify_language(std::wstring const &,std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &) const\n"
    "    freeling::lang_ident::identify_language(std::wstring const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_lang_ident_rank_languages__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:lang_ident_rank_languages",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_rank_languages" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > * >(argp2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lang_ident_rank_languages" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *ptr = (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lang_ident_rank_languages" "', argument " "4"" of type '" "std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "4"" of type '" "std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &""'"); 
    }
    arg4 = ptr;
  }
  ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3,(std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_rank_languages__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::lang_ident *arg1 = (freeling::lang_ident *) 0 ;
  std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:lang_ident_rank_languages",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__lang_ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lang_ident_rank_languages" "', argument " "1"" of type '" "freeling::lang_ident const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::lang_ident * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "2"" of type '" "std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > * >(argp2);
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lang_ident_rank_languages" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lang_ident_rank_languages" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::lang_ident const *)arg1)->rank_languages(*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_lang_ident_rank_languages(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_lang_ident_rank_languages__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__lang_ident, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_lang_ident_rank_languages__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'lang_ident_rank_languages'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::lang_ident::rank_languages(std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &,std::wstring const &,std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > const &) const\n"
    "    freeling::lang_ident::rank_languages(std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > &,std::wstring const &) const\n");
  return 0;
}


SWIGINTERN PyObject *lang_ident_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__lang_ident, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tokenizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::tokenizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_tokenizer",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tokenizer" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tokenizer" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::tokenizer *)new freeling::tokenizer((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tokenizer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tokenizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_tokenizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tokenizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tokenizer" "', argument " "1"" of type '" "freeling::tokenizer *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tokenizer_tokenize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tokenizer_tokenize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::word,std::allocator< freeling::word > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tokenizer_tokenize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tokenizer_tokenize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word,std::allocator< freeling::word > > * >(argp3);
  ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tokenizer_tokenize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  unsigned long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tokenizer_tokenize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  arg3 = reinterpret_cast< unsigned long * >(argp3);
  result = ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3);
  resultobj = swig::from(static_cast< std::list< freeling::word,std::allocator< freeling::word > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tokenizer_tokenize__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tokenizer *arg1 = (freeling::tokenizer *) 0 ;
  std::wstring *arg2 = 0 ;
  unsigned long *arg3 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:tokenizer_tokenize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tokenizer_tokenize" "', argument " "1"" of type '" "freeling::tokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tokenizer * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_long,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "3"" of type '" "unsigned long &""'"); 
  }
  arg3 = reinterpret_cast< unsigned long * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tokenizer_tokenize" "', argument " "4"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tokenizer_tokenize" "', argument " "4"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  arg4 = reinterpret_cast< std::list< freeling::word,std::allocator< freeling::word > > * >(argp4);
  ((freeling::tokenizer const *)arg1)->tokenize((std::wstring const &)*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tokenizer_tokenize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_tokenizer_tokenize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tokenizer_tokenize__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tokenizer_tokenize__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_unsigned_long, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_tokenizer_tokenize__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tokenizer_tokenize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tokenizer::tokenize(std::wstring const &) const\n"
    "    freeling::tokenizer::tokenize(std::wstring const &,std::list< freeling::word,std::allocator< freeling::word > > &) const\n"
    "    freeling::tokenizer::tokenize(std::wstring const &,unsigned long &) const\n"
    "    freeling::tokenizer::tokenize(std::wstring const &,unsigned long &,std::list< freeling::word,std::allocator< freeling::word > > &) const\n");
  return 0;
}


SWIGINTERN PyObject *tokenizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tokenizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_splitter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::splitter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_splitter",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_splitter" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_splitter" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::splitter *)new freeling::splitter((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__splitter, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_splitter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_splitter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_splitter" "', argument " "1"" of type '" "freeling::splitter *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_open_session(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::splitter::session_id result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:splitter_open_session",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_open_session" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  result = (freeling::splitter::session_id)((freeling::splitter const *)arg1)->open_session();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_splitter_status, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_close_session(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  freeling::splitter::session_id arg2 = (freeling::splitter::session_id) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:splitter_close_session",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_close_session" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_splitter_status, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "splitter_close_session" "', argument " "2"" of type '" "freeling::splitter::session_id""'"); 
  }
  arg2 = reinterpret_cast< freeling::splitter::session_id >(argp2);
  ((freeling::splitter const *)arg1)->close_session(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_split__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  freeling::splitter::session_id arg2 = (freeling::splitter::session_id) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  bool arg4 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:splitter_split",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_split" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_splitter_status, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "splitter_split" "', argument " "2"" of type '" "freeling::splitter::session_id""'"); 
  }
  arg2 = reinterpret_cast< freeling::splitter::session_id >(argp2);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "splitter_split" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "splitter_split" "', argument " "5"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "5"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  arg5 = reinterpret_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > * >(argp5);
  ((freeling::splitter const *)arg1)->split(arg2,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_split__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  freeling::splitter::session_id arg2 = (freeling::splitter::session_id) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:splitter_split",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_split" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_splitter_status, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "splitter_split" "', argument " "2"" of type '" "freeling::splitter::session_id""'"); 
  }
  arg2 = reinterpret_cast< freeling::splitter::session_id >(argp2);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "splitter_split" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = ((freeling::splitter const *)arg1)->split(arg2,(std::list< freeling::word,std::allocator< freeling::word > > const &)*arg3,arg4);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_split__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:splitter_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_split" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "splitter_split" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > * >(argp3);
  ((freeling::splitter const *)arg1)->split((std::list< freeling::word,std::allocator< freeling::word > > const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_split__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::splitter *arg1 = (freeling::splitter *) 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:splitter_split",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__splitter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "splitter_split" "', argument " "1"" of type '" "freeling::splitter const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::splitter * >(argp1);
  {
    std::list< freeling::word,std::allocator< freeling::word > > *ptr = (std::list< freeling::word,std::allocator< freeling::word > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "splitter_split" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "splitter_split" "', argument " "2"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::splitter const *)arg1)->split((std::list< freeling::word,std::allocator< freeling::word > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_splitter_split(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__splitter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_splitter_split__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__splitter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_splitter_split__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__splitter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_splitter_status, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_splitter_split__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__splitter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_splitter_status, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::word,std::allocator< freeling::word > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_splitter_split__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'splitter_split'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::splitter::split(freeling::splitter::session_id,std::list< freeling::word,std::allocator< freeling::word > > const &,bool,std::list< freeling::sentence,std::allocator< freeling::sentence > > &) const\n"
    "    freeling::splitter::split(freeling::splitter::session_id,std::list< freeling::word,std::allocator< freeling::word > > const &,bool) const\n"
    "    freeling::splitter::split(std::list< freeling::word,std::allocator< freeling::word > > const &,std::list< freeling::sentence,std::allocator< freeling::sentence > > &) const\n"
    "    freeling::splitter::split(std::list< freeling::word,std::allocator< freeling::word > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *splitter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__splitter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_maco_options_Lang_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_Lang_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Lang_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_Lang_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_Lang_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Lang = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_Lang_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_Lang_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Lang_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->Lang);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_LocutionsFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_LocutionsFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_LocutionsFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_LocutionsFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_LocutionsFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->LocutionsFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_LocutionsFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_LocutionsFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_LocutionsFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->LocutionsFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_QuantitiesFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_QuantitiesFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_QuantitiesFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_QuantitiesFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->QuantitiesFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_QuantitiesFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_QuantitiesFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_QuantitiesFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->QuantitiesFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_AffixFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_AffixFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_AffixFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_AffixFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->AffixFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_AffixFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_AffixFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_AffixFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->AffixFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_CompoundFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_CompoundFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_CompoundFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_CompoundFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_CompoundFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CompoundFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_CompoundFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_CompoundFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_CompoundFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->CompoundFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_DictionaryFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_DictionaryFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionaryFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_DictionaryFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_DictionaryFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->DictionaryFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_DictionaryFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_DictionaryFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_DictionaryFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->DictionaryFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_ProbabilityFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_ProbabilityFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_ProbabilityFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_ProbabilityFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ProbabilityFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_ProbabilityFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_ProbabilityFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->ProbabilityFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_NPdataFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_NPdataFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NPdataFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_NPdataFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_NPdataFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NPdataFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_NPdataFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_NPdataFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_NPdataFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->NPdataFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_PunctuationFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_PunctuationFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_PunctuationFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_PunctuationFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->PunctuationFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_PunctuationFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_PunctuationFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_PunctuationFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->PunctuationFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_UserMapFile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_UserMapFile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMapFile_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_UserMapFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_UserMapFile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->UserMapFile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_UserMapFile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_UserMapFile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_UserMapFile_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->UserMapFile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_Decimal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_Decimal_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Decimal_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_Decimal_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_Decimal_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Decimal = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_Decimal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_Decimal_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Decimal_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->Decimal);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_Thousand_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_Thousand_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Thousand_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_Thousand_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_Thousand_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Thousand = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_Thousand_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_Thousand_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_Thousand_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (std::wstring *) & ((arg1)->Thousand);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_ProbabilityThreshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_ProbabilityThreshold_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityThreshold_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_ProbabilityThreshold_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->ProbabilityThreshold = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_ProbabilityThreshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_ProbabilityThreshold_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_ProbabilityThreshold_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (double) ((arg1)->ProbabilityThreshold);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_InverseDict_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_InverseDict_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_InverseDict_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_InverseDict_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->InverseDict = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_InverseDict_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_InverseDict_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_InverseDict_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (bool) ((arg1)->InverseDict);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_RetokContractions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_RetokContractions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_RetokContractions_set" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_RetokContractions_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->RetokContractions = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_RetokContractions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:maco_options_RetokContractions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_RetokContractions_get" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (bool) ((arg1)->RetokContractions);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_maco_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::maco_options *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_maco_options",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_maco_options" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_maco_options" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::maco_options *)new freeling::maco_options((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__maco_options, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_maco_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_maco_options",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maco_options" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_set_data_files(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::wstring *arg5 = 0 ;
  std::wstring *arg6 = 0 ;
  std::wstring *arg7 = 0 ;
  std::wstring *arg8 = 0 ;
  std::wstring *arg9 = 0 ;
  std::wstring *arg10 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  int res9 = SWIG_OLDOBJ ;
  int res10 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:maco_options_set_data_files",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_data_files" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_set_data_files" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maco_options_set_data_files" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "maco_options_set_data_files" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res5 = SWIG_AsPtr_std_wstring(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "maco_options_set_data_files" "', argument " "5"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "5"" of type '" "std::wstring const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res6 = SWIG_AsPtr_std_wstring(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "maco_options_set_data_files" "', argument " "6"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "6"" of type '" "std::wstring const &""'"); 
    }
    arg6 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res7 = SWIG_AsPtr_std_wstring(obj6, &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "maco_options_set_data_files" "', argument " "7"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "7"" of type '" "std::wstring const &""'"); 
    }
    arg7 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res8 = SWIG_AsPtr_std_wstring(obj7, &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "maco_options_set_data_files" "', argument " "8"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "8"" of type '" "std::wstring const &""'"); 
    }
    arg8 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res9 = SWIG_AsPtr_std_wstring(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "maco_options_set_data_files" "', argument " "9"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "9"" of type '" "std::wstring const &""'"); 
    }
    arg9 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res10 = SWIG_AsPtr_std_wstring(obj9, &ptr);
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "maco_options_set_data_files" "', argument " "10"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_data_files" "', argument " "10"" of type '" "std::wstring const &""'"); 
    }
    arg10 = ptr;
  }
  (arg1)->set_data_files((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,(std::wstring const &)*arg5,(std::wstring const &)*arg6,(std::wstring const &)*arg7,(std::wstring const &)*arg8,(std::wstring const &)*arg9,(std::wstring const &)*arg10);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  if (SWIG_IsNewObj(res10)) delete arg10;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_set_nummerical_points(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:maco_options_set_nummerical_points",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_nummerical_points" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_options_set_nummerical_points" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_nummerical_points" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maco_options_set_nummerical_points" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_options_set_nummerical_points" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_nummerical_points((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_set_threshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_threshold" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->set_threshold(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_set_inverse_dict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_set_inverse_dict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_inverse_dict" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_inverse_dict" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_inverse_dict(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_options_set_retok_contractions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = (freeling::maco_options *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_options_set_retok_contractions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco_options, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_options_set_retok_contractions" "', argument " "1"" of type '" "freeling::maco_options *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_options_set_retok_contractions" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_retok_contractions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *maco_options_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__maco_options, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_maco(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco_options *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::maco *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_maco",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_freeling__maco_options,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_maco" "', argument " "1"" of type '" "freeling::maco_options const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_maco" "', argument " "1"" of type '" "freeling::maco_options const &""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco_options * >(argp1);
  result = (freeling::maco *)new freeling::maco((freeling::maco_options const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__maco, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_maco(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_maco",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maco" "', argument " "1"" of type '" "freeling::maco *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_set_active_options(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  bool arg11 ;
  bool arg12 ;
  bool arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  bool val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:maco_set_active_options",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_set_active_options" "', argument " "1"" of type '" "freeling::maco *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "maco_set_active_options" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "maco_set_active_options" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "maco_set_active_options" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "maco_set_active_options" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "maco_set_active_options" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "maco_set_active_options" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "maco_set_active_options" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "maco_set_active_options" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "maco_set_active_options" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  ecode11 = SWIG_AsVal_bool(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "maco_set_active_options" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "maco_set_active_options" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_bool(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "maco_set_active_options" "', argument " "13"" of type '" "bool""'");
  } 
  arg13 = static_cast< bool >(val13);
  (arg1)->set_active_options(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_analyze" "', argument " "1"" of type '" "freeling::maco const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::maco const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_analyze" "', argument " "1"" of type '" "freeling::maco const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::maco const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::maco *arg1 = (freeling::maco *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maco_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__maco, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maco_analyze" "', argument " "1"" of type '" "freeling::maco const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::maco * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maco_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::maco const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maco_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__maco, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_maco_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__maco, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_maco_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__maco, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_maco_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'maco_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::maco::analyze(freeling::sentence const &) const\n"
    "    freeling::maco::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::maco::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *maco_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__maco, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RE_map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::RE_map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RE_map",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RE_map" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RE_map" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::RE_map *)new freeling::RE_map((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__RE_map, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RE_map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RE_map",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__RE_map, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RE_map" "', argument " "1"" of type '" "freeling::RE_map *""'"); 
  }
  arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RE_map_annotate_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RE_map_annotate_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_annotate_word" "', argument " "1"" of type '" "freeling::RE_map const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RE_map_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RE_map_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  ((freeling::RE_map const *)arg1)->annotate_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RE_map_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RE_map_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_analyze" "', argument " "1"" of type '" "freeling::RE_map const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::RE_map const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RE_map_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RE_map_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_analyze" "', argument " "1"" of type '" "freeling::RE_map const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RE_map_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RE_map_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::RE_map const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RE_map_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::RE_map *arg1 = (freeling::RE_map *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RE_map_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__RE_map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RE_map_analyze" "', argument " "1"" of type '" "freeling::RE_map const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::RE_map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RE_map_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::RE_map const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RE_map_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__RE_map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RE_map_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__RE_map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RE_map_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__RE_map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RE_map_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RE_map_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::RE_map::analyze(freeling::sentence const &) const\n"
    "    freeling::RE_map::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::RE_map::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *RE_map_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__RE_map, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_numbers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::numbers *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_numbers",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_numbers" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_numbers" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_numbers" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_numbers" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_numbers" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_numbers" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = (freeling::numbers *)new freeling::numbers((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__numbers, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_numbers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_numbers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__numbers, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_numbers" "', argument " "1"" of type '" "freeling::numbers *""'"); 
  }
  arg1 = reinterpret_cast< freeling::numbers * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_numbers_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:numbers_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__numbers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numbers_analyze" "', argument " "1"" of type '" "freeling::numbers const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::numbers * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::numbers const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_numbers_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:numbers_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__numbers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numbers_analyze" "', argument " "1"" of type '" "freeling::numbers const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::numbers * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "numbers_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "numbers_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::numbers const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_numbers_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::numbers *arg1 = (freeling::numbers *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:numbers_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__numbers, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "numbers_analyze" "', argument " "1"" of type '" "freeling::numbers const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::numbers * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "numbers_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::numbers const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_numbers_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__numbers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_numbers_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__numbers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_numbers_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__numbers, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_numbers_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'numbers_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::numbers::analyze(freeling::sentence const &) const\n"
    "    freeling::numbers::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::numbers::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *numbers_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__numbers, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_punts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::punts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_punts",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_punts" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_punts" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::punts *)new freeling::punts((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__punts, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_punts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_punts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__punts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_punts" "', argument " "1"" of type '" "freeling::punts *""'"); 
  }
  arg1 = reinterpret_cast< freeling::punts * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_punts_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:punts_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__punts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "punts_analyze" "', argument " "1"" of type '" "freeling::punts const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::punts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::punts const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_punts_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:punts_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__punts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "punts_analyze" "', argument " "1"" of type '" "freeling::punts const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::punts * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "punts_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "punts_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::punts const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_punts_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::punts *arg1 = (freeling::punts *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:punts_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__punts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "punts_analyze" "', argument " "1"" of type '" "freeling::punts const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::punts * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "punts_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::punts const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_punts_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__punts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_punts_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__punts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_punts_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__punts, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_punts_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'punts_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::punts::analyze(freeling::sentence const &) const\n"
    "    freeling::punts::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::punts::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *punts_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__punts, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::dates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dates",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dates" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dates" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::dates *)new freeling::dates((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dates, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dates, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dates" "', argument " "1"" of type '" "freeling::dates *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dates * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dates_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dates_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dates_analyze" "', argument " "1"" of type '" "freeling::dates const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::dates const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dates_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dates_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dates_analyze" "', argument " "1"" of type '" "freeling::dates const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dates * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dates_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dates_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::dates const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dates_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dates *arg1 = (freeling::dates *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dates_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dates_analyze" "', argument " "1"" of type '" "freeling::dates const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dates_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::dates const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dates_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dates_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dates_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dates_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dates_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dates::analyze(freeling::sentence const &) const\n"
    "    freeling::dates::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::dates::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *dates_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__dates, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dictionary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  freeling::dictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_dictionary",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dictionary" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_dictionary" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dictionary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  freeling::dictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_dictionary",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_dictionary" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dictionary__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  freeling::dictionary *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_dictionary",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dictionary" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  result = (freeling::dictionary *)new freeling::dictionary((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dictionary, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dictionary(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_wstring(argv[3], (std::wstring**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_dictionary__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_wstring(argv[3], (std::wstring**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_dictionary__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_wstring(argv[3], (std::wstring**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_dictionary__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_dictionary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dictionary::dictionary(std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,bool,bool)\n"
    "    freeling::dictionary::dictionary(std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &,bool)\n"
    "    freeling::dictionary::dictionary(std::wstring const &,std::wstring const &,std::wstring const &,std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_dictionary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dictionary",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dictionary" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_add_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  freeling::analysis *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dictionary_add_analysis",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_add_analysis" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_add_analysis" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_add_analysis" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__analysis,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_add_analysis" "', argument " "3"" of type '" "freeling::analysis const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_add_analysis" "', argument " "3"" of type '" "freeling::analysis const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::analysis * >(argp3);
  (arg1)->add_analysis((std::wstring const &)*arg2,(freeling::analysis const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_remove_entry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_remove_entry",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_remove_entry" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_remove_entry" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_remove_entry" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->remove_entry((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_set_retokenize_contractions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_set_retokenize_contractions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_set_retokenize_contractions" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dictionary_set_retokenize_contractions" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_retokenize_contractions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_set_affix_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_set_affix_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_set_affix_analysis" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dictionary_set_affix_analysis" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_affix_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_set_compound_analysis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_set_compound_analysis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_set_compound_analysis" "', argument " "1"" of type '" "freeling::dictionary *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dictionary_set_compound_analysis" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_compound_analysis(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_has_affixes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dictionary_has_affixes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_has_affixes" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  result = (bool)((freeling::dictionary const *)arg1)->has_affixes();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_has_compounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:dictionary_has_compounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_has_compounds" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  result = (bool)((freeling::dictionary const *)arg1)->has_compounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_search_form(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::analysis,std::allocator< freeling::analysis > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dictionary_search_form",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_search_form" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_search_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_search_form" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_search_form" "', argument " "3"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_search_form" "', argument " "3"" of type '" "std::list< freeling::analysis,std::allocator< freeling::analysis > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::analysis,std::allocator< freeling::analysis > > * >(argp3);
  ((freeling::dictionary const *)arg1)->search_form((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_annotate_word__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:dictionary_annotate_word",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_annotate_word" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word,std::allocator< freeling::word > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dictionary_annotate_word" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)((freeling::dictionary const *)arg1)->annotate_word(*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_annotate_word__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  std::list< freeling::word,std::allocator< freeling::word > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dictionary_annotate_word",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_annotate_word" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "3"" of type '" "std::list< freeling::word,std::allocator< freeling::word > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::word,std::allocator< freeling::word > > * >(argp3);
  result = (bool)((freeling::dictionary const *)arg1)->annotate_word(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_annotate_word__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_annotate_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_annotate_word" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  ((freeling::dictionary const *)arg1)->annotate_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_annotate_word(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dictionary_annotate_word__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_dictionary_annotate_word__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__word, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_dictionary_annotate_word__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dictionary_annotate_word'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dictionary::annotate_word(freeling::word &,std::list< freeling::word,std::allocator< freeling::word > > &,bool) const\n"
    "    freeling::dictionary::annotate_word(freeling::word &,std::list< freeling::word,std::allocator< freeling::word > > &) const\n"
    "    freeling::dictionary::annotate_word(freeling::word &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dictionary_get_forms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dictionary_get_forms",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_get_forms" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_get_forms" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_get_forms" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dictionary_get_forms" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_get_forms" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((freeling::dictionary const *)arg1)->get_forms((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_analyze" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::dictionary const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_analyze" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::dictionary const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dictionary *arg1 = (freeling::dictionary *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dictionary_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dictionary, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dictionary_analyze" "', argument " "1"" of type '" "freeling::dictionary const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dictionary * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dictionary_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::dictionary const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dictionary_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dictionary_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dictionary_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dictionary, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dictionary_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dictionary_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dictionary::analyze(freeling::sentence const &) const\n"
    "    freeling::dictionary::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::dictionary::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *dictionary_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__dictionary, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_locutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::locutions *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_locutions",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_locutions" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_locutions" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::locutions *)new freeling::locutions((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__locutions, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_locutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_locutions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_locutions" "', argument " "1"" of type '" "freeling::locutions *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_add_locution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:locutions_add_locution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_add_locution" "', argument " "1"" of type '" "freeling::locutions *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "locutions_add_locution" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "locutions_add_locution" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_locution((std::wstring const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_set_OnlySelected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:locutions_set_OnlySelected",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_set_OnlySelected" "', argument " "1"" of type '" "freeling::locutions *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "locutions_set_OnlySelected" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_OnlySelected(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:locutions_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_analyze" "', argument " "1"" of type '" "freeling::locutions const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::locutions const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:locutions_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_analyze" "', argument " "1"" of type '" "freeling::locutions const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "locutions_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "locutions_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::locutions const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::locutions *arg1 = (freeling::locutions *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:locutions_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__locutions, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "locutions_analyze" "', argument " "1"" of type '" "freeling::locutions const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::locutions * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "locutions_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::locutions const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_locutions_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__locutions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_locutions_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__locutions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_locutions_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__locutions, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_locutions_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'locutions_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::locutions::analyze(freeling::sentence const &) const\n"
    "    freeling::locutions::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::locutions::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *locutions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__locutions, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::ner *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ner",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ner" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ner" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::ner *)new freeling::ner((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__ner, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ner, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ner" "', argument " "1"" of type '" "freeling::ner *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ner * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ner_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ner_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ner_analyze" "', argument " "1"" of type '" "freeling::ner const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::ner const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ner_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ner_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ner_analyze" "', argument " "1"" of type '" "freeling::ner const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ner * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ner_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ner_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::ner const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ner_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ner *arg1 = (freeling::ner *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ner_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ner, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ner_analyze" "', argument " "1"" of type '" "freeling::ner const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ner * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ner_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::ner const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ner_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ner, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ner_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ner, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ner_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ner, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ner_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ner_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::ner::analyze(freeling::sentence const &) const\n"
    "    freeling::ner::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::ner::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *ner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__ner, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_quantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::quantities *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_quantities",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_quantities" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_quantities" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_quantities" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_quantities" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::quantities *)new freeling::quantities((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__quantities, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_quantities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_quantities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__quantities, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_quantities" "', argument " "1"" of type '" "freeling::quantities *""'"); 
  }
  arg1 = reinterpret_cast< freeling::quantities * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quantities_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:quantities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__quantities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quantities_analyze" "', argument " "1"" of type '" "freeling::quantities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::quantities * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::quantities const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quantities_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:quantities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__quantities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quantities_analyze" "', argument " "1"" of type '" "freeling::quantities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::quantities * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quantities_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quantities_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::quantities const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_quantities_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::quantities *arg1 = (freeling::quantities *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:quantities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__quantities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quantities_analyze" "', argument " "1"" of type '" "freeling::quantities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::quantities * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quantities_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::quantities const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_quantities_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__quantities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_quantities_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__quantities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_quantities_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__quantities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_quantities_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'quantities_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::quantities::analyze(freeling::sentence const &) const\n"
    "    freeling::quantities::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::quantities::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *quantities_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__quantities, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_probabilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  double arg2 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::probabilities *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_probabilities",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_probabilities" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_probabilities" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_probabilities" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (freeling::probabilities *)new freeling::probabilities((std::wstring const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__probabilities, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_probabilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_probabilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_probabilities" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_annotate_word(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  freeling::word *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:probabilities_annotate_word",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_annotate_word" "', argument " "1"" of type '" "freeling::probabilities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__word,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_annotate_word" "', argument " "2"" of type '" "freeling::word &""'"); 
  }
  arg2 = reinterpret_cast< freeling::word * >(argp2);
  ((freeling::probabilities const *)arg1)->annotate_word(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_set_activate_guesser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:probabilities_set_activate_guesser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_set_activate_guesser" "', argument " "1"" of type '" "freeling::probabilities *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "probabilities_set_activate_guesser" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_activate_guesser(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:probabilities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_analyze" "', argument " "1"" of type '" "freeling::probabilities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::probabilities const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:probabilities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_analyze" "', argument " "1"" of type '" "freeling::probabilities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::probabilities const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::probabilities *arg1 = (freeling::probabilities *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:probabilities_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__probabilities, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "probabilities_analyze" "', argument " "1"" of type '" "freeling::probabilities const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::probabilities * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "probabilities_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::probabilities const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_probabilities_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__probabilities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_probabilities_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__probabilities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_probabilities_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__probabilities, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_probabilities_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'probabilities_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::probabilities::analyze(freeling::sentence const &) const\n"
    "    freeling::probabilities::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::probabilities::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *probabilities_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__probabilities, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_hmm_tagger__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  freeling::hmm_tagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_hmm_tagger",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_hmm_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_hmm_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hmm_tagger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_hmm_tagger" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_hmm_tagger" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__hmm_tagger, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hmm_tagger__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::hmm_tagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_hmm_tagger",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_hmm_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_hmm_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_hmm_tagger" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_hmm_tagger" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (freeling::hmm_tagger *)new freeling::hmm_tagger((std::wstring const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__hmm_tagger, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_hmm_tagger(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_hmm_tagger__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_hmm_tagger__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_hmm_tagger'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::hmm_tagger::hmm_tagger(std::wstring const &,bool,unsigned int,unsigned int)\n"
    "    freeling::hmm_tagger::hmm_tagger(std::wstring const &,bool,unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_hmm_tagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_hmm_tagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hmm_tagger" "', argument " "1"" of type '" "freeling::hmm_tagger *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_SequenceProb_log__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:hmm_tagger_SequenceProb_log",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_SequenceProb_log" "', argument " "1"" of type '" "freeling::hmm_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_SequenceProb_log" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_SequenceProb_log" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hmm_tagger_SequenceProb_log" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)((freeling::hmm_tagger const *)arg1)->SequenceProb_log((freeling::sentence const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_SequenceProb_log__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hmm_tagger_SequenceProb_log",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_SequenceProb_log" "', argument " "1"" of type '" "freeling::hmm_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_SequenceProb_log" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_SequenceProb_log" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = (double)((freeling::hmm_tagger const *)arg1)->SequenceProb_log((freeling::sentence const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_SequenceProb_log(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hmm_tagger_SequenceProb_log__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hmm_tagger_SequenceProb_log__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hmm_tagger_SequenceProb_log'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::hmm_tagger::SequenceProb_log(freeling::sentence const &,int) const\n"
    "    freeling::hmm_tagger::SequenceProb_log(freeling::sentence const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hmm_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_analyze" "', argument " "1"" of type '" "freeling::hmm_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::hmm_tagger const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hmm_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_analyze" "', argument " "1"" of type '" "freeling::hmm_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::hmm_tagger const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::hmm_tagger *arg1 = (freeling::hmm_tagger *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:hmm_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__hmm_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hmm_tagger_analyze" "', argument " "1"" of type '" "freeling::hmm_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::hmm_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hmm_tagger_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::hmm_tagger const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hmm_tagger_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hmm_tagger_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hmm_tagger_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__hmm_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hmm_tagger_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'hmm_tagger_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::hmm_tagger::analyze(freeling::sentence const &) const\n"
    "    freeling::hmm_tagger::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::hmm_tagger::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *hmm_tagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__hmm_tagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_relax_tagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  unsigned int arg6 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  freeling::relax_tagger *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_relax_tagger",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_relax_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_relax_tagger" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_relax_tagger" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_relax_tagger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_relax_tagger" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_relax_tagger" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_relax_tagger" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  result = (freeling::relax_tagger *)new freeling::relax_tagger((std::wstring const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__relax_tagger, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_relax_tagger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_relax_tagger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relax_tagger, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_relax_tagger" "', argument " "1"" of type '" "freeling::relax_tagger *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relax_tagger_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relax_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relax_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relax_tagger_analyze" "', argument " "1"" of type '" "freeling::relax_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::relax_tagger const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relax_tagger_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relax_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relax_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relax_tagger_analyze" "', argument " "1"" of type '" "freeling::relax_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::relax_tagger const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_relax_tagger_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relax_tagger *arg1 = (freeling::relax_tagger *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relax_tagger_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relax_tagger, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relax_tagger_analyze" "', argument " "1"" of type '" "freeling::relax_tagger const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relax_tagger * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "relax_tagger_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::relax_tagger const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relax_tagger_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__relax_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_relax_tagger_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__relax_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_relax_tagger_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__relax_tagger, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_relax_tagger_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'relax_tagger_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::relax_tagger::analyze(freeling::sentence const &) const\n"
    "    freeling::relax_tagger::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::relax_tagger::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *relax_tagger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__relax_tagger, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_alternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::alternatives *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_alternatives",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_alternatives" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_alternatives" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::alternatives *)new freeling::alternatives((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__alternatives, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_alternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_alternatives",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__alternatives, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_alternatives" "', argument " "1"" of type '" "freeling::alternatives *""'"); 
  }
  arg1 = reinterpret_cast< freeling::alternatives * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_alternatives_get_similar_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:alternatives_get_similar_words",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__alternatives, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alternatives_get_similar_words" "', argument " "1"" of type '" "freeling::alternatives const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::alternatives * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alternatives_get_similar_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alternatives_get_similar_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "alternatives_get_similar_words" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alternatives_get_similar_words" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > * >(argp3);
  ((freeling::alternatives const *)arg1)->get_similar_words((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_alternatives_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:alternatives_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__alternatives, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alternatives_analyze" "', argument " "1"" of type '" "freeling::alternatives const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::alternatives * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alternatives_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alternatives_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::alternatives const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_alternatives_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:alternatives_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__alternatives, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alternatives_analyze" "', argument " "1"" of type '" "freeling::alternatives const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::alternatives * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alternatives_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alternatives_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::alternatives const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_alternatives_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::alternatives *arg1 = (freeling::alternatives *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:alternatives_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__alternatives, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "alternatives_analyze" "', argument " "1"" of type '" "freeling::alternatives const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::alternatives * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alternatives_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "alternatives_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::alternatives const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_alternatives_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__alternatives, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_alternatives_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__alternatives, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_alternatives_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__alternatives, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_alternatives_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'alternatives_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::alternatives::analyze(freeling::sentence const &) const\n"
    "    freeling::alternatives::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::alternatives::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *alternatives_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__alternatives, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_phonetics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::phonetics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_phonetics",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_phonetics" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_phonetics" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::phonetics *)new freeling::phonetics((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__phonetics, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_phonetics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_phonetics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__phonetics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_phonetics" "', argument " "1"" of type '" "freeling::phonetics *""'"); 
  }
  arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phonetics_get_sound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:phonetics_get_sound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_get_sound" "', argument " "1"" of type '" "freeling::phonetics const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phonetics_get_sound" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phonetics_get_sound" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::phonetics const *)arg1)->get_sound((std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_phonetics_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:phonetics_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_analyze" "', argument " "1"" of type '" "freeling::phonetics const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::phonetics const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phonetics_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:phonetics_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_analyze" "', argument " "1"" of type '" "freeling::phonetics const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phonetics_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phonetics_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::phonetics const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_phonetics_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::phonetics *arg1 = (freeling::phonetics *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:phonetics_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__phonetics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "phonetics_analyze" "', argument " "1"" of type '" "freeling::phonetics const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::phonetics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "phonetics_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::phonetics const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_phonetics_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__phonetics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_phonetics_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__phonetics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_phonetics_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__phonetics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_phonetics_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'phonetics_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::phonetics::analyze(freeling::sentence const &) const\n"
    "    freeling::phonetics::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::phonetics::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *phonetics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__phonetics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_nec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::nec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_nec",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_nec" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_nec" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::nec *)new freeling::nec((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__nec, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_nec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_nec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__nec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_nec" "', argument " "1"" of type '" "freeling::nec *""'"); 
  }
  arg1 = reinterpret_cast< freeling::nec * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nec_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nec_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__nec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nec_analyze" "', argument " "1"" of type '" "freeling::nec const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::nec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::nec const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nec_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nec_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__nec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nec_analyze" "', argument " "1"" of type '" "freeling::nec const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::nec * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nec_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nec_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::nec const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nec_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::nec *arg1 = (freeling::nec *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nec_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__nec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nec_analyze" "', argument " "1"" of type '" "freeling::nec const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::nec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nec_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::nec const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nec_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__nec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_nec_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__nec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_nec_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__nec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_nec_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'nec_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::nec::analyze(freeling::sentence const &) const\n"
    "    freeling::nec::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::nec::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *nec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__nec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_chart_parser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::chart_parser *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_chart_parser",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_chart_parser" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_chart_parser" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::chart_parser *)new freeling::chart_parser((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__chart_parser, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_chart_parser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_chart_parser",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__chart_parser, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_chart_parser" "', argument " "1"" of type '" "freeling::chart_parser *""'"); 
  }
  arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chart_parser_get_start_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:chart_parser_get_start_symbol",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_get_start_symbol" "', argument " "1"" of type '" "freeling::chart_parser const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
  result = ((freeling::chart_parser const *)arg1)->get_start_symbol();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chart_parser_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:chart_parser_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_analyze" "', argument " "1"" of type '" "freeling::chart_parser const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::chart_parser const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chart_parser_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:chart_parser_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_analyze" "', argument " "1"" of type '" "freeling::chart_parser const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::chart_parser const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_chart_parser_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::chart_parser *arg1 = (freeling::chart_parser *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:chart_parser_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__chart_parser, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "chart_parser_analyze" "', argument " "1"" of type '" "freeling::chart_parser const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::chart_parser * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "chart_parser_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::chart_parser const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_chart_parser_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__chart_parser, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_chart_parser_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__chart_parser, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_chart_parser_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__chart_parser, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_chart_parser_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'chart_parser_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::chart_parser::analyze(freeling::sentence const &) const\n"
    "    freeling::chart_parser::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::chart_parser::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *chart_parser_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__chart_parser, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dep_txala(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::dep_txala *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_dep_txala",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dep_txala" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dep_txala" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dep_txala" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dep_txala" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::dep_txala *)new freeling::dep_txala((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_txala, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dep_txala(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dep_txala",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dep_txala" "', argument " "1"" of type '" "freeling::dep_txala *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_complete_parse_tree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_complete_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_complete_parse_tree" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "freeling::sentence &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "freeling::sentence &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  ((freeling::dep_txala const *)arg1)->complete_parse_tree(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_complete_parse_tree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_complete_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_complete_parse_tree" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  arg2 = reinterpret_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > * >(argp2);
  ((freeling::dep_txala const *)arg1)->complete_parse_tree(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_complete_parse_tree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_complete_parse_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_complete_parse_tree" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_complete_parse_tree" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  ((freeling::dep_txala const *)arg1)->complete_parse_tree(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_complete_parse_tree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_complete_parse_tree__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_complete_parse_tree__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_complete_parse_tree__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dep_txala_complete_parse_tree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dep_txala::complete_parse_tree(freeling::sentence &) const\n"
    "    freeling::dep_txala::complete_parse_tree(std::list< freeling::sentence,std::allocator< freeling::sentence > > &) const\n"
    "    freeling::dep_txala::complete_parse_tree(freeling::document &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_dep_txala_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_analyze" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::dep_txala const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_analyze" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::dep_txala const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_txala *arg1 = (freeling::dep_txala *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_txala_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_txala, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_txala_analyze" "', argument " "1"" of type '" "freeling::dep_txala const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_txala * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_txala_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::dep_txala const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_txala_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_txala, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_txala_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dep_txala_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dep_txala::analyze(freeling::sentence const &) const\n"
    "    freeling::dep_txala::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::dep_txala::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *dep_txala_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__dep_txala, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_dep_treeler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::dep_treeler *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_dep_treeler",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dep_treeler" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dep_treeler" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::dep_treeler *)new freeling::dep_treeler((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__dep_treeler, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dep_treeler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_treeler *arg1 = (freeling::dep_treeler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dep_treeler",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_treeler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dep_treeler" "', argument " "1"" of type '" "freeling::dep_treeler *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_treeler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_treeler_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_treeler *arg1 = (freeling::dep_treeler *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_treeler_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_treeler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_treeler_analyze" "', argument " "1"" of type '" "freeling::dep_treeler const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_treeler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::dep_treeler const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_treeler_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_treeler *arg1 = (freeling::dep_treeler *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_treeler_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_treeler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_treeler_analyze" "', argument " "1"" of type '" "freeling::dep_treeler const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_treeler * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::dep_treeler const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_treeler_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::dep_treeler *arg1 = (freeling::dep_treeler *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dep_treeler_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__dep_treeler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dep_treeler_analyze" "', argument " "1"" of type '" "freeling::dep_treeler const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::dep_treeler * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dep_treeler_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::dep_treeler const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dep_treeler_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_treeler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_treeler_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_treeler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_treeler_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__dep_treeler, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dep_treeler_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'dep_treeler_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::dep_treeler::analyze(freeling::sentence const &) const\n"
    "    freeling::dep_treeler::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::dep_treeler::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *dep_treeler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__dep_treeler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::senses *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_senses",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_senses" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_senses" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::senses *)new freeling::senses((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__senses, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_senses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__senses, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_senses" "', argument " "1"" of type '" "freeling::senses *""'"); 
  }
  arg1 = reinterpret_cast< freeling::senses * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_senses_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:senses_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__senses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "senses_analyze" "', argument " "1"" of type '" "freeling::senses const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::senses * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::senses const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_senses_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:senses_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__senses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "senses_analyze" "', argument " "1"" of type '" "freeling::senses const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::senses * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "senses_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "senses_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::senses const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_senses_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::senses *arg1 = (freeling::senses *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:senses_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__senses, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "senses_analyze" "', argument " "1"" of type '" "freeling::senses const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::senses * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "senses_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::senses const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_senses_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__senses, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_senses_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__senses, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_senses_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__senses, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_senses_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'senses_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::senses::analyze(freeling::sentence const &) const\n"
    "    freeling::senses::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::senses::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *senses_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__senses, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_relaxcor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::relaxcor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_relaxcor",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_relaxcor" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_relaxcor" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::relaxcor *)new freeling::relaxcor((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__relaxcor, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_relaxcor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relaxcor *arg1 = (freeling::relaxcor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_relaxcor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relaxcor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_relaxcor" "', argument " "1"" of type '" "freeling::relaxcor *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relaxcor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relaxcor_set_provide_singletons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relaxcor *arg1 = (freeling::relaxcor *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relaxcor_set_provide_singletons",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relaxcor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relaxcor_set_provide_singletons" "', argument " "1"" of type '" "freeling::relaxcor *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relaxcor * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "relaxcor_set_provide_singletons" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_provide_singletons(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relaxcor_get_provide_singletons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relaxcor *arg1 = (freeling::relaxcor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:relaxcor_get_provide_singletons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relaxcor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relaxcor_get_provide_singletons" "', argument " "1"" of type '" "freeling::relaxcor const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relaxcor * >(argp1);
  result = (bool)((freeling::relaxcor const *)arg1)->get_provide_singletons();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_relaxcor_analyze(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::relaxcor *arg1 = (freeling::relaxcor *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:relaxcor_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__relaxcor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "relaxcor_analyze" "', argument " "1"" of type '" "freeling::relaxcor const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::relaxcor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "relaxcor_analyze" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "relaxcor_analyze" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  ((freeling::relaxcor const *)arg1)->analyze(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *relaxcor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__relaxcor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_semgraph_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::semgraph_extract *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_semgraph_extract",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_semgraph_extract" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_semgraph_extract" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::semgraph_extract *)new freeling::semgraph_extract((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semgraph_extract, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_semgraph_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph_extract *arg1 = (freeling::semgraph_extract *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_semgraph_extract",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph_extract, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_semgraph_extract" "', argument " "1"" of type '" "freeling::semgraph_extract *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph_extract * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semgraph_extract_extract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semgraph_extract *arg1 = (freeling::semgraph_extract *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semgraph_extract_extract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semgraph_extract, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semgraph_extract_extract" "', argument " "1"" of type '" "freeling::semgraph_extract const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semgraph_extract * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semgraph_extract_extract" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semgraph_extract_extract" "', argument " "2"" of type '" "freeling::document &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  ((freeling::semgraph_extract const *)arg1)->extract(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *semgraph_extract_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semgraph_extract, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ukb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::ukb *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ukb",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ukb" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ukb" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::ukb *)new freeling::ukb((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__ukb, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ukb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ukb",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ukb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ukb" "', argument " "1"" of type '" "freeling::ukb *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ukb * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ukb_analyze__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  freeling::sentence *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sentence result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ukb_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ukb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ukb_analyze" "', argument " "1"" of type '" "freeling::ukb const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ukb * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ukb_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ukb_analyze" "', argument " "2"" of type '" "freeling::sentence const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::sentence * >(argp2);
  result = ((freeling::ukb const *)arg1)->analyze((freeling::sentence const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sentence(static_cast< const freeling::sentence& >(result))), SWIGTYPE_p_freeling__sentence, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ukb_analyze__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ukb_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ukb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ukb_analyze" "', argument " "1"" of type '" "freeling::ukb const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ukb * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ukb_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ukb_analyze" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::ukb const *)arg1)->analyze((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = swig::from(static_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ukb_analyze__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::ukb *arg1 = (freeling::ukb *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::document result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ukb_analyze",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__ukb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ukb_analyze" "', argument " "1"" of type '" "freeling::ukb const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::ukb * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ukb_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ukb_analyze" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::ukb const *)arg1)->analyze((freeling::document const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::document(static_cast< const freeling::document& >(result))), SWIGTYPE_p_freeling__document, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ukb_analyze(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ukb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__sentence, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ukb_analyze__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ukb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ukb_analyze__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__ukb, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ukb_analyze__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ukb_analyze'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::ukb::analyze(freeling::sentence const &) const\n"
    "    freeling::ukb::analyze(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::ukb::analyze(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *ukb_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__ukb, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sense_info_sense_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_sense_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sense_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_sense_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sense_info_sense_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->sense = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_sense_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_sense_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sense_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::wstring *) & ((arg1)->sense);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_parents_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg2 = (std::list< std::wstring,std::allocator< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_parents_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_parents_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_parents_set" "', argument " "2"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > *""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::wstring,std::allocator< std::wstring > > * >(argp2);
  if (arg1) (arg1)->parents = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_parents_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_parents_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_parents_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::list< std::wstring,std::allocator< std::wstring > > *)& ((arg1)->parents);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_semfile_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_semfile_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_semfile_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_semfile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sense_info_semfile_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->semfile = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_semfile_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_semfile_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_semfile_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::wstring *) & ((arg1)->semfile);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_words_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg2 = (std::list< std::wstring,std::allocator< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_words_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_words_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_words_set" "', argument " "2"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > *""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::wstring,std::allocator< std::wstring > > * >(argp2);
  if (arg1) (arg1)->words = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_words_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_words_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_words_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::list< std::wstring,std::allocator< std::wstring > > *)& ((arg1)->words);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_tonto_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg2 = (std::list< std::wstring,std::allocator< std::wstring > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_tonto_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_tonto_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_tonto_set" "', argument " "2"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > *""'"); 
  }
  arg2 = reinterpret_cast< std::list< std::wstring,std::allocator< std::wstring > > * >(argp2);
  if (arg1) (arg1)->tonto = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_tonto_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_tonto_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_tonto_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::list< std::wstring,std::allocator< std::wstring > > *)& ((arg1)->tonto);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_sumo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_sumo_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sumo_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_sumo_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sense_info_sumo_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->sumo = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_sumo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_sumo_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_sumo_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::wstring *) & ((arg1)->sumo);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_cyc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sense_info_cyc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_cyc_set" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sense_info_cyc_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sense_info_cyc_set" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->cyc = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_cyc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_cyc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_cyc_get" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = (std::wstring *) & ((arg1)->cyc);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sense_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::sense_info *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_sense_info",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_sense_info" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sense_info" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_sense_info" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_sense_info" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::sense_info *)new freeling::sense_info((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__sense_info, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_sense_info_get_parents_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:sense_info_get_parents_string",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sense_info_get_parents_string" "', argument " "1"" of type '" "freeling::sense_info const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  result = ((freeling::sense_info const *)arg1)->get_parents_string();
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sense_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::sense_info *arg1 = (freeling::sense_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_sense_info",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__sense_info, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sense_info" "', argument " "1"" of type '" "freeling::sense_info *""'"); 
  }
  arg1 = reinterpret_cast< freeling::sense_info * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sense_info_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__sense_info, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_semanticDB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::semanticDB *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_semanticDB",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_semanticDB" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_semanticDB" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::semanticDB *)new freeling::semanticDB((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__semanticDB, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_semanticDB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_semanticDB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semanticDB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_semanticDB" "', argument " "1"" of type '" "freeling::semanticDB *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_semanticDB_get_WN_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:semanticDB_get_WN_keys",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_WN_keys" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semanticDB_get_WN_keys" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_WN_keys" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semanticDB_get_WN_keys" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_WN_keys" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "semanticDB_get_WN_keys" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_WN_keys" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "semanticDB_get_WN_keys" "', argument " "5"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_WN_keys" "', argument " "5"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > &""'"); 
  }
  arg5 = reinterpret_cast< std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > * >(argp5);
  ((freeling::semanticDB const *)arg1)->get_WN_keys((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semanticDB_get_sense_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semanticDB_get_sense_words",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_sense_words" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semanticDB_get_sense_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_sense_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::semanticDB const *)arg1)->get_sense_words((std::wstring const &)*arg2);
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semanticDB_get_word_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:semanticDB_get_word_senses",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_word_senses" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semanticDB_get_word_senses" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_word_senses" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "semanticDB_get_word_senses" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_word_senses" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res4 = SWIG_AsPtr_std_wstring(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "semanticDB_get_word_senses" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_word_senses" "', argument " "4"" of type '" "std::wstring const &""'"); 
    }
    arg4 = ptr;
  }
  result = ((freeling::semanticDB const *)arg1)->get_word_senses((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_semanticDB_get_sense_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::semanticDB *arg1 = (freeling::semanticDB *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< freeling::sense_info > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:semanticDB_get_sense_info",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__semanticDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "semanticDB_get_sense_info" "', argument " "1"" of type '" "freeling::semanticDB const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::semanticDB * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "semanticDB_get_sense_info" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "semanticDB_get_sense_info" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::semanticDB const *)arg1)->get_sense_info((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj((new freeling::sense_info(static_cast< const freeling::sense_info& >(result))), SWIGTYPE_p_freeling__sense_info, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *semanticDB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__semanticDB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_tagset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::tagset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_tagset",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_tagset" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_tagset" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::tagset *)new freeling::tagset((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__tagset, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_tagset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_tagset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_tagset" "', argument " "1"" of type '" "freeling::tagset *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_get_short_tag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tagset_get_short_tag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_short_tag" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_get_short_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_get_short_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::tagset const *)arg1)->get_short_tag((std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_get_msd_features_map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::wstring,std::wstring,std::less< std::wstring >,std::allocator< std::pair< std::wstring const,std::wstring > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tagset_get_msd_features_map",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_msd_features_map" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_get_msd_features_map" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_get_msd_features_map" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::tagset const *)arg1)->get_msd_features_map((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::map< std::wstring,std::wstring,std::less< std::wstring >,std::allocator< std::pair< std::wstring const,std::wstring > > >(static_cast< const std::map< std::wstring,std::wstring,std::less< std::wstring >,std::allocator< std::pair< std::wstring const,std::wstring > > >& >(result))), SWIGTYPE_p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_get_msd_features(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tagset_get_msd_features",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_msd_features" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_get_msd_features" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_get_msd_features" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::tagset const *)arg1)->get_msd_features((std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj((new std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >(static_cast< const std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > >& >(result))), SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_get_msd_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tagset_get_msd_string",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_get_msd_string" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_get_msd_string" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_get_msd_string" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::tagset const *)arg1)->get_msd_string((std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_msd_to_tag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tagset_msd_to_tag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_msd_to_tag" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_msd_to_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_msd_to_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagset_msd_to_tag" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_msd_to_tag" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > * >(argp3);
  result = ((freeling::tagset const *)arg1)->msd_to_tag((std::wstring const &)*arg2,(std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_msd_to_tag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::tagset *arg1 = (freeling::tagset *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tagset_msd_to_tag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__tagset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tagset_msd_to_tag" "', argument " "1"" of type '" "freeling::tagset const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::tagset * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tagset_msd_to_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_msd_to_tag" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tagset_msd_to_tag" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "tagset_msd_to_tag" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((freeling::tagset const *)arg1)->msd_to_tag((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tagset_msd_to_tag(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tagset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tagset_msd_to_tag__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__tagset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_tagset_msd_to_tag__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'tagset_msd_to_tag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::tagset::msd_to_tag(std::wstring const &,std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &) const\n"
    "    freeling::tagset::msd_to_tag(std::wstring const &,std::wstring const &) const\n");
  return 0;
}


SWIGINTERN PyObject *tagset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__tagset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_foma_FSM",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_foma_FSM" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (freeling::foma_FSM *)new freeling::foma_FSM((std::wstring const &)*arg1,(std::wstring const &)*arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_foma_FSM",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::foma_FSM *)new freeling::foma_FSM((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_foma_FSM",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::foma_FSM *)new freeling::foma_FSM((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wistream *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_foma_FSM",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__wistream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  arg1 = reinterpret_cast< std::wistream * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_foma_FSM" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "3"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg3 = ptr;
  }
  result = (freeling::foma_FSM *)new freeling::foma_FSM(*arg1,(std::wstring const &)*arg2,(std::list< std::wstring,std::allocator< std::wstring > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wistream *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_foma_FSM",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__wistream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  arg1 = reinterpret_cast< std::wistream * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = (freeling::foma_FSM *)new freeling::foma_FSM(*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wistream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  freeling::foma_FSM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_foma_FSM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__wistream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_foma_FSM" "', argument " "1"" of type '" "std::wistream &""'"); 
  }
  arg1 = reinterpret_cast< std::wistream * >(argp1);
  result = (freeling::foma_FSM *)new freeling::foma_FSM(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_foma_FSM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__wistream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_foma_FSM__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_foma_FSM__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__wistream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_foma_FSM__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_foma_FSM__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__wistream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_foma_FSM__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< std::wstring,std::allocator< std::wstring > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_foma_FSM__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_foma_FSM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::foma_FSM::foma_FSM(std::wstring const &,std::wstring const &,std::list< std::wstring,std::allocator< std::wstring > > const &)\n"
    "    freeling::foma_FSM::foma_FSM(std::wstring const &,std::wstring const &)\n"
    "    freeling::foma_FSM::foma_FSM(std::wstring const &)\n"
    "    freeling::foma_FSM::foma_FSM(std::wistream &,std::wstring const &,std::list< std::wstring,std::allocator< std::wstring > > const &)\n"
    "    freeling::foma_FSM::foma_FSM(std::wistream &,std::wstring const &)\n"
    "    freeling::foma_FSM::foma_FSM(std::wistream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_foma_FSM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_foma_FSM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_foma_FSM" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_get_similar_words(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:foma_FSM_get_similar_words",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_get_similar_words" "', argument " "1"" of type '" "freeling::foma_FSM const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "foma_FSM_get_similar_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "foma_FSM_get_similar_words" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "foma_FSM_get_similar_words" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "foma_FSM_get_similar_words" "', argument " "3"" of type '" "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > * >(argp3);
  ((freeling::foma_FSM const *)arg1)->get_similar_words((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_set_cutoff_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:foma_FSM_set_cutoff_threshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_set_cutoff_threshold" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "foma_FSM_set_cutoff_threshold" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_cutoff_threshold(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_set_num_matches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:foma_FSM_set_num_matches",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_set_num_matches" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "foma_FSM_set_num_matches" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_num_matches(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_set_basic_operation_cost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:foma_FSM_set_basic_operation_cost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_set_basic_operation_cost" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "foma_FSM_set_basic_operation_cost" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->set_basic_operation_cost(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_set_operation_cost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:foma_FSM_set_operation_cost",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_set_operation_cost" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "foma_FSM_set_operation_cost" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "foma_FSM_set_operation_cost" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "foma_FSM_set_operation_cost" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "foma_FSM_set_operation_cost" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "foma_FSM_set_operation_cost" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->set_operation_cost((std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_foma_FSM_get_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::foma_FSM *arg1 = (freeling::foma_FSM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:foma_FSM_get_alphabet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__foma_FSM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "foma_FSM_get_alphabet" "', argument " "1"" of type '" "freeling::foma_FSM *""'"); 
  }
  arg1 = reinterpret_cast< freeling::foma_FSM * >(argp1);
  result = (arg1)->get_alphabet();
  resultobj = swig::from(static_cast< std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *foma_FSM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__foma_FSM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_util_init_locale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_init_locale",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_init_locale" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_init_locale" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  freeling::util::init_locale((std::wstring const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_wstring2int(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_wstring2int",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_wstring2int" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2int" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (int)freeling::util::wstring2int((std::wstring const &)*arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_int2wstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_int2wstring",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "util_int2wstring" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = freeling::util::int2wstring(arg1);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_wstring2double(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_wstring2double",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_wstring2double" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2double" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (double)freeling::util::wstring2double((std::wstring const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_double2wstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_double2wstring",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "util_double2wstring" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = freeling::util::double2wstring(arg1);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_wstring2longdouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  long double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_wstring2longdouble",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_wstring2longdouble" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2longdouble" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (long double)freeling::util::wstring2longdouble((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj((new long double(static_cast< const long double& >(result))), SWIGTYPE_p_long_double, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_longdouble2wstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:util_longdouble2wstring",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_long_double,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_longdouble2wstring" "', argument " "1"" of type '" "long double const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_longdouble2wstring" "', argument " "1"" of type '" "long double const""'");
    } else {
      long double * temp = reinterpret_cast< long double * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = freeling::util::longdouble2wstring(arg1);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_vector2wstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::wstring,std::allocator< std::wstring > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:util_vector2wstring",&obj0,&obj1)) SWIG_fail;
  {
    std::vector< std::wstring,std::allocator< std::wstring > > *ptr = (std::vector< std::wstring,std::allocator< std::wstring > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_vector2wstring" "', argument " "1"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_vector2wstring" "', argument " "1"" of type '" "std::vector< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_vector2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_vector2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = freeling::util::vector2wstring((std::vector< std::wstring,std::allocator< std::wstring > > const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_list2wstring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::wstring,std::allocator< std::wstring > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:util_list2wstring",&obj0,&obj1)) SWIG_fail;
  {
    std::list< std::wstring,std::allocator< std::wstring > > *ptr = (std::list< std::wstring,std::allocator< std::wstring > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_list2wstring" "', argument " "1"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_list2wstring" "', argument " "1"" of type '" "std::list< std::wstring,std::allocator< std::wstring > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_list2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_list2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = freeling::util::list2wstring((std::list< std::wstring,std::allocator< std::wstring > > const &)*arg1,(std::wstring const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_pairlist2wstring__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:util_pairlist2wstring",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *ptr = (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_pairlist2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "util_pairlist2wstring" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_pairlist2wstring__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:util_pairlist2wstring",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "1"" of type '" "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_pairlist2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res3 = SWIG_AsPtr_std_wstring(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "util_pairlist2wstring" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_pairlist2wstring" "', argument " "3"" of type '" "std::wstring const &""'"); 
    }
    arg3 = ptr;
  }
  result = freeling::util::pairlist2wstring((std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &)*arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_pairlist2wstring(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_util_pairlist2wstring__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_wstring(argv[1], (std::wstring**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_wstring(argv[2], (std::wstring**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_util_pairlist2wstring__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'util_pairlist2wstring'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::util::pairlist2wstring(std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > const &,std::wstring const &,std::wstring const &)\n"
    "    freeling::util::pairlist2wstring(std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > const &,std::wstring const &,std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_util_wstring2list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::list< std::wstring,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:util_wstring2list",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_wstring2list" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2list" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_wstring2list" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2list" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = freeling::util::wstring2list((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = swig::from(static_cast< std::list< std::wstring,std::allocator< std::wstring > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_util_wstring2vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  std::wstring *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::wstring,std::allocator< std::wstring > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:util_wstring2vector",&obj0,&obj1)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "util_wstring2vector" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2vector" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "util_wstring2vector" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "util_wstring2vector" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  result = freeling::util::wstring2vector((std::wstring const &)*arg1,(std::wstring const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::wstring,std::allocator< std::wstring > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_util(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::util *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_util")) SWIG_fail;
  result = (freeling::util *)new freeling::util();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__util, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_util(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::util *arg1 = (freeling::util *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_util",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__util, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_util" "', argument " "1"" of type '" "freeling::util *""'"); 
  }
  arg1 = reinterpret_cast< freeling::util * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *util_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__util, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_input_conll__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_conll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_input_conll")) SWIG_fail;
  result = (freeling::io::input_conll *)new freeling::io::input_conll();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__input_conll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_input_conll__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::input_conll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_input_conll",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_input_conll" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_input_conll" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::input_conll *)new freeling::io::input_conll((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__input_conll, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_input_conll(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_input_conll__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_input_conll__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_input_conll'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::input_conll::input_conll()\n"
    "    freeling::io::input_conll::input_conll(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_input_conll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_conll *arg1 = (freeling::io::input_conll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_input_conll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__input_conll, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_input_conll" "', argument " "1"" of type '" "freeling::io::input_conll *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::input_conll * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_input_conll_input_sentences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_conll *arg1 = (freeling::io::input_conll *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:input_conll_input_sentences",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__input_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "input_conll_input_sentences" "', argument " "1"" of type '" "freeling::io::input_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::input_conll * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "input_conll_input_sentences" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_conll_input_sentences" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "input_conll_input_sentences" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_conll_input_sentences" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > * >(argp3);
  ((freeling::io::input_conll const *)arg1)->input_sentences((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_input_conll_input_document(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_conll *arg1 = (freeling::io::input_conll *) 0 ;
  std::wstring *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:input_conll_input_document",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__input_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "input_conll_input_document" "', argument " "1"" of type '" "freeling::io::input_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::input_conll * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "input_conll_input_document" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_conll_input_document" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "input_conll_input_document" "', argument " "3"" of type '" "freeling::document &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_conll_input_document" "', argument " "3"" of type '" "freeling::document &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::input_conll const *)arg1)->input_document((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *input_conll_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__input_conll, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_conll__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_conll")) SWIG_fail;
  result = (freeling::io::output_conll *)new freeling::io::output_conll();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_conll, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_conll__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::output_conll *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_output_conll",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_output_conll" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_output_conll" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::output_conll *)new freeling::io::output_conll((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_conll, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_conll(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_output_conll__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_output_conll__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_output_conll'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_conll::output_conll()\n"
    "    freeling::io::output_conll::output_conll(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_output_conll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_conll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_conll" "', argument " "1"" of type '" "freeling::io::output_conll *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_conll_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintResults" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_conll_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_conll const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_conll_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintResults" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_conll_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_conll const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_conll_PrintHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintHeader" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_conll const *)arg1)->PrintHeader(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintFooter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_conll_PrintFooter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintFooter" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_conll const *)arg1)->PrintFooter(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_conll_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintResults" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_conll const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_conll *arg1 = (freeling::io::output_conll *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_conll_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_conll, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_conll_PrintResults" "', argument " "1"" of type '" "freeling::io::output_conll const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_conll * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_conll_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_conll const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_conll_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_conll, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_conll_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_conll, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_conll_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_conll, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_conll_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_conll, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_conll_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_conll_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_conll::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_conll::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_conll::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_conll::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *output_conll_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_conll, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_input_freeling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_freeling *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_input_freeling")) SWIG_fail;
  result = (freeling::io::input_freeling *)new freeling::io::input_freeling();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__input_freeling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_input_freeling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_freeling *arg1 = (freeling::io::input_freeling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_input_freeling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__input_freeling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_input_freeling" "', argument " "1"" of type '" "freeling::io::input_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::input_freeling * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_input_freeling_input_sentences(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::input_freeling *arg1 = (freeling::io::input_freeling *) 0 ;
  std::wstring *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:input_freeling_input_sentences",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__input_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "input_freeling_input_sentences" "', argument " "1"" of type '" "freeling::io::input_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::input_freeling * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "input_freeling_input_sentences" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_freeling_input_sentences" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "input_freeling_input_sentences" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "input_freeling_input_sentences" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > &""'"); 
  }
  arg3 = reinterpret_cast< std::list< freeling::sentence,std::allocator< freeling::sentence > > * >(argp3);
  ((freeling::io::input_freeling const *)arg1)->input_sentences((std::wstring const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *input_freeling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__input_freeling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_freeling__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_freeling")) SWIG_fail;
  result = (freeling::io::output_freeling *)new freeling::io::output_freeling();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_freeling, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_freeling__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::output_freeling *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_output_freeling",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_output_freeling" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_output_freeling" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::output_freeling *)new freeling::io::output_freeling((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_freeling, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_freeling(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_output_freeling__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_output_freeling__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_output_freeling'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_freeling::output_freeling()\n"
    "    freeling::io::output_freeling::output_freeling(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_output_freeling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_freeling",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_freeling" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::parse_tree::const_iterator arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:output_freeling_PrintTree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintTree" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintTree" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintTree" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__node_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintTree" "', argument " "3"" of type '" "freeling::parse_tree::const_iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintTree" "', argument " "3"" of type '" "freeling::parse_tree::const_iterator""'");
    } else {
      freeling::parse_tree::const_iterator * temp = reinterpret_cast< freeling::parse_tree::const_iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "output_freeling_PrintTree" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ((freeling::io::output_freeling const *)arg1)->PrintTree(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintDepTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::dep_tree::const_iterator arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:output_freeling_PrintDepTree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintDepTree" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintDepTree" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintDepTree" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintDepTree" "', argument " "3"" of type '" "freeling::dep_tree::const_iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintDepTree" "', argument " "3"" of type '" "freeling::dep_tree::const_iterator""'");
    } else {
      freeling::dep_tree::const_iterator * temp = reinterpret_cast< freeling::dep_tree::const_iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "output_freeling_PrintDepTree" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ((freeling::io::output_freeling const *)arg1)->PrintDepTree(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintPredArgs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::sentence *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintPredArgs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintPredArgs" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintPredArgs" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintPredArgs" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__sentence,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintPredArgs" "', argument " "3"" of type '" "freeling::sentence const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintPredArgs" "', argument " "3"" of type '" "freeling::sentence const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::sentence * >(argp3);
  ((freeling::io::output_freeling const *)arg1)->PrintPredArgs(*arg2,(freeling::sentence const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintWord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::word *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:output_freeling_PrintWord",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintWord" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::word * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "output_freeling_PrintWord" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "output_freeling_PrintWord" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ((freeling::io::output_freeling const *)arg1)->PrintWord(*arg2,(freeling::word const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintWord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::word *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:output_freeling_PrintWord",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintWord" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::word * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "output_freeling_PrintWord" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ((freeling::io::output_freeling const *)arg1)->PrintWord(*arg2,(freeling::word const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintWord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::word *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintWord",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintWord" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__word,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintWord" "', argument " "3"" of type '" "freeling::word const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::word * >(argp3);
  ((freeling::io::output_freeling const *)arg1)->PrintWord(*arg2,(freeling::word const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintWord(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_freeling_PrintWord__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_output_freeling_PrintWord__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__word, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_output_freeling_PrintWord__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_freeling_PrintWord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_freeling::PrintWord(std::wostream &,freeling::word const &,bool,bool) const\n"
    "    freeling::io::output_freeling::PrintWord(std::wostream &,freeling::word const &,bool) const\n"
    "    freeling::io::output_freeling::PrintWord(std::wostream &,freeling::word const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintCorefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintCorefs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintCorefs" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintCorefs" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintCorefs" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintCorefs" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintCorefs" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_freeling const *)arg1)->PrintCorefs(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintSemgraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintSemgraph",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintSemgraph" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintSemgraph" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintSemgraph" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintSemgraph" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintSemgraph" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_freeling const *)arg1)->PrintSemgraph(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintResults" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_freeling const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_freeling_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintResults" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_freeling_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_freeling const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintResults" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_freeling const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_PrintResults" "', argument " "1"" of type '" "freeling::io::output_freeling const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_freeling_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_freeling const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_freeling_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_freeling_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_freeling_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_freeling, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_freeling_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_freeling_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_freeling::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_freeling::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_freeling::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_freeling::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_senses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_senses" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_senses" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_senses(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_all_senses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_all_senses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_all_senses" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_all_senses" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_all_senses(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_phonetics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_phonetics",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_phonetics" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_phonetics" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_phonetics(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_dep_tree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_dep_tree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_dep_tree" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_dep_tree" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_dep_tree(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_corefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_corefs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_corefs" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_corefs" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_corefs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_freeling_output_semgraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_freeling *arg1 = (freeling::io::output_freeling *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_freeling_output_semgraph",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_freeling, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_freeling_output_semgraph" "', argument " "1"" of type '" "freeling::io::output_freeling *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_freeling * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "output_freeling_output_semgraph" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->output_semgraph(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *output_freeling_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_freeling, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_json__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_json")) SWIG_fail;
  result = (freeling::io::output_json *)new freeling::io::output_json();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_json, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_json__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::output_json *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_output_json",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_output_json" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_output_json" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::output_json *)new freeling::io::output_json((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_json, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_json(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_output_json__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_output_json__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_output_json'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_json::output_json()\n"
    "    freeling::io::output_json::output_json(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_output_json(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *arg1 = (freeling::io::output_json *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_json",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_json, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_json" "', argument " "1"" of type '" "freeling::io::output_json *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_json * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_json_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *arg1 = (freeling::io::output_json *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_json_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_json, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_json_PrintResults" "', argument " "1"" of type '" "freeling::io::output_json const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_json * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_json_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_json const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_json_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *arg1 = (freeling::io::output_json *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_json_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_json, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_json_PrintResults" "', argument " "1"" of type '" "freeling::io::output_json const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_json * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_json_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_json const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_json_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *arg1 = (freeling::io::output_json *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_json_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_json, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_json_PrintResults" "', argument " "1"" of type '" "freeling::io::output_json const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_json * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_json const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_json_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_json *arg1 = (freeling::io::output_json *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_json_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_json, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_json_PrintResults" "', argument " "1"" of type '" "freeling::io::output_json const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_json * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_json_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_json const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_json_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_json, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_json_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_json, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_json_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_json, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_json_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_json, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_json_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_json_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_json::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_json::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_json::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_json::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *output_json_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_json, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_naf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_naf")) SWIG_fail;
  result = (freeling::io::output_naf *)new freeling::io::output_naf();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_naf, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_naf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::output_naf *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_output_naf",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_output_naf" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_output_naf" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::output_naf *)new freeling::io::output_naf((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_naf, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_naf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_output_naf__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_output_naf__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_output_naf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_naf::output_naf()\n"
    "    freeling::io::output_naf::output_naf(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_output_naf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_naf",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_naf" "', argument " "1"" of type '" "freeling::io::output_naf *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_naf_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintResults" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_naf_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_naf const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_naf_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintResults" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_naf_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_naf const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_naf_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintResults" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_naf const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_naf_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintResults" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_naf const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_naf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_naf_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_naf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_naf_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_naf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_naf_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_naf, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_naf_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_naf_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_naf::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_naf::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_naf::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_naf::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_naf_PrintHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintHeader" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_naf const *)arg1)->PrintHeader(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_PrintFooter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_naf_PrintFooter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_PrintFooter" "', argument " "1"" of type '" "freeling::io::output_naf const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_naf const *)arg1)->PrintFooter(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_naf_ActivateLayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_naf *arg1 = (freeling::io::output_naf *) 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_naf_ActivateLayer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_naf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_naf_ActivateLayer" "', argument " "1"" of type '" "freeling::io::output_naf *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_naf * >(argp1);
  {
    std::wstring *ptr = (std::wstring *)0;
    res2 = SWIG_AsPtr_std_wstring(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_naf_ActivateLayer" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_naf_ActivateLayer" "', argument " "2"" of type '" "std::wstring const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "output_naf_ActivateLayer" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->ActivateLayer((std::wstring const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *output_naf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_naf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_train")) SWIG_fail;
  result = (freeling::io::output_train *)new freeling::io::output_train();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_train, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_output_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *arg1 = (freeling::io::output_train *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_train",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_train, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_train" "', argument " "1"" of type '" "freeling::io::output_train *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_train * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_train_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *arg1 = (freeling::io::output_train *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_train_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_train, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_train_PrintResults" "', argument " "1"" of type '" "freeling::io::output_train const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_train * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_train_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_train const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_train_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *arg1 = (freeling::io::output_train *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_train_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_train, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_train_PrintResults" "', argument " "1"" of type '" "freeling::io::output_train const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_train * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_train_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_train const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_train_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *arg1 = (freeling::io::output_train *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_train_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_train, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_train_PrintResults" "', argument " "1"" of type '" "freeling::io::output_train const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_train * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_train const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_train_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_train *arg1 = (freeling::io::output_train *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_train_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_train, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_train_PrintResults" "', argument " "1"" of type '" "freeling::io::output_train const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_train * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_train_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_train const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_train_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_train, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_train_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_train, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_train_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_train, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_train_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_train, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_train_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_train_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_train::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_train::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_train::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_train::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *output_train_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_train, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_output_xml__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_output_xml")) SWIG_fail;
  result = (freeling::io::output_xml *)new freeling::io::output_xml();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_xml, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_xml__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::wstring *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  freeling::io::output_xml *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_output_xml",&obj0)) SWIG_fail;
  {
    std::wstring *ptr = (std::wstring *)0;
    res1 = SWIG_AsPtr_std_wstring(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_output_xml" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_output_xml" "', argument " "1"" of type '" "std::wstring const &""'"); 
    }
    arg1 = ptr;
  }
  result = (freeling::io::output_xml *)new freeling::io::output_xml((std::wstring const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_freeling__io__output_xml, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_output_xml(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_output_xml__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_wstring(argv[0], (std::wstring**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_output_xml__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_output_xml'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_xml::output_xml()\n"
    "    freeling::io::output_xml::output_xml(std::wstring const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_output_xml(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_output_xml",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_output_xml" "', argument " "1"" of type '" "freeling::io::output_xml *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_xml_PrintHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintHeader" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintHeader" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_xml const *)arg1)->PrintHeader(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintFooter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  std::wostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_xml_PrintFooter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintFooter" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintFooter" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  ((freeling::io::output_xml const *)arg1)->PrintFooter(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintResults__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  std::wostream *arg2 = 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_xml_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintResults" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_xml_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "3"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg3 = ptr;
  }
  ((freeling::io::output_xml const *)arg1)->PrintResults(*arg2,(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintResults__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  std::wostream *arg2 = 0 ;
  freeling::document *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:output_xml_PrintResults",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintResults" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__wostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::wostream &""'"); 
  }
  arg2 = reinterpret_cast< std::wostream * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "output_xml_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "3"" of type '" "freeling::document const &""'"); 
  }
  arg3 = reinterpret_cast< freeling::document * >(argp3);
  ((freeling::io::output_xml const *)arg1)->PrintResults(*arg2,(freeling::document const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintResults__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  std::list< freeling::sentence,std::allocator< freeling::sentence > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_xml_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintResults" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  {
    std::list< freeling::sentence,std::allocator< freeling::sentence > > *ptr = (std::list< freeling::sentence,std::allocator< freeling::sentence > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "std::list< freeling::sentence,std::allocator< freeling::sentence > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((freeling::io::output_xml const *)arg1)->PrintResults((std::list< freeling::sentence,std::allocator< freeling::sentence > > const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintResults__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  freeling::io::output_xml *arg1 = (freeling::io::output_xml *) 0 ;
  freeling::document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::wstring result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:output_xml_PrintResults",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_freeling__io__output_xml, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "output_xml_PrintResults" "', argument " "1"" of type '" "freeling::io::output_xml const *""'"); 
  }
  arg1 = reinterpret_cast< freeling::io::output_xml * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_freeling__document,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "output_xml_PrintResults" "', argument " "2"" of type '" "freeling::document const &""'"); 
  }
  arg2 = reinterpret_cast< freeling::document * >(argp2);
  result = ((freeling::io::output_xml const *)arg1)->PrintResults((freeling::document const &)*arg2);
  resultobj = SWIG_From_std_wstring(static_cast< std::wstring >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_output_xml_PrintResults(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_xml, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_freeling__document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_xml_PrintResults__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_xml, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_output_xml_PrintResults__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_xml, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_freeling__document, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_xml_PrintResults__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_freeling__io__output_xml, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__wostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::list< freeling::sentence,std::allocator< freeling::sentence > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_output_xml_PrintResults__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'output_xml_PrintResults'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    freeling::io::output_xml::PrintResults(std::wostream &,std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_xml::PrintResults(std::wostream &,freeling::document const &) const\n"
    "    freeling::io::output_xml::PrintResults(std::list< freeling::sentence,std::allocator< freeling::sentence > > const &) const\n"
    "    freeling::io::output_xml::PrintResults(freeling::document const &) const\n");
  return 0;
}


SWIGINTERN PyObject *output_xml_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_freeling__io__output_xml, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorWord_iterator", _wrap_VectorWord_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorWord___nonzero__", _wrap_VectorWord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___bool__", _wrap_VectorWord___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___len__", _wrap_VectorWord___len__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___getslice__", _wrap_VectorWord___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___setslice__", _wrap_VectorWord___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___delslice__", _wrap_VectorWord___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___delitem__", _wrap_VectorWord___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___getitem__", _wrap_VectorWord___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorWord___setitem__", _wrap_VectorWord___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorWord_pop", _wrap_VectorWord_pop, METH_VARARGS, NULL},
	 { (char *)"VectorWord_append", _wrap_VectorWord_append, METH_VARARGS, NULL},
	 { (char *)"VectorWord_empty", _wrap_VectorWord_empty, METH_VARARGS, NULL},
	 { (char *)"VectorWord_size", _wrap_VectorWord_size, METH_VARARGS, NULL},
	 { (char *)"VectorWord_swap", _wrap_VectorWord_swap, METH_VARARGS, NULL},
	 { (char *)"VectorWord_begin", _wrap_VectorWord_begin, METH_VARARGS, NULL},
	 { (char *)"VectorWord_end", _wrap_VectorWord_end, METH_VARARGS, NULL},
	 { (char *)"VectorWord_rbegin", _wrap_VectorWord_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorWord_rend", _wrap_VectorWord_rend, METH_VARARGS, NULL},
	 { (char *)"VectorWord_clear", _wrap_VectorWord_clear, METH_VARARGS, NULL},
	 { (char *)"VectorWord_get_allocator", _wrap_VectorWord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorWord_pop_back", _wrap_VectorWord_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorWord_erase", _wrap_VectorWord_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorWord", _wrap_new_VectorWord, METH_VARARGS, NULL},
	 { (char *)"VectorWord_push_back", _wrap_VectorWord_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorWord_front", _wrap_VectorWord_front, METH_VARARGS, NULL},
	 { (char *)"VectorWord_back", _wrap_VectorWord_back, METH_VARARGS, NULL},
	 { (char *)"VectorWord_assign", _wrap_VectorWord_assign, METH_VARARGS, NULL},
	 { (char *)"VectorWord_resize", _wrap_VectorWord_resize, METH_VARARGS, NULL},
	 { (char *)"VectorWord_insert", _wrap_VectorWord_insert, METH_VARARGS, NULL},
	 { (char *)"VectorWord_reserve", _wrap_VectorWord_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorWord_capacity", _wrap_VectorWord_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorWord", _wrap_delete_VectorWord, METH_VARARGS, NULL},
	 { (char *)"VectorWord_swigregister", VectorWord_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListWord_iterator", _wrap_ListWord_iterator, METH_VARARGS, NULL},
	 { (char *)"ListWord___nonzero__", _wrap_ListWord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListWord___bool__", _wrap_ListWord___bool__, METH_VARARGS, NULL},
	 { (char *)"ListWord___len__", _wrap_ListWord___len__, METH_VARARGS, NULL},
	 { (char *)"ListWord___getslice__", _wrap_ListWord___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListWord___setslice__", _wrap_ListWord___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListWord___delslice__", _wrap_ListWord___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListWord___delitem__", _wrap_ListWord___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListWord___getitem__", _wrap_ListWord___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListWord___setitem__", _wrap_ListWord___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListWord_pop", _wrap_ListWord_pop, METH_VARARGS, NULL},
	 { (char *)"ListWord_append", _wrap_ListWord_append, METH_VARARGS, NULL},
	 { (char *)"ListWord_empty", _wrap_ListWord_empty, METH_VARARGS, NULL},
	 { (char *)"ListWord_size", _wrap_ListWord_size, METH_VARARGS, NULL},
	 { (char *)"ListWord_swap", _wrap_ListWord_swap, METH_VARARGS, NULL},
	 { (char *)"ListWord_begin", _wrap_ListWord_begin, METH_VARARGS, NULL},
	 { (char *)"ListWord_end", _wrap_ListWord_end, METH_VARARGS, NULL},
	 { (char *)"ListWord_rbegin", _wrap_ListWord_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListWord_rend", _wrap_ListWord_rend, METH_VARARGS, NULL},
	 { (char *)"ListWord_clear", _wrap_ListWord_clear, METH_VARARGS, NULL},
	 { (char *)"ListWord_get_allocator", _wrap_ListWord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListWord_pop_back", _wrap_ListWord_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListWord_erase", _wrap_ListWord_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListWord", _wrap_new_ListWord, METH_VARARGS, NULL},
	 { (char *)"ListWord_push_back", _wrap_ListWord_push_back, METH_VARARGS, NULL},
	 { (char *)"ListWord_front", _wrap_ListWord_front, METH_VARARGS, NULL},
	 { (char *)"ListWord_back", _wrap_ListWord_back, METH_VARARGS, NULL},
	 { (char *)"ListWord_assign", _wrap_ListWord_assign, METH_VARARGS, NULL},
	 { (char *)"ListWord_resize", _wrap_ListWord_resize, METH_VARARGS, NULL},
	 { (char *)"ListWord_insert", _wrap_ListWord_insert, METH_VARARGS, NULL},
	 { (char *)"ListWord_pop_front", _wrap_ListWord_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListWord_push_front", _wrap_ListWord_push_front, METH_VARARGS, NULL},
	 { (char *)"ListWord_reverse", _wrap_ListWord_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListWord", _wrap_delete_ListWord, METH_VARARGS, NULL},
	 { (char *)"ListWord_swigregister", ListWord_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_iterator", _wrap_ListAnalysis_iterator, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___nonzero__", _wrap_ListAnalysis___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___bool__", _wrap_ListAnalysis___bool__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___len__", _wrap_ListAnalysis___len__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___getslice__", _wrap_ListAnalysis___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___setslice__", _wrap_ListAnalysis___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___delslice__", _wrap_ListAnalysis___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___delitem__", _wrap_ListAnalysis___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___getitem__", _wrap_ListAnalysis___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis___setitem__", _wrap_ListAnalysis___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_pop", _wrap_ListAnalysis_pop, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_append", _wrap_ListAnalysis_append, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_empty", _wrap_ListAnalysis_empty, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_size", _wrap_ListAnalysis_size, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_swap", _wrap_ListAnalysis_swap, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_begin", _wrap_ListAnalysis_begin, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_end", _wrap_ListAnalysis_end, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_rbegin", _wrap_ListAnalysis_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_rend", _wrap_ListAnalysis_rend, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_clear", _wrap_ListAnalysis_clear, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_get_allocator", _wrap_ListAnalysis_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_pop_back", _wrap_ListAnalysis_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_erase", _wrap_ListAnalysis_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListAnalysis", _wrap_new_ListAnalysis, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_push_back", _wrap_ListAnalysis_push_back, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_front", _wrap_ListAnalysis_front, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_back", _wrap_ListAnalysis_back, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_assign", _wrap_ListAnalysis_assign, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_resize", _wrap_ListAnalysis_resize, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_insert", _wrap_ListAnalysis_insert, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_pop_front", _wrap_ListAnalysis_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_push_front", _wrap_ListAnalysis_push_front, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_reverse", _wrap_ListAnalysis_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListAnalysis", _wrap_delete_ListAnalysis, METH_VARARGS, NULL},
	 { (char *)"ListAnalysis_swigregister", ListAnalysis_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListSentence_iterator", _wrap_ListSentence_iterator, METH_VARARGS, NULL},
	 { (char *)"ListSentence___nonzero__", _wrap_ListSentence___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___bool__", _wrap_ListSentence___bool__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___len__", _wrap_ListSentence___len__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___getslice__", _wrap_ListSentence___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___setslice__", _wrap_ListSentence___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___delslice__", _wrap_ListSentence___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___delitem__", _wrap_ListSentence___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___getitem__", _wrap_ListSentence___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListSentence___setitem__", _wrap_ListSentence___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListSentence_pop", _wrap_ListSentence_pop, METH_VARARGS, NULL},
	 { (char *)"ListSentence_append", _wrap_ListSentence_append, METH_VARARGS, NULL},
	 { (char *)"ListSentence_empty", _wrap_ListSentence_empty, METH_VARARGS, NULL},
	 { (char *)"ListSentence_size", _wrap_ListSentence_size, METH_VARARGS, NULL},
	 { (char *)"ListSentence_swap", _wrap_ListSentence_swap, METH_VARARGS, NULL},
	 { (char *)"ListSentence_begin", _wrap_ListSentence_begin, METH_VARARGS, NULL},
	 { (char *)"ListSentence_end", _wrap_ListSentence_end, METH_VARARGS, NULL},
	 { (char *)"ListSentence_rbegin", _wrap_ListSentence_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListSentence_rend", _wrap_ListSentence_rend, METH_VARARGS, NULL},
	 { (char *)"ListSentence_clear", _wrap_ListSentence_clear, METH_VARARGS, NULL},
	 { (char *)"ListSentence_get_allocator", _wrap_ListSentence_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListSentence_pop_back", _wrap_ListSentence_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListSentence_erase", _wrap_ListSentence_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListSentence", _wrap_new_ListSentence, METH_VARARGS, NULL},
	 { (char *)"ListSentence_push_back", _wrap_ListSentence_push_back, METH_VARARGS, NULL},
	 { (char *)"ListSentence_front", _wrap_ListSentence_front, METH_VARARGS, NULL},
	 { (char *)"ListSentence_back", _wrap_ListSentence_back, METH_VARARGS, NULL},
	 { (char *)"ListSentence_assign", _wrap_ListSentence_assign, METH_VARARGS, NULL},
	 { (char *)"ListSentence_resize", _wrap_ListSentence_resize, METH_VARARGS, NULL},
	 { (char *)"ListSentence_insert", _wrap_ListSentence_insert, METH_VARARGS, NULL},
	 { (char *)"ListSentence_pop_front", _wrap_ListSentence_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListSentence_push_front", _wrap_ListSentence_push_front, METH_VARARGS, NULL},
	 { (char *)"ListSentence_reverse", _wrap_ListSentence_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListSentence", _wrap_delete_ListSentence, METH_VARARGS, NULL},
	 { (char *)"ListSentence_swigregister", ListSentence_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_iterator", _wrap_ListParagraph_iterator, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___nonzero__", _wrap_ListParagraph___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___bool__", _wrap_ListParagraph___bool__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___len__", _wrap_ListParagraph___len__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___getslice__", _wrap_ListParagraph___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___setslice__", _wrap_ListParagraph___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___delslice__", _wrap_ListParagraph___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___delitem__", _wrap_ListParagraph___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___getitem__", _wrap_ListParagraph___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph___setitem__", _wrap_ListParagraph___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_pop", _wrap_ListParagraph_pop, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_append", _wrap_ListParagraph_append, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_empty", _wrap_ListParagraph_empty, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_size", _wrap_ListParagraph_size, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_swap", _wrap_ListParagraph_swap, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_begin", _wrap_ListParagraph_begin, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_end", _wrap_ListParagraph_end, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_rbegin", _wrap_ListParagraph_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_rend", _wrap_ListParagraph_rend, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_clear", _wrap_ListParagraph_clear, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_get_allocator", _wrap_ListParagraph_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_pop_back", _wrap_ListParagraph_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_erase", _wrap_ListParagraph_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListParagraph", _wrap_new_ListParagraph, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_push_back", _wrap_ListParagraph_push_back, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_front", _wrap_ListParagraph_front, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_back", _wrap_ListParagraph_back, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_assign", _wrap_ListParagraph_assign, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_resize", _wrap_ListParagraph_resize, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_insert", _wrap_ListParagraph_insert, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_pop_front", _wrap_ListParagraph_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_push_front", _wrap_ListParagraph_push_front, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_reverse", _wrap_ListParagraph_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListParagraph", _wrap_delete_ListParagraph, METH_VARARGS, NULL},
	 { (char *)"ListParagraph_swigregister", ListParagraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_iterator", _wrap_VectorArgument_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___nonzero__", _wrap_VectorArgument___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___bool__", _wrap_VectorArgument___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___len__", _wrap_VectorArgument___len__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___getslice__", _wrap_VectorArgument___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___setslice__", _wrap_VectorArgument___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___delslice__", _wrap_VectorArgument___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___delitem__", _wrap_VectorArgument___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___getitem__", _wrap_VectorArgument___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument___setitem__", _wrap_VectorArgument___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_pop", _wrap_VectorArgument_pop, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_append", _wrap_VectorArgument_append, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_empty", _wrap_VectorArgument_empty, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_size", _wrap_VectorArgument_size, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_swap", _wrap_VectorArgument_swap, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_begin", _wrap_VectorArgument_begin, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_end", _wrap_VectorArgument_end, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_rbegin", _wrap_VectorArgument_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_rend", _wrap_VectorArgument_rend, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_clear", _wrap_VectorArgument_clear, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_get_allocator", _wrap_VectorArgument_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_pop_back", _wrap_VectorArgument_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_erase", _wrap_VectorArgument_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorArgument", _wrap_new_VectorArgument, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_push_back", _wrap_VectorArgument_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_front", _wrap_VectorArgument_front, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_back", _wrap_VectorArgument_back, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_assign", _wrap_VectorArgument_assign, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_resize", _wrap_VectorArgument_resize, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_insert", _wrap_VectorArgument_insert, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_reserve", _wrap_VectorArgument_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_capacity", _wrap_VectorArgument_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorArgument", _wrap_delete_VectorArgument, METH_VARARGS, NULL},
	 { (char *)"VectorArgument_swigregister", VectorArgument_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_iterator", _wrap_VectorPredicate_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___nonzero__", _wrap_VectorPredicate___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___bool__", _wrap_VectorPredicate___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___len__", _wrap_VectorPredicate___len__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___getslice__", _wrap_VectorPredicate___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___setslice__", _wrap_VectorPredicate___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___delslice__", _wrap_VectorPredicate___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___delitem__", _wrap_VectorPredicate___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___getitem__", _wrap_VectorPredicate___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate___setitem__", _wrap_VectorPredicate___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_pop", _wrap_VectorPredicate_pop, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_append", _wrap_VectorPredicate_append, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_empty", _wrap_VectorPredicate_empty, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_size", _wrap_VectorPredicate_size, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_swap", _wrap_VectorPredicate_swap, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_begin", _wrap_VectorPredicate_begin, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_end", _wrap_VectorPredicate_end, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_rbegin", _wrap_VectorPredicate_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_rend", _wrap_VectorPredicate_rend, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_clear", _wrap_VectorPredicate_clear, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_get_allocator", _wrap_VectorPredicate_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_pop_back", _wrap_VectorPredicate_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_erase", _wrap_VectorPredicate_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorPredicate", _wrap_new_VectorPredicate, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_push_back", _wrap_VectorPredicate_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_front", _wrap_VectorPredicate_front, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_back", _wrap_VectorPredicate_back, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_assign", _wrap_VectorPredicate_assign, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_resize", _wrap_VectorPredicate_resize, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_insert", _wrap_VectorPredicate_insert, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_reserve", _wrap_VectorPredicate_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_capacity", _wrap_VectorPredicate_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorPredicate", _wrap_delete_VectorPredicate, METH_VARARGS, NULL},
	 { (char *)"VectorPredicate_swigregister", VectorPredicate_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_iterator", _wrap_VectorSGMention_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___nonzero__", _wrap_VectorSGMention___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___bool__", _wrap_VectorSGMention___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___len__", _wrap_VectorSGMention___len__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___getslice__", _wrap_VectorSGMention___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___setslice__", _wrap_VectorSGMention___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___delslice__", _wrap_VectorSGMention___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___delitem__", _wrap_VectorSGMention___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___getitem__", _wrap_VectorSGMention___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention___setitem__", _wrap_VectorSGMention___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_pop", _wrap_VectorSGMention_pop, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_append", _wrap_VectorSGMention_append, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_empty", _wrap_VectorSGMention_empty, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_size", _wrap_VectorSGMention_size, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_swap", _wrap_VectorSGMention_swap, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_begin", _wrap_VectorSGMention_begin, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_end", _wrap_VectorSGMention_end, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_rbegin", _wrap_VectorSGMention_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_rend", _wrap_VectorSGMention_rend, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_clear", _wrap_VectorSGMention_clear, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_get_allocator", _wrap_VectorSGMention_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_pop_back", _wrap_VectorSGMention_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_erase", _wrap_VectorSGMention_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorSGMention", _wrap_new_VectorSGMention, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_push_back", _wrap_VectorSGMention_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_front", _wrap_VectorSGMention_front, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_back", _wrap_VectorSGMention_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_assign", _wrap_VectorSGMention_assign, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_resize", _wrap_VectorSGMention_resize, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_insert", _wrap_VectorSGMention_insert, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_reserve", _wrap_VectorSGMention_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_capacity", _wrap_VectorSGMention_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorSGMention", _wrap_delete_VectorSGMention, METH_VARARGS, NULL},
	 { (char *)"VectorSGMention_swigregister", VectorSGMention_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_iterator", _wrap_VectorSGArgument_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___nonzero__", _wrap_VectorSGArgument___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___bool__", _wrap_VectorSGArgument___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___len__", _wrap_VectorSGArgument___len__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___getslice__", _wrap_VectorSGArgument___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___setslice__", _wrap_VectorSGArgument___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___delslice__", _wrap_VectorSGArgument___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___delitem__", _wrap_VectorSGArgument___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___getitem__", _wrap_VectorSGArgument___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument___setitem__", _wrap_VectorSGArgument___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_pop", _wrap_VectorSGArgument_pop, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_append", _wrap_VectorSGArgument_append, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_empty", _wrap_VectorSGArgument_empty, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_size", _wrap_VectorSGArgument_size, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_swap", _wrap_VectorSGArgument_swap, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_begin", _wrap_VectorSGArgument_begin, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_end", _wrap_VectorSGArgument_end, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_rbegin", _wrap_VectorSGArgument_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_rend", _wrap_VectorSGArgument_rend, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_clear", _wrap_VectorSGArgument_clear, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_get_allocator", _wrap_VectorSGArgument_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_pop_back", _wrap_VectorSGArgument_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_erase", _wrap_VectorSGArgument_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorSGArgument", _wrap_new_VectorSGArgument, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_push_back", _wrap_VectorSGArgument_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_front", _wrap_VectorSGArgument_front, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_back", _wrap_VectorSGArgument_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_assign", _wrap_VectorSGArgument_assign, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_resize", _wrap_VectorSGArgument_resize, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_insert", _wrap_VectorSGArgument_insert, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_reserve", _wrap_VectorSGArgument_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_capacity", _wrap_VectorSGArgument_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorSGArgument", _wrap_delete_VectorSGArgument, METH_VARARGS, NULL},
	 { (char *)"VectorSGArgument_swigregister", VectorSGArgument_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_iterator", _wrap_VectorSGEntity_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___nonzero__", _wrap_VectorSGEntity___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___bool__", _wrap_VectorSGEntity___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___len__", _wrap_VectorSGEntity___len__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___getslice__", _wrap_VectorSGEntity___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___setslice__", _wrap_VectorSGEntity___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___delslice__", _wrap_VectorSGEntity___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___delitem__", _wrap_VectorSGEntity___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___getitem__", _wrap_VectorSGEntity___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity___setitem__", _wrap_VectorSGEntity___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_pop", _wrap_VectorSGEntity_pop, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_append", _wrap_VectorSGEntity_append, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_empty", _wrap_VectorSGEntity_empty, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_size", _wrap_VectorSGEntity_size, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_swap", _wrap_VectorSGEntity_swap, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_begin", _wrap_VectorSGEntity_begin, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_end", _wrap_VectorSGEntity_end, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_rbegin", _wrap_VectorSGEntity_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_rend", _wrap_VectorSGEntity_rend, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_clear", _wrap_VectorSGEntity_clear, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_get_allocator", _wrap_VectorSGEntity_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_pop_back", _wrap_VectorSGEntity_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_erase", _wrap_VectorSGEntity_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorSGEntity", _wrap_new_VectorSGEntity, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_push_back", _wrap_VectorSGEntity_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_front", _wrap_VectorSGEntity_front, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_back", _wrap_VectorSGEntity_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_assign", _wrap_VectorSGEntity_assign, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_resize", _wrap_VectorSGEntity_resize, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_insert", _wrap_VectorSGEntity_insert, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_reserve", _wrap_VectorSGEntity_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_capacity", _wrap_VectorSGEntity_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorSGEntity", _wrap_delete_VectorSGEntity, METH_VARARGS, NULL},
	 { (char *)"VectorSGEntity_swigregister", VectorSGEntity_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_iterator", _wrap_VectorSGFrame_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___nonzero__", _wrap_VectorSGFrame___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___bool__", _wrap_VectorSGFrame___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___len__", _wrap_VectorSGFrame___len__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___getslice__", _wrap_VectorSGFrame___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___setslice__", _wrap_VectorSGFrame___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___delslice__", _wrap_VectorSGFrame___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___delitem__", _wrap_VectorSGFrame___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___getitem__", _wrap_VectorSGFrame___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame___setitem__", _wrap_VectorSGFrame___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_pop", _wrap_VectorSGFrame_pop, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_append", _wrap_VectorSGFrame_append, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_empty", _wrap_VectorSGFrame_empty, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_size", _wrap_VectorSGFrame_size, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_swap", _wrap_VectorSGFrame_swap, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_begin", _wrap_VectorSGFrame_begin, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_end", _wrap_VectorSGFrame_end, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_rbegin", _wrap_VectorSGFrame_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_rend", _wrap_VectorSGFrame_rend, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_clear", _wrap_VectorSGFrame_clear, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_get_allocator", _wrap_VectorSGFrame_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_pop_back", _wrap_VectorSGFrame_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_erase", _wrap_VectorSGFrame_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorSGFrame", _wrap_new_VectorSGFrame, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_push_back", _wrap_VectorSGFrame_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_front", _wrap_VectorSGFrame_front, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_back", _wrap_VectorSGFrame_back, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_assign", _wrap_VectorSGFrame_assign, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_resize", _wrap_VectorSGFrame_resize, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_insert", _wrap_VectorSGFrame_insert, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_reserve", _wrap_VectorSGFrame_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_capacity", _wrap_VectorSGFrame_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorSGFrame", _wrap_delete_VectorSGFrame, METH_VARARGS, NULL},
	 { (char *)"VectorSGFrame_swigregister", VectorSGFrame_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListString_iterator", _wrap_ListString_iterator, METH_VARARGS, NULL},
	 { (char *)"ListString___nonzero__", _wrap_ListString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListString___bool__", _wrap_ListString___bool__, METH_VARARGS, NULL},
	 { (char *)"ListString___len__", _wrap_ListString___len__, METH_VARARGS, NULL},
	 { (char *)"ListString___getslice__", _wrap_ListString___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListString___setslice__", _wrap_ListString___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListString___delslice__", _wrap_ListString___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListString___delitem__", _wrap_ListString___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListString___getitem__", _wrap_ListString___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListString___setitem__", _wrap_ListString___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListString_pop", _wrap_ListString_pop, METH_VARARGS, NULL},
	 { (char *)"ListString_append", _wrap_ListString_append, METH_VARARGS, NULL},
	 { (char *)"ListString_empty", _wrap_ListString_empty, METH_VARARGS, NULL},
	 { (char *)"ListString_size", _wrap_ListString_size, METH_VARARGS, NULL},
	 { (char *)"ListString_swap", _wrap_ListString_swap, METH_VARARGS, NULL},
	 { (char *)"ListString_begin", _wrap_ListString_begin, METH_VARARGS, NULL},
	 { (char *)"ListString_end", _wrap_ListString_end, METH_VARARGS, NULL},
	 { (char *)"ListString_rbegin", _wrap_ListString_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListString_rend", _wrap_ListString_rend, METH_VARARGS, NULL},
	 { (char *)"ListString_clear", _wrap_ListString_clear, METH_VARARGS, NULL},
	 { (char *)"ListString_get_allocator", _wrap_ListString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListString_pop_back", _wrap_ListString_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListString_erase", _wrap_ListString_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListString", _wrap_new_ListString, METH_VARARGS, NULL},
	 { (char *)"ListString_push_back", _wrap_ListString_push_back, METH_VARARGS, NULL},
	 { (char *)"ListString_front", _wrap_ListString_front, METH_VARARGS, NULL},
	 { (char *)"ListString_back", _wrap_ListString_back, METH_VARARGS, NULL},
	 { (char *)"ListString_assign", _wrap_ListString_assign, METH_VARARGS, NULL},
	 { (char *)"ListString_resize", _wrap_ListString_resize, METH_VARARGS, NULL},
	 { (char *)"ListString_insert", _wrap_ListString_insert, METH_VARARGS, NULL},
	 { (char *)"ListString_pop_front", _wrap_ListString_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListString_push_front", _wrap_ListString_push_front, METH_VARARGS, NULL},
	 { (char *)"ListString_reverse", _wrap_ListString_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListString", _wrap_delete_ListString, METH_VARARGS, NULL},
	 { (char *)"ListString_swigregister", ListString_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListInt_iterator", _wrap_ListInt_iterator, METH_VARARGS, NULL},
	 { (char *)"ListInt___nonzero__", _wrap_ListInt___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListInt___bool__", _wrap_ListInt___bool__, METH_VARARGS, NULL},
	 { (char *)"ListInt___len__", _wrap_ListInt___len__, METH_VARARGS, NULL},
	 { (char *)"ListInt___getslice__", _wrap_ListInt___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListInt___setslice__", _wrap_ListInt___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListInt___delslice__", _wrap_ListInt___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListInt___delitem__", _wrap_ListInt___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListInt___getitem__", _wrap_ListInt___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListInt___setitem__", _wrap_ListInt___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListInt_pop", _wrap_ListInt_pop, METH_VARARGS, NULL},
	 { (char *)"ListInt_append", _wrap_ListInt_append, METH_VARARGS, NULL},
	 { (char *)"ListInt_empty", _wrap_ListInt_empty, METH_VARARGS, NULL},
	 { (char *)"ListInt_size", _wrap_ListInt_size, METH_VARARGS, NULL},
	 { (char *)"ListInt_swap", _wrap_ListInt_swap, METH_VARARGS, NULL},
	 { (char *)"ListInt_begin", _wrap_ListInt_begin, METH_VARARGS, NULL},
	 { (char *)"ListInt_end", _wrap_ListInt_end, METH_VARARGS, NULL},
	 { (char *)"ListInt_rbegin", _wrap_ListInt_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListInt_rend", _wrap_ListInt_rend, METH_VARARGS, NULL},
	 { (char *)"ListInt_clear", _wrap_ListInt_clear, METH_VARARGS, NULL},
	 { (char *)"ListInt_get_allocator", _wrap_ListInt_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListInt_pop_back", _wrap_ListInt_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListInt_erase", _wrap_ListInt_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListInt", _wrap_new_ListInt, METH_VARARGS, NULL},
	 { (char *)"ListInt_push_back", _wrap_ListInt_push_back, METH_VARARGS, NULL},
	 { (char *)"ListInt_front", _wrap_ListInt_front, METH_VARARGS, NULL},
	 { (char *)"ListInt_back", _wrap_ListInt_back, METH_VARARGS, NULL},
	 { (char *)"ListInt_assign", _wrap_ListInt_assign, METH_VARARGS, NULL},
	 { (char *)"ListInt_resize", _wrap_ListInt_resize, METH_VARARGS, NULL},
	 { (char *)"ListInt_insert", _wrap_ListInt_insert, METH_VARARGS, NULL},
	 { (char *)"ListInt_pop_front", _wrap_ListInt_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListInt_push_front", _wrap_ListInt_push_front, METH_VARARGS, NULL},
	 { (char *)"ListInt_reverse", _wrap_ListInt_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListInt", _wrap_delete_ListInt, METH_VARARGS, NULL},
	 { (char *)"ListInt_swigregister", ListInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_iterator", _wrap_VectorListInt_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___nonzero__", _wrap_VectorListInt___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___bool__", _wrap_VectorListInt___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___len__", _wrap_VectorListInt___len__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___getslice__", _wrap_VectorListInt___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___setslice__", _wrap_VectorListInt___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___delslice__", _wrap_VectorListInt___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___delitem__", _wrap_VectorListInt___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___getitem__", _wrap_VectorListInt___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt___setitem__", _wrap_VectorListInt___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_pop", _wrap_VectorListInt_pop, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_append", _wrap_VectorListInt_append, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_empty", _wrap_VectorListInt_empty, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_size", _wrap_VectorListInt_size, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_swap", _wrap_VectorListInt_swap, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_begin", _wrap_VectorListInt_begin, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_end", _wrap_VectorListInt_end, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_rbegin", _wrap_VectorListInt_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_rend", _wrap_VectorListInt_rend, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_clear", _wrap_VectorListInt_clear, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_get_allocator", _wrap_VectorListInt_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_pop_back", _wrap_VectorListInt_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_erase", _wrap_VectorListInt_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorListInt", _wrap_new_VectorListInt, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_push_back", _wrap_VectorListInt_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_front", _wrap_VectorListInt_front, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_back", _wrap_VectorListInt_back, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_assign", _wrap_VectorListInt_assign, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_resize", _wrap_VectorListInt_resize, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_insert", _wrap_VectorListInt_insert, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_reserve", _wrap_VectorListInt_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_capacity", _wrap_VectorListInt_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorListInt", _wrap_delete_VectorListInt, METH_VARARGS, NULL},
	 { (char *)"VectorListInt_swigregister", VectorListInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorListString_iterator", _wrap_VectorListString_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorListString___nonzero__", _wrap_VectorListString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___bool__", _wrap_VectorListString___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___len__", _wrap_VectorListString___len__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___getslice__", _wrap_VectorListString___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___setslice__", _wrap_VectorListString___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___delslice__", _wrap_VectorListString___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___delitem__", _wrap_VectorListString___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___getitem__", _wrap_VectorListString___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListString___setitem__", _wrap_VectorListString___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorListString_pop", _wrap_VectorListString_pop, METH_VARARGS, NULL},
	 { (char *)"VectorListString_append", _wrap_VectorListString_append, METH_VARARGS, NULL},
	 { (char *)"VectorListString_empty", _wrap_VectorListString_empty, METH_VARARGS, NULL},
	 { (char *)"VectorListString_size", _wrap_VectorListString_size, METH_VARARGS, NULL},
	 { (char *)"VectorListString_swap", _wrap_VectorListString_swap, METH_VARARGS, NULL},
	 { (char *)"VectorListString_begin", _wrap_VectorListString_begin, METH_VARARGS, NULL},
	 { (char *)"VectorListString_end", _wrap_VectorListString_end, METH_VARARGS, NULL},
	 { (char *)"VectorListString_rbegin", _wrap_VectorListString_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorListString_rend", _wrap_VectorListString_rend, METH_VARARGS, NULL},
	 { (char *)"VectorListString_clear", _wrap_VectorListString_clear, METH_VARARGS, NULL},
	 { (char *)"VectorListString_get_allocator", _wrap_VectorListString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorListString_pop_back", _wrap_VectorListString_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorListString_erase", _wrap_VectorListString_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorListString", _wrap_new_VectorListString, METH_VARARGS, NULL},
	 { (char *)"VectorListString_push_back", _wrap_VectorListString_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorListString_front", _wrap_VectorListString_front, METH_VARARGS, NULL},
	 { (char *)"VectorListString_back", _wrap_VectorListString_back, METH_VARARGS, NULL},
	 { (char *)"VectorListString_assign", _wrap_VectorListString_assign, METH_VARARGS, NULL},
	 { (char *)"VectorListString_resize", _wrap_VectorListString_resize, METH_VARARGS, NULL},
	 { (char *)"VectorListString_insert", _wrap_VectorListString_insert, METH_VARARGS, NULL},
	 { (char *)"VectorListString_reserve", _wrap_VectorListString_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorListString_capacity", _wrap_VectorListString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorListString", _wrap_delete_VectorListString, METH_VARARGS, NULL},
	 { (char *)"VectorListString_swigregister", VectorListString_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorString_iterator", _wrap_VectorString_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorString___nonzero__", _wrap_VectorString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorString___bool__", _wrap_VectorString___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorString___len__", _wrap_VectorString___len__, METH_VARARGS, NULL},
	 { (char *)"VectorString___getslice__", _wrap_VectorString___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___setslice__", _wrap_VectorString___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___delslice__", _wrap_VectorString___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorString___delitem__", _wrap_VectorString___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString___getitem__", _wrap_VectorString___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString___setitem__", _wrap_VectorString___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorString_pop", _wrap_VectorString_pop, METH_VARARGS, NULL},
	 { (char *)"VectorString_append", _wrap_VectorString_append, METH_VARARGS, NULL},
	 { (char *)"VectorString_empty", _wrap_VectorString_empty, METH_VARARGS, NULL},
	 { (char *)"VectorString_size", _wrap_VectorString_size, METH_VARARGS, NULL},
	 { (char *)"VectorString_swap", _wrap_VectorString_swap, METH_VARARGS, NULL},
	 { (char *)"VectorString_begin", _wrap_VectorString_begin, METH_VARARGS, NULL},
	 { (char *)"VectorString_end", _wrap_VectorString_end, METH_VARARGS, NULL},
	 { (char *)"VectorString_rbegin", _wrap_VectorString_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorString_rend", _wrap_VectorString_rend, METH_VARARGS, NULL},
	 { (char *)"VectorString_clear", _wrap_VectorString_clear, METH_VARARGS, NULL},
	 { (char *)"VectorString_get_allocator", _wrap_VectorString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorString_pop_back", _wrap_VectorString_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorString_erase", _wrap_VectorString_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorString", _wrap_new_VectorString, METH_VARARGS, NULL},
	 { (char *)"VectorString_push_back", _wrap_VectorString_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorString_front", _wrap_VectorString_front, METH_VARARGS, NULL},
	 { (char *)"VectorString_back", _wrap_VectorString_back, METH_VARARGS, NULL},
	 { (char *)"VectorString_assign", _wrap_VectorString_assign, METH_VARARGS, NULL},
	 { (char *)"VectorString_resize", _wrap_VectorString_resize, METH_VARARGS, NULL},
	 { (char *)"VectorString_insert", _wrap_VectorString_insert, METH_VARARGS, NULL},
	 { (char *)"VectorString_reserve", _wrap_VectorString_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorString_capacity", _wrap_VectorString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorString", _wrap_delete_VectorString, METH_VARARGS, NULL},
	 { (char *)"VectorString_swigregister", VectorString_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PairDoubleString", _wrap_new_PairDoubleString, METH_VARARGS, NULL},
	 { (char *)"PairDoubleString_first_set", _wrap_PairDoubleString_first_set, METH_VARARGS, NULL},
	 { (char *)"PairDoubleString_first_get", _wrap_PairDoubleString_first_get, METH_VARARGS, NULL},
	 { (char *)"PairDoubleString_second_set", _wrap_PairDoubleString_second_set, METH_VARARGS, NULL},
	 { (char *)"PairDoubleString_second_get", _wrap_PairDoubleString_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_PairDoubleString", _wrap_delete_PairDoubleString, METH_VARARGS, NULL},
	 { (char *)"PairDoubleString_swigregister", PairDoubleString_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_iterator", _wrap_VectorPairDoubleString_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___nonzero__", _wrap_VectorPairDoubleString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___bool__", _wrap_VectorPairDoubleString___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___len__", _wrap_VectorPairDoubleString___len__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___getslice__", _wrap_VectorPairDoubleString___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___setslice__", _wrap_VectorPairDoubleString___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___delslice__", _wrap_VectorPairDoubleString___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___delitem__", _wrap_VectorPairDoubleString___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___getitem__", _wrap_VectorPairDoubleString___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString___setitem__", _wrap_VectorPairDoubleString___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_pop", _wrap_VectorPairDoubleString_pop, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_append", _wrap_VectorPairDoubleString_append, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_empty", _wrap_VectorPairDoubleString_empty, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_size", _wrap_VectorPairDoubleString_size, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_swap", _wrap_VectorPairDoubleString_swap, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_begin", _wrap_VectorPairDoubleString_begin, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_end", _wrap_VectorPairDoubleString_end, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_rbegin", _wrap_VectorPairDoubleString_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_rend", _wrap_VectorPairDoubleString_rend, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_clear", _wrap_VectorPairDoubleString_clear, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_get_allocator", _wrap_VectorPairDoubleString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_pop_back", _wrap_VectorPairDoubleString_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_erase", _wrap_VectorPairDoubleString_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorPairDoubleString", _wrap_new_VectorPairDoubleString, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_push_back", _wrap_VectorPairDoubleString_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_front", _wrap_VectorPairDoubleString_front, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_back", _wrap_VectorPairDoubleString_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_assign", _wrap_VectorPairDoubleString_assign, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_resize", _wrap_VectorPairDoubleString_resize, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_insert", _wrap_VectorPairDoubleString_insert, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_reserve", _wrap_VectorPairDoubleString_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_capacity", _wrap_VectorPairDoubleString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorPairDoubleString", _wrap_delete_VectorPairDoubleString, METH_VARARGS, NULL},
	 { (char *)"VectorPairDoubleString_swigregister", VectorPairDoubleString_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PairStringString", _wrap_new_PairStringString, METH_VARARGS, NULL},
	 { (char *)"PairStringString_first_set", _wrap_PairStringString_first_set, METH_VARARGS, NULL},
	 { (char *)"PairStringString_first_get", _wrap_PairStringString_first_get, METH_VARARGS, NULL},
	 { (char *)"PairStringString_second_set", _wrap_PairStringString_second_set, METH_VARARGS, NULL},
	 { (char *)"PairStringString_second_get", _wrap_PairStringString_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_PairStringString", _wrap_delete_PairStringString, METH_VARARGS, NULL},
	 { (char *)"PairStringString_swigregister", PairStringString_swigregister, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_iterator", _wrap_VectorPairStringString_iterator, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___nonzero__", _wrap_VectorPairStringString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___bool__", _wrap_VectorPairStringString___bool__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___len__", _wrap_VectorPairStringString___len__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___getslice__", _wrap_VectorPairStringString___getslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___setslice__", _wrap_VectorPairStringString___setslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___delslice__", _wrap_VectorPairStringString___delslice__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___delitem__", _wrap_VectorPairStringString___delitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___getitem__", _wrap_VectorPairStringString___getitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString___setitem__", _wrap_VectorPairStringString___setitem__, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_pop", _wrap_VectorPairStringString_pop, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_append", _wrap_VectorPairStringString_append, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_empty", _wrap_VectorPairStringString_empty, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_size", _wrap_VectorPairStringString_size, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_swap", _wrap_VectorPairStringString_swap, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_begin", _wrap_VectorPairStringString_begin, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_end", _wrap_VectorPairStringString_end, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_rbegin", _wrap_VectorPairStringString_rbegin, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_rend", _wrap_VectorPairStringString_rend, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_clear", _wrap_VectorPairStringString_clear, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_get_allocator", _wrap_VectorPairStringString_get_allocator, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_pop_back", _wrap_VectorPairStringString_pop_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_erase", _wrap_VectorPairStringString_erase, METH_VARARGS, NULL},
	 { (char *)"new_VectorPairStringString", _wrap_new_VectorPairStringString, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_push_back", _wrap_VectorPairStringString_push_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_front", _wrap_VectorPairStringString_front, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_back", _wrap_VectorPairStringString_back, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_assign", _wrap_VectorPairStringString_assign, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_resize", _wrap_VectorPairStringString_resize, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_insert", _wrap_VectorPairStringString_insert, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_reserve", _wrap_VectorPairStringString_reserve, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_capacity", _wrap_VectorPairStringString_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_VectorPairStringString", _wrap_delete_VectorPairStringString, METH_VARARGS, NULL},
	 { (char *)"VectorPairStringString_swigregister", VectorPairStringString_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PairStringInt", _wrap_new_PairStringInt, METH_VARARGS, NULL},
	 { (char *)"PairStringInt_first_set", _wrap_PairStringInt_first_set, METH_VARARGS, NULL},
	 { (char *)"PairStringInt_first_get", _wrap_PairStringInt_first_get, METH_VARARGS, NULL},
	 { (char *)"PairStringInt_second_set", _wrap_PairStringInt_second_set, METH_VARARGS, NULL},
	 { (char *)"PairStringInt_second_get", _wrap_PairStringInt_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_PairStringInt", _wrap_delete_PairStringInt, METH_VARARGS, NULL},
	 { (char *)"PairStringInt_swigregister", PairStringInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PairStringDouble", _wrap_new_PairStringDouble, METH_VARARGS, NULL},
	 { (char *)"PairStringDouble_first_set", _wrap_PairStringDouble_first_set, METH_VARARGS, NULL},
	 { (char *)"PairStringDouble_first_get", _wrap_PairStringDouble_first_get, METH_VARARGS, NULL},
	 { (char *)"PairStringDouble_second_set", _wrap_PairStringDouble_second_set, METH_VARARGS, NULL},
	 { (char *)"PairStringDouble_second_get", _wrap_PairStringDouble_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_PairStringDouble", _wrap_delete_PairStringDouble, METH_VARARGS, NULL},
	 { (char *)"PairStringDouble_swigregister", PairStringDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_iterator", _wrap_ListPairStringDouble_iterator, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___nonzero__", _wrap_ListPairStringDouble___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___bool__", _wrap_ListPairStringDouble___bool__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___len__", _wrap_ListPairStringDouble___len__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___getslice__", _wrap_ListPairStringDouble___getslice__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___setslice__", _wrap_ListPairStringDouble___setslice__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___delslice__", _wrap_ListPairStringDouble___delslice__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___delitem__", _wrap_ListPairStringDouble___delitem__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___getitem__", _wrap_ListPairStringDouble___getitem__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble___setitem__", _wrap_ListPairStringDouble___setitem__, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_pop", _wrap_ListPairStringDouble_pop, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_append", _wrap_ListPairStringDouble_append, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_empty", _wrap_ListPairStringDouble_empty, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_size", _wrap_ListPairStringDouble_size, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_swap", _wrap_ListPairStringDouble_swap, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_begin", _wrap_ListPairStringDouble_begin, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_end", _wrap_ListPairStringDouble_end, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_rbegin", _wrap_ListPairStringDouble_rbegin, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_rend", _wrap_ListPairStringDouble_rend, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_clear", _wrap_ListPairStringDouble_clear, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_get_allocator", _wrap_ListPairStringDouble_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_pop_back", _wrap_ListPairStringDouble_pop_back, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_erase", _wrap_ListPairStringDouble_erase, METH_VARARGS, NULL},
	 { (char *)"new_ListPairStringDouble", _wrap_new_ListPairStringDouble, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_push_back", _wrap_ListPairStringDouble_push_back, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_front", _wrap_ListPairStringDouble_front, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_back", _wrap_ListPairStringDouble_back, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_assign", _wrap_ListPairStringDouble_assign, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_resize", _wrap_ListPairStringDouble_resize, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_insert", _wrap_ListPairStringDouble_insert, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_pop_front", _wrap_ListPairStringDouble_pop_front, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_push_front", _wrap_ListPairStringDouble_push_front, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_reverse", _wrap_ListPairStringDouble_reverse, METH_VARARGS, NULL},
	 { (char *)"delete_ListPairStringDouble", _wrap_delete_ListPairStringDouble, METH_VARARGS, NULL},
	 { (char *)"ListPairStringDouble_swigregister", ListPairStringDouble_swigregister, METH_VARARGS, NULL},
	 { (char *)"SetString_iterator", _wrap_SetString_iterator, METH_VARARGS, NULL},
	 { (char *)"SetString___nonzero__", _wrap_SetString___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SetString___bool__", _wrap_SetString___bool__, METH_VARARGS, NULL},
	 { (char *)"SetString___len__", _wrap_SetString___len__, METH_VARARGS, NULL},
	 { (char *)"SetString_append", _wrap_SetString_append, METH_VARARGS, NULL},
	 { (char *)"SetString___contains__", _wrap_SetString___contains__, METH_VARARGS, NULL},
	 { (char *)"SetString___getitem__", _wrap_SetString___getitem__, METH_VARARGS, NULL},
	 { (char *)"SetString_add", _wrap_SetString_add, METH_VARARGS, NULL},
	 { (char *)"SetString_discard", _wrap_SetString_discard, METH_VARARGS, NULL},
	 { (char *)"new_SetString", _wrap_new_SetString, METH_VARARGS, NULL},
	 { (char *)"SetString_empty", _wrap_SetString_empty, METH_VARARGS, NULL},
	 { (char *)"SetString_size", _wrap_SetString_size, METH_VARARGS, NULL},
	 { (char *)"SetString_clear", _wrap_SetString_clear, METH_VARARGS, NULL},
	 { (char *)"SetString_swap", _wrap_SetString_swap, METH_VARARGS, NULL},
	 { (char *)"SetString_count", _wrap_SetString_count, METH_VARARGS, NULL},
	 { (char *)"SetString_begin", _wrap_SetString_begin, METH_VARARGS, NULL},
	 { (char *)"SetString_end", _wrap_SetString_end, METH_VARARGS, NULL},
	 { (char *)"SetString_rbegin", _wrap_SetString_rbegin, METH_VARARGS, NULL},
	 { (char *)"SetString_rend", _wrap_SetString_rend, METH_VARARGS, NULL},
	 { (char *)"SetString_erase", _wrap_SetString_erase, METH_VARARGS, NULL},
	 { (char *)"SetString_find", _wrap_SetString_find, METH_VARARGS, NULL},
	 { (char *)"SetString_lower_bound", _wrap_SetString_lower_bound, METH_VARARGS, NULL},
	 { (char *)"SetString_upper_bound", _wrap_SetString_upper_bound, METH_VARARGS, NULL},
	 { (char *)"SetString_equal_range", _wrap_SetString_equal_range, METH_VARARGS, NULL},
	 { (char *)"SetString_insert", _wrap_SetString_insert, METH_VARARGS, NULL},
	 { (char *)"delete_SetString", _wrap_delete_SetString, METH_VARARGS, NULL},
	 { (char *)"SetString_swigregister", SetString_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeOfNode", _wrap_new_TreeOfNode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeOfNode", _wrap_delete_TreeOfNode, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_clear", _wrap_TreeOfNode_clear, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_is_root", _wrap_TreeOfNode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_empty", _wrap_TreeOfNode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_num_children", _wrap_TreeOfNode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_has_ancestor", _wrap_TreeOfNode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_add_child", _wrap_TreeOfNode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_hang_child", _wrap_TreeOfNode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_nth_child", _wrap_TreeOfNode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_nth_child_ref", _wrap_TreeOfNode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_get_parent", _wrap_TreeOfNode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_begin", _wrap_TreeOfNode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_end", _wrap_TreeOfNode_end, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_sibling_begin", _wrap_TreeOfNode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_sibling_end", _wrap_TreeOfNode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_sibling_rbegin", _wrap_TreeOfNode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_sibling_rend", _wrap_TreeOfNode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeOfNode_swigregister", TreeOfNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeOfDepnode", _wrap_new_TreeOfDepnode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeOfDepnode", _wrap_delete_TreeOfDepnode, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_clear", _wrap_TreeOfDepnode_clear, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_is_root", _wrap_TreeOfDepnode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_empty", _wrap_TreeOfDepnode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_num_children", _wrap_TreeOfDepnode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_has_ancestor", _wrap_TreeOfDepnode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_add_child", _wrap_TreeOfDepnode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_hang_child", _wrap_TreeOfDepnode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_nth_child", _wrap_TreeOfDepnode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_nth_child_ref", _wrap_TreeOfDepnode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_get_parent", _wrap_TreeOfDepnode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_begin", _wrap_TreeOfDepnode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_end", _wrap_TreeOfDepnode_end, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_sibling_begin", _wrap_TreeOfDepnode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_sibling_end", _wrap_TreeOfDepnode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_sibling_rbegin", _wrap_TreeOfDepnode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_sibling_rend", _wrap_TreeOfDepnode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeOfDepnode_swigregister", TreeOfDepnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreePreorderIteratorNode", _wrap_new_TreePreorderIteratorNode, METH_VARARGS, NULL},
	 { (char *)"delete_TreePreorderIteratorNode", _wrap_delete_TreePreorderIteratorNode, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode___eq__", _wrap_TreePreorderIteratorNode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode___ne__", _wrap_TreePreorderIteratorNode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode___ref__", _wrap_TreePreorderIteratorNode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode___deref__", _wrap_TreePreorderIteratorNode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_info", _wrap_TreePreorderIteratorNode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_is_defined", _wrap_TreePreorderIteratorNode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_is_root", _wrap_TreePreorderIteratorNode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_empty", _wrap_TreePreorderIteratorNode_empty, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_has_ancestor", _wrap_TreePreorderIteratorNode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_num_children", _wrap_TreePreorderIteratorNode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_parent", _wrap_TreePreorderIteratorNode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_nth_child", _wrap_TreePreorderIteratorNode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_nth_child_ref", _wrap_TreePreorderIteratorNode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_begin", _wrap_TreePreorderIteratorNode_begin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_end", _wrap_TreePreorderIteratorNode_end, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_sibling_begin", _wrap_TreePreorderIteratorNode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_sibling_end", _wrap_TreePreorderIteratorNode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_sibling_rbegin", _wrap_TreePreorderIteratorNode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_sibling_rend", _wrap_TreePreorderIteratorNode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_add_child", _wrap_TreePreorderIteratorNode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_hang_child", _wrap_TreePreorderIteratorNode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_node_id", _wrap_TreePreorderIteratorNode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_set_node_id", _wrap_TreePreorderIteratorNode_set_node_id, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_label", _wrap_TreePreorderIteratorNode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_has_word", _wrap_TreePreorderIteratorNode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_word", _wrap_TreePreorderIteratorNode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_set_label", _wrap_TreePreorderIteratorNode_set_label, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_set_word", _wrap_TreePreorderIteratorNode_set_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_is_head", _wrap_TreePreorderIteratorNode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_set_head", _wrap_TreePreorderIteratorNode_set_head, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_is_chunk", _wrap_TreePreorderIteratorNode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_set_chunk", _wrap_TreePreorderIteratorNode_set_chunk, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_get_chunk_ord", _wrap_TreePreorderIteratorNode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorNode_swigregister", TreePreorderIteratorNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeSiblingIteratorNode", _wrap_new_TreeSiblingIteratorNode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeSiblingIteratorNode", _wrap_delete_TreeSiblingIteratorNode, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode___ref__", _wrap_TreeSiblingIteratorNode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode___deref__", _wrap_TreeSiblingIteratorNode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_info", _wrap_TreeSiblingIteratorNode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode___eq__", _wrap_TreeSiblingIteratorNode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode___ne__", _wrap_TreeSiblingIteratorNode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_parent", _wrap_TreeSiblingIteratorNode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_nth_child", _wrap_TreeSiblingIteratorNode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_nth_child_ref", _wrap_TreeSiblingIteratorNode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_is_defined", _wrap_TreeSiblingIteratorNode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_is_root", _wrap_TreeSiblingIteratorNode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_empty", _wrap_TreeSiblingIteratorNode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_has_ancestor", _wrap_TreeSiblingIteratorNode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_num_children", _wrap_TreeSiblingIteratorNode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_begin", _wrap_TreeSiblingIteratorNode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_end", _wrap_TreeSiblingIteratorNode_end, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_sibling_begin", _wrap_TreeSiblingIteratorNode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_sibling_end", _wrap_TreeSiblingIteratorNode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_sibling_rbegin", _wrap_TreeSiblingIteratorNode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_sibling_rend", _wrap_TreeSiblingIteratorNode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_add_child", _wrap_TreeSiblingIteratorNode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_hang_child", _wrap_TreeSiblingIteratorNode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_node_id", _wrap_TreeSiblingIteratorNode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_set_node_id", _wrap_TreeSiblingIteratorNode_set_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_label", _wrap_TreeSiblingIteratorNode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_has_word", _wrap_TreeSiblingIteratorNode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_word", _wrap_TreeSiblingIteratorNode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_set_label", _wrap_TreeSiblingIteratorNode_set_label, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_set_word", _wrap_TreeSiblingIteratorNode_set_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_is_head", _wrap_TreeSiblingIteratorNode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_set_head", _wrap_TreeSiblingIteratorNode_set_head, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_is_chunk", _wrap_TreeSiblingIteratorNode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_set_chunk", _wrap_TreeSiblingIteratorNode_set_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_get_chunk_ord", _wrap_TreeSiblingIteratorNode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorNode_swigregister", TreeSiblingIteratorNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreePreorderIteratorDepnode", _wrap_new_TreePreorderIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"delete_TreePreorderIteratorDepnode", _wrap_delete_TreePreorderIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode___eq__", _wrap_TreePreorderIteratorDepnode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode___ne__", _wrap_TreePreorderIteratorDepnode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode___ref__", _wrap_TreePreorderIteratorDepnode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode___deref__", _wrap_TreePreorderIteratorDepnode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_info", _wrap_TreePreorderIteratorDepnode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_is_defined", _wrap_TreePreorderIteratorDepnode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_is_root", _wrap_TreePreorderIteratorDepnode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_empty", _wrap_TreePreorderIteratorDepnode_empty, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_has_ancestor", _wrap_TreePreorderIteratorDepnode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_num_children", _wrap_TreePreorderIteratorDepnode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_parent", _wrap_TreePreorderIteratorDepnode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_nth_child", _wrap_TreePreorderIteratorDepnode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_nth_child_ref", _wrap_TreePreorderIteratorDepnode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_begin", _wrap_TreePreorderIteratorDepnode_begin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_end", _wrap_TreePreorderIteratorDepnode_end, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_sibling_begin", _wrap_TreePreorderIteratorDepnode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_sibling_end", _wrap_TreePreorderIteratorDepnode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_sibling_rbegin", _wrap_TreePreorderIteratorDepnode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_sibling_rend", _wrap_TreePreorderIteratorDepnode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_add_child", _wrap_TreePreorderIteratorDepnode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_hang_child", _wrap_TreePreorderIteratorDepnode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_link", _wrap_TreePreorderIteratorDepnode_set_link, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_link", _wrap_TreePreorderIteratorDepnode_get_link, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_node_id", _wrap_TreePreorderIteratorDepnode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_node_id", _wrap_TreePreorderIteratorDepnode_set_node_id, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_label", _wrap_TreePreorderIteratorDepnode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_has_word", _wrap_TreePreorderIteratorDepnode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_word", _wrap_TreePreorderIteratorDepnode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_label", _wrap_TreePreorderIteratorDepnode_set_label, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_word", _wrap_TreePreorderIteratorDepnode_set_word, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_is_head", _wrap_TreePreorderIteratorDepnode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_head", _wrap_TreePreorderIteratorDepnode_set_head, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_is_chunk", _wrap_TreePreorderIteratorDepnode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_set_chunk", _wrap_TreePreorderIteratorDepnode_set_chunk, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_get_chunk_ord", _wrap_TreePreorderIteratorDepnode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreePreorderIteratorDepnode_swigregister", TreePreorderIteratorDepnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeSiblingIteratorDepnode", _wrap_new_TreeSiblingIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeSiblingIteratorDepnode", _wrap_delete_TreeSiblingIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode___ref__", _wrap_TreeSiblingIteratorDepnode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode___deref__", _wrap_TreeSiblingIteratorDepnode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_info", _wrap_TreeSiblingIteratorDepnode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode___eq__", _wrap_TreeSiblingIteratorDepnode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode___ne__", _wrap_TreeSiblingIteratorDepnode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_parent", _wrap_TreeSiblingIteratorDepnode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_nth_child", _wrap_TreeSiblingIteratorDepnode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_nth_child_ref", _wrap_TreeSiblingIteratorDepnode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_is_defined", _wrap_TreeSiblingIteratorDepnode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_is_root", _wrap_TreeSiblingIteratorDepnode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_empty", _wrap_TreeSiblingIteratorDepnode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_has_ancestor", _wrap_TreeSiblingIteratorDepnode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_num_children", _wrap_TreeSiblingIteratorDepnode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_begin", _wrap_TreeSiblingIteratorDepnode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_end", _wrap_TreeSiblingIteratorDepnode_end, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_sibling_begin", _wrap_TreeSiblingIteratorDepnode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_sibling_end", _wrap_TreeSiblingIteratorDepnode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_sibling_rbegin", _wrap_TreeSiblingIteratorDepnode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_sibling_rend", _wrap_TreeSiblingIteratorDepnode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_add_child", _wrap_TreeSiblingIteratorDepnode_add_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_hang_child", _wrap_TreeSiblingIteratorDepnode_hang_child, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_link", _wrap_TreeSiblingIteratorDepnode_set_link, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_link", _wrap_TreeSiblingIteratorDepnode_get_link, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_node_id", _wrap_TreeSiblingIteratorDepnode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_node_id", _wrap_TreeSiblingIteratorDepnode_set_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_label", _wrap_TreeSiblingIteratorDepnode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_has_word", _wrap_TreeSiblingIteratorDepnode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_word", _wrap_TreeSiblingIteratorDepnode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_label", _wrap_TreeSiblingIteratorDepnode_set_label, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_word", _wrap_TreeSiblingIteratorDepnode_set_word, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_is_head", _wrap_TreeSiblingIteratorDepnode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_head", _wrap_TreeSiblingIteratorDepnode_set_head, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_is_chunk", _wrap_TreeSiblingIteratorDepnode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_set_chunk", _wrap_TreeSiblingIteratorDepnode_set_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_get_chunk_ord", _wrap_TreeSiblingIteratorDepnode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeSiblingIteratorDepnode_swigregister", TreeSiblingIteratorDepnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeConstPreorderIteratorNode", _wrap_new_TreeConstPreorderIteratorNode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeConstPreorderIteratorNode", _wrap_delete_TreeConstPreorderIteratorNode, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode___ref__", _wrap_TreeConstPreorderIteratorNode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode___deref__", _wrap_TreeConstPreorderIteratorNode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode___eq__", _wrap_TreeConstPreorderIteratorNode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode___ne__", _wrap_TreeConstPreorderIteratorNode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_info", _wrap_TreeConstPreorderIteratorNode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_is_defined", _wrap_TreeConstPreorderIteratorNode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_is_root", _wrap_TreeConstPreorderIteratorNode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_empty", _wrap_TreeConstPreorderIteratorNode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_has_ancestor", _wrap_TreeConstPreorderIteratorNode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_num_children", _wrap_TreeConstPreorderIteratorNode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_parent", _wrap_TreeConstPreorderIteratorNode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_nth_child", _wrap_TreeConstPreorderIteratorNode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_nth_child_ref", _wrap_TreeConstPreorderIteratorNode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_begin", _wrap_TreeConstPreorderIteratorNode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_end", _wrap_TreeConstPreorderIteratorNode_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_sibling_begin", _wrap_TreeConstPreorderIteratorNode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_sibling_end", _wrap_TreeConstPreorderIteratorNode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_sibling_rbegin", _wrap_TreeConstPreorderIteratorNode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_sibling_rend", _wrap_TreeConstPreorderIteratorNode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_node_id", _wrap_TreeConstPreorderIteratorNode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_label", _wrap_TreeConstPreorderIteratorNode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_has_word", _wrap_TreeConstPreorderIteratorNode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_word", _wrap_TreeConstPreorderIteratorNode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_is_head", _wrap_TreeConstPreorderIteratorNode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_is_chunk", _wrap_TreeConstPreorderIteratorNode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_get_chunk_ord", _wrap_TreeConstPreorderIteratorNode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorNode_swigregister", TreeConstPreorderIteratorNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeConstSiblingIteratorNode", _wrap_new_TreeConstSiblingIteratorNode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeConstSiblingIteratorNode", _wrap_delete_TreeConstSiblingIteratorNode, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode___ref__", _wrap_TreeConstSiblingIteratorNode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode___deref__", _wrap_TreeConstSiblingIteratorNode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode___eq__", _wrap_TreeConstSiblingIteratorNode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode___ne__", _wrap_TreeConstSiblingIteratorNode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_info", _wrap_TreeConstSiblingIteratorNode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_is_defined", _wrap_TreeConstSiblingIteratorNode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_is_root", _wrap_TreeConstSiblingIteratorNode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_empty", _wrap_TreeConstSiblingIteratorNode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_has_ancestor", _wrap_TreeConstSiblingIteratorNode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_num_children", _wrap_TreeConstSiblingIteratorNode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_parent", _wrap_TreeConstSiblingIteratorNode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_nth_child", _wrap_TreeConstSiblingIteratorNode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_nth_child_ref", _wrap_TreeConstSiblingIteratorNode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_begin", _wrap_TreeConstSiblingIteratorNode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_end", _wrap_TreeConstSiblingIteratorNode_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_sibling_begin", _wrap_TreeConstSiblingIteratorNode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_sibling_end", _wrap_TreeConstSiblingIteratorNode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_sibling_rbegin", _wrap_TreeConstSiblingIteratorNode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_sibling_rend", _wrap_TreeConstSiblingIteratorNode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_node_id", _wrap_TreeConstSiblingIteratorNode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_label", _wrap_TreeConstSiblingIteratorNode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_has_word", _wrap_TreeConstSiblingIteratorNode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_word", _wrap_TreeConstSiblingIteratorNode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_is_head", _wrap_TreeConstSiblingIteratorNode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_is_chunk", _wrap_TreeConstSiblingIteratorNode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_get_chunk_ord", _wrap_TreeConstSiblingIteratorNode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorNode_swigregister", TreeConstSiblingIteratorNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeConstPreorderIteratorDepnode", _wrap_new_TreeConstPreorderIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeConstPreorderIteratorDepnode", _wrap_delete_TreeConstPreorderIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode___ref__", _wrap_TreeConstPreorderIteratorDepnode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode___deref__", _wrap_TreeConstPreorderIteratorDepnode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode___eq__", _wrap_TreeConstPreorderIteratorDepnode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode___ne__", _wrap_TreeConstPreorderIteratorDepnode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_info", _wrap_TreeConstPreorderIteratorDepnode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_is_defined", _wrap_TreeConstPreorderIteratorDepnode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_is_root", _wrap_TreeConstPreorderIteratorDepnode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_empty", _wrap_TreeConstPreorderIteratorDepnode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_has_ancestor", _wrap_TreeConstPreorderIteratorDepnode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_num_children", _wrap_TreeConstPreorderIteratorDepnode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_parent", _wrap_TreeConstPreorderIteratorDepnode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_nth_child", _wrap_TreeConstPreorderIteratorDepnode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_nth_child_ref", _wrap_TreeConstPreorderIteratorDepnode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_begin", _wrap_TreeConstPreorderIteratorDepnode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_end", _wrap_TreeConstPreorderIteratorDepnode_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_sibling_begin", _wrap_TreeConstPreorderIteratorDepnode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_sibling_end", _wrap_TreeConstPreorderIteratorDepnode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_sibling_rbegin", _wrap_TreeConstPreorderIteratorDepnode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_sibling_rend", _wrap_TreeConstPreorderIteratorDepnode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_link", _wrap_TreeConstPreorderIteratorDepnode_get_link, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_node_id", _wrap_TreeConstPreorderIteratorDepnode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_label", _wrap_TreeConstPreorderIteratorDepnode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_has_word", _wrap_TreeConstPreorderIteratorDepnode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_word", _wrap_TreeConstPreorderIteratorDepnode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_is_head", _wrap_TreeConstPreorderIteratorDepnode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_is_chunk", _wrap_TreeConstPreorderIteratorDepnode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_get_chunk_ord", _wrap_TreeConstPreorderIteratorDepnode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeConstPreorderIteratorDepnode_swigregister", TreeConstPreorderIteratorDepnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeConstSiblingIteratorDepnode", _wrap_new_TreeConstSiblingIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"delete_TreeConstSiblingIteratorDepnode", _wrap_delete_TreeConstSiblingIteratorDepnode, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode___ref__", _wrap_TreeConstSiblingIteratorDepnode___ref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode___deref__", _wrap_TreeConstSiblingIteratorDepnode___deref__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode___eq__", _wrap_TreeConstSiblingIteratorDepnode___eq__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode___ne__", _wrap_TreeConstSiblingIteratorDepnode___ne__, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_info", _wrap_TreeConstSiblingIteratorDepnode_get_info, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_is_defined", _wrap_TreeConstSiblingIteratorDepnode_is_defined, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_is_root", _wrap_TreeConstSiblingIteratorDepnode_is_root, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_empty", _wrap_TreeConstSiblingIteratorDepnode_empty, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_has_ancestor", _wrap_TreeConstSiblingIteratorDepnode_has_ancestor, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_num_children", _wrap_TreeConstSiblingIteratorDepnode_num_children, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_parent", _wrap_TreeConstSiblingIteratorDepnode_get_parent, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_nth_child", _wrap_TreeConstSiblingIteratorDepnode_nth_child, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_nth_child_ref", _wrap_TreeConstSiblingIteratorDepnode_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_begin", _wrap_TreeConstSiblingIteratorDepnode_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_end", _wrap_TreeConstSiblingIteratorDepnode_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_sibling_begin", _wrap_TreeConstSiblingIteratorDepnode_sibling_begin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_sibling_end", _wrap_TreeConstSiblingIteratorDepnode_sibling_end, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_sibling_rbegin", _wrap_TreeConstSiblingIteratorDepnode_sibling_rbegin, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_sibling_rend", _wrap_TreeConstSiblingIteratorDepnode_sibling_rend, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_link", _wrap_TreeConstSiblingIteratorDepnode_get_link, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_node_id", _wrap_TreeConstSiblingIteratorDepnode_get_node_id, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_label", _wrap_TreeConstSiblingIteratorDepnode_get_label, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_has_word", _wrap_TreeConstSiblingIteratorDepnode_has_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_word", _wrap_TreeConstSiblingIteratorDepnode_get_word, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_is_head", _wrap_TreeConstSiblingIteratorDepnode_is_head, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_is_chunk", _wrap_TreeConstSiblingIteratorDepnode_is_chunk, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_get_chunk_ord", _wrap_TreeConstSiblingIteratorDepnode_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"TreeConstSiblingIteratorDepnode_swigregister", TreeConstSiblingIteratorDepnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"analysis_user_set", _wrap_analysis_user_set, METH_VARARGS, NULL},
	 { (char *)"analysis_user_get", _wrap_analysis_user_get, METH_VARARGS, NULL},
	 { (char *)"new_analysis", _wrap_new_analysis, METH_VARARGS, NULL},
	 { (char *)"delete_analysis", _wrap_delete_analysis, METH_VARARGS, NULL},
	 { (char *)"analysis_init", _wrap_analysis_init, METH_VARARGS, NULL},
	 { (char *)"analysis_set_lemma", _wrap_analysis_set_lemma, METH_VARARGS, NULL},
	 { (char *)"analysis_set_tag", _wrap_analysis_set_tag, METH_VARARGS, NULL},
	 { (char *)"analysis_set_prob", _wrap_analysis_set_prob, METH_VARARGS, NULL},
	 { (char *)"analysis_set_distance", _wrap_analysis_set_distance, METH_VARARGS, NULL},
	 { (char *)"analysis_set_retokenizable", _wrap_analysis_set_retokenizable, METH_VARARGS, NULL},
	 { (char *)"analysis_has_prob", _wrap_analysis_has_prob, METH_VARARGS, NULL},
	 { (char *)"analysis_has_distance", _wrap_analysis_has_distance, METH_VARARGS, NULL},
	 { (char *)"analysis_get_lemma", _wrap_analysis_get_lemma, METH_VARARGS, NULL},
	 { (char *)"analysis_get_tag", _wrap_analysis_get_tag, METH_VARARGS, NULL},
	 { (char *)"analysis_get_prob", _wrap_analysis_get_prob, METH_VARARGS, NULL},
	 { (char *)"analysis_get_distance", _wrap_analysis_get_distance, METH_VARARGS, NULL},
	 { (char *)"analysis_is_retokenizable", _wrap_analysis_is_retokenizable, METH_VARARGS, NULL},
	 { (char *)"analysis_get_retokenizable", _wrap_analysis_get_retokenizable, METH_VARARGS, NULL},
	 { (char *)"analysis_get_senses", _wrap_analysis_get_senses, METH_VARARGS, NULL},
	 { (char *)"analysis_set_senses", _wrap_analysis_set_senses, METH_VARARGS, NULL},
	 { (char *)"analysis_get_senses_string", _wrap_analysis_get_senses_string, METH_VARARGS, NULL},
	 { (char *)"analysis___gt__", _wrap_analysis___gt__, METH_VARARGS, NULL},
	 { (char *)"analysis___lt__", _wrap_analysis___lt__, METH_VARARGS, NULL},
	 { (char *)"analysis___eq__", _wrap_analysis___eq__, METH_VARARGS, NULL},
	 { (char *)"analysis_is_selected", _wrap_analysis_is_selected, METH_VARARGS, NULL},
	 { (char *)"analysis_mark_selected", _wrap_analysis_mark_selected, METH_VARARGS, NULL},
	 { (char *)"analysis_unmark_selected", _wrap_analysis_unmark_selected, METH_VARARGS, NULL},
	 { (char *)"analysis_swigregister", analysis_swigregister, METH_VARARGS, NULL},
	 { (char *)"word_user_set", _wrap_word_user_set, METH_VARARGS, NULL},
	 { (char *)"word_user_get", _wrap_word_user_get, METH_VARARGS, NULL},
	 { (char *)"new_word", _wrap_new_word, METH_VARARGS, NULL},
	 { (char *)"delete_word", _wrap_delete_word, METH_VARARGS, NULL},
	 { (char *)"word_copy_analysis", _wrap_word_copy_analysis, METH_VARARGS, NULL},
	 { (char *)"word_get_n_selected", _wrap_word_get_n_selected, METH_VARARGS, NULL},
	 { (char *)"word_get_n_unselected", _wrap_word_get_n_unselected, METH_VARARGS, NULL},
	 { (char *)"word_is_multiword", _wrap_word_is_multiword, METH_VARARGS, NULL},
	 { (char *)"word_is_ambiguous_mw", _wrap_word_is_ambiguous_mw, METH_VARARGS, NULL},
	 { (char *)"word_set_ambiguous_mw", _wrap_word_set_ambiguous_mw, METH_VARARGS, NULL},
	 { (char *)"word_get_n_words_mw", _wrap_word_get_n_words_mw, METH_VARARGS, NULL},
	 { (char *)"word_get_words_mw", _wrap_word_get_words_mw, METH_VARARGS, NULL},
	 { (char *)"word_get_form", _wrap_word_get_form, METH_VARARGS, NULL},
	 { (char *)"word_get_lc_form", _wrap_word_get_lc_form, METH_VARARGS, NULL},
	 { (char *)"word_get_ph_form", _wrap_word_get_ph_form, METH_VARARGS, NULL},
	 { (char *)"word_selected_begin", _wrap_word_selected_begin, METH_VARARGS, NULL},
	 { (char *)"word_selected_end", _wrap_word_selected_end, METH_VARARGS, NULL},
	 { (char *)"word_unselected_begin", _wrap_word_unselected_begin, METH_VARARGS, NULL},
	 { (char *)"word_unselected_end", _wrap_word_unselected_end, METH_VARARGS, NULL},
	 { (char *)"word_num_kbest", _wrap_word_num_kbest, METH_VARARGS, NULL},
	 { (char *)"word_get_lemma", _wrap_word_get_lemma, METH_VARARGS, NULL},
	 { (char *)"word_get_tag", _wrap_word_get_tag, METH_VARARGS, NULL},
	 { (char *)"word_get_senses", _wrap_word_get_senses, METH_VARARGS, NULL},
	 { (char *)"word_get_senses_string", _wrap_word_get_senses_string, METH_VARARGS, NULL},
	 { (char *)"word_set_senses", _wrap_word_set_senses, METH_VARARGS, NULL},
	 { (char *)"word_get_span_start", _wrap_word_get_span_start, METH_VARARGS, NULL},
	 { (char *)"word_get_span_finish", _wrap_word_get_span_finish, METH_VARARGS, NULL},
	 { (char *)"word_found_in_dict", _wrap_word_found_in_dict, METH_VARARGS, NULL},
	 { (char *)"word_set_found_in_dict", _wrap_word_set_found_in_dict, METH_VARARGS, NULL},
	 { (char *)"word_has_retokenizable", _wrap_word_has_retokenizable, METH_VARARGS, NULL},
	 { (char *)"word_lock_analysis", _wrap_word_lock_analysis, METH_VARARGS, NULL},
	 { (char *)"word_is_locked", _wrap_word_is_locked, METH_VARARGS, NULL},
	 { (char *)"word_add_alternative", _wrap_word_add_alternative, METH_VARARGS, NULL},
	 { (char *)"word_set_alternatives", _wrap_word_set_alternatives, METH_VARARGS, NULL},
	 { (char *)"word_clear_alternatives", _wrap_word_clear_alternatives, METH_VARARGS, NULL},
	 { (char *)"word_has_alternatives", _wrap_word_has_alternatives, METH_VARARGS, NULL},
	 { (char *)"word_get_alternatives", _wrap_word_get_alternatives, METH_VARARGS, NULL},
	 { (char *)"word_alternatives_begin", _wrap_word_alternatives_begin, METH_VARARGS, NULL},
	 { (char *)"word_alternatives_end", _wrap_word_alternatives_end, METH_VARARGS, NULL},
	 { (char *)"word_add_analysis", _wrap_word_add_analysis, METH_VARARGS, NULL},
	 { (char *)"word_set_analysis", _wrap_word_set_analysis, METH_VARARGS, NULL},
	 { (char *)"word_set_form", _wrap_word_set_form, METH_VARARGS, NULL},
	 { (char *)"word_set_ph_form", _wrap_word_set_ph_form, METH_VARARGS, NULL},
	 { (char *)"word_set_span", _wrap_word_set_span, METH_VARARGS, NULL},
	 { (char *)"word_set_position", _wrap_word_set_position, METH_VARARGS, NULL},
	 { (char *)"word_get_position", _wrap_word_get_position, METH_VARARGS, NULL},
	 { (char *)"word_find_tag_match", _wrap_word_find_tag_match, METH_VARARGS, NULL},
	 { (char *)"word_get_n_analysis", _wrap_word_get_n_analysis, METH_VARARGS, NULL},
	 { (char *)"word_unselect_all_analysis", _wrap_word_unselect_all_analysis, METH_VARARGS, NULL},
	 { (char *)"word_select_all_analysis", _wrap_word_select_all_analysis, METH_VARARGS, NULL},
	 { (char *)"word_select_analysis", _wrap_word_select_analysis, METH_VARARGS, NULL},
	 { (char *)"word_unselect_analysis", _wrap_word_unselect_analysis, METH_VARARGS, NULL},
	 { (char *)"word_get_analysis", _wrap_word_get_analysis, METH_VARARGS, NULL},
	 { (char *)"word_analysis_begin", _wrap_word_analysis_begin, METH_VARARGS, NULL},
	 { (char *)"word_analysis_end", _wrap_word_analysis_end, METH_VARARGS, NULL},
	 { (char *)"word_swigregister", word_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_node", _wrap_new_node, METH_VARARGS, NULL},
	 { (char *)"delete_node", _wrap_delete_node, METH_VARARGS, NULL},
	 { (char *)"node_get_node_id", _wrap_node_get_node_id, METH_VARARGS, NULL},
	 { (char *)"node_set_node_id", _wrap_node_set_node_id, METH_VARARGS, NULL},
	 { (char *)"node_get_label", _wrap_node_get_label, METH_VARARGS, NULL},
	 { (char *)"node_has_word", _wrap_node_has_word, METH_VARARGS, NULL},
	 { (char *)"node_get_word", _wrap_node_get_word, METH_VARARGS, NULL},
	 { (char *)"node_set_label", _wrap_node_set_label, METH_VARARGS, NULL},
	 { (char *)"node_set_word", _wrap_node_set_word, METH_VARARGS, NULL},
	 { (char *)"node_is_head", _wrap_node_is_head, METH_VARARGS, NULL},
	 { (char *)"node_set_head", _wrap_node_set_head, METH_VARARGS, NULL},
	 { (char *)"node_is_chunk", _wrap_node_is_chunk, METH_VARARGS, NULL},
	 { (char *)"node_set_chunk", _wrap_node_set_chunk, METH_VARARGS, NULL},
	 { (char *)"node_get_chunk_ord", _wrap_node_get_chunk_ord, METH_VARARGS, NULL},
	 { (char *)"node_swigregister", node_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_parse_tree", _wrap_new_parse_tree, METH_VARARGS, NULL},
	 { (char *)"parse_tree_build_node_index", _wrap_parse_tree_build_node_index, METH_VARARGS, NULL},
	 { (char *)"parse_tree_rebuild_node_index", _wrap_parse_tree_rebuild_node_index, METH_VARARGS, NULL},
	 { (char *)"parse_tree_get_node_by_id", _wrap_parse_tree_get_node_by_id, METH_VARARGS, NULL},
	 { (char *)"parse_tree_get_node_by_pos", _wrap_parse_tree_get_node_by_pos, METH_VARARGS, NULL},
	 { (char *)"parse_tree_get_head_word", _wrap_parse_tree_get_head_word, METH_VARARGS, NULL},
	 { (char *)"parse_tree_get_head_position", _wrap_parse_tree_get_head_position, METH_VARARGS, NULL},
	 { (char *)"parse_tree_C_commands", _wrap_parse_tree_C_commands, METH_VARARGS, NULL},
	 { (char *)"parse_tree_nth_child_ref", _wrap_parse_tree_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"delete_parse_tree", _wrap_delete_parse_tree, METH_VARARGS, NULL},
	 { (char *)"parse_tree_swigregister", parse_tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_depnode", _wrap_new_depnode, METH_VARARGS, NULL},
	 { (char *)"delete_depnode", _wrap_delete_depnode, METH_VARARGS, NULL},
	 { (char *)"depnode_set_link", _wrap_depnode_set_link, METH_VARARGS, NULL},
	 { (char *)"depnode_get_link", _wrap_depnode_get_link, METH_VARARGS, NULL},
	 { (char *)"depnode_swigregister", depnode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dep_tree", _wrap_new_dep_tree, METH_VARARGS, NULL},
	 { (char *)"dep_tree_get_node_by_pos", _wrap_dep_tree_get_node_by_pos, METH_VARARGS, NULL},
	 { (char *)"dep_tree_rebuild_node_index", _wrap_dep_tree_rebuild_node_index, METH_VARARGS, NULL},
	 { (char *)"dep_tree_get_first_word", _wrap_dep_tree_get_first_word, METH_VARARGS, NULL},
	 { (char *)"dep_tree_get_last_word", _wrap_dep_tree_get_last_word, METH_VARARGS, NULL},
	 { (char *)"dep_tree_nth_child_ref", _wrap_dep_tree_nth_child_ref, METH_VARARGS, NULL},
	 { (char *)"delete_dep_tree", _wrap_delete_dep_tree, METH_VARARGS, NULL},
	 { (char *)"dep_tree_swigregister", dep_tree_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_argument", _wrap_delete_argument, METH_VARARGS, NULL},
	 { (char *)"new_argument", _wrap_new_argument, METH_VARARGS, NULL},
	 { (char *)"argument_get_position", _wrap_argument_get_position, METH_VARARGS, NULL},
	 { (char *)"argument_get_role", _wrap_argument_get_role, METH_VARARGS, NULL},
	 { (char *)"argument_swigregister", argument_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_predicate", _wrap_delete_predicate, METH_VARARGS, NULL},
	 { (char *)"new_predicate", _wrap_new_predicate, METH_VARARGS, NULL},
	 { (char *)"predicate_get_sense", _wrap_predicate_get_sense, METH_VARARGS, NULL},
	 { (char *)"predicate_get_position", _wrap_predicate_get_position, METH_VARARGS, NULL},
	 { (char *)"predicate_has_argument", _wrap_predicate_has_argument, METH_VARARGS, NULL},
	 { (char *)"predicate_add_argument", _wrap_predicate_add_argument, METH_VARARGS, NULL},
	 { (char *)"predicate_get_argument_by_pos", _wrap_predicate_get_argument_by_pos, METH_VARARGS, NULL},
	 { (char *)"predicate_swigregister", predicate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sentence", _wrap_new_sentence, METH_VARARGS, NULL},
	 { (char *)"delete_sentence", _wrap_delete_sentence, METH_VARARGS, NULL},
	 { (char *)"sentence_num_kbest", _wrap_sentence_num_kbest, METH_VARARGS, NULL},
	 { (char *)"sentence_push_back", _wrap_sentence_push_back, METH_VARARGS, NULL},
	 { (char *)"sentence_rebuild_word_index", _wrap_sentence_rebuild_word_index, METH_VARARGS, NULL},
	 { (char *)"sentence_clear", _wrap_sentence_clear, METH_VARARGS, NULL},
	 { (char *)"sentence_set_sentence_id", _wrap_sentence_set_sentence_id, METH_VARARGS, NULL},
	 { (char *)"sentence_get_sentence_id", _wrap_sentence_get_sentence_id, METH_VARARGS, NULL},
	 { (char *)"sentence_set_is_tagged", _wrap_sentence_set_is_tagged, METH_VARARGS, NULL},
	 { (char *)"sentence_is_tagged", _wrap_sentence_is_tagged, METH_VARARGS, NULL},
	 { (char *)"sentence_set_parse_tree", _wrap_sentence_set_parse_tree, METH_VARARGS, NULL},
	 { (char *)"sentence_get_parse_tree", _wrap_sentence_get_parse_tree, METH_VARARGS, NULL},
	 { (char *)"sentence_is_parsed", _wrap_sentence_is_parsed, METH_VARARGS, NULL},
	 { (char *)"sentence_set_dep_tree", _wrap_sentence_set_dep_tree, METH_VARARGS, NULL},
	 { (char *)"sentence_get_dep_tree", _wrap_sentence_get_dep_tree, METH_VARARGS, NULL},
	 { (char *)"sentence_is_dep_parsed", _wrap_sentence_is_dep_parsed, METH_VARARGS, NULL},
	 { (char *)"sentence_get_words", _wrap_sentence_get_words, METH_VARARGS, NULL},
	 { (char *)"sentence_words_begin", _wrap_sentence_words_begin, METH_VARARGS, NULL},
	 { (char *)"sentence_words_end", _wrap_sentence_words_end, METH_VARARGS, NULL},
	 { (char *)"sentence_get_word_iterator", _wrap_sentence_get_word_iterator, METH_VARARGS, NULL},
	 { (char *)"sentence_add_predicate", _wrap_sentence_add_predicate, METH_VARARGS, NULL},
	 { (char *)"sentence_is_predicate", _wrap_sentence_is_predicate, METH_VARARGS, NULL},
	 { (char *)"sentence_get_predicate_number", _wrap_sentence_get_predicate_number, METH_VARARGS, NULL},
	 { (char *)"sentence_get_predicate_position", _wrap_sentence_get_predicate_position, METH_VARARGS, NULL},
	 { (char *)"sentence_get_predicate_by_pos", _wrap_sentence_get_predicate_by_pos, METH_VARARGS, NULL},
	 { (char *)"sentence_get_predicate_by_number", _wrap_sentence_get_predicate_by_number, METH_VARARGS, NULL},
	 { (char *)"sentence_get_predicates", _wrap_sentence_get_predicates, METH_VARARGS, NULL},
	 { (char *)"sentence_swigregister", sentence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_paragraph", _wrap_new_paragraph, METH_VARARGS, NULL},
	 { (char *)"paragraph_set_paragraph_id", _wrap_paragraph_set_paragraph_id, METH_VARARGS, NULL},
	 { (char *)"paragraph_get_paragraph_id", _wrap_paragraph_get_paragraph_id, METH_VARARGS, NULL},
	 { (char *)"delete_paragraph", _wrap_delete_paragraph, METH_VARARGS, NULL},
	 { (char *)"paragraph_swigregister", paragraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mention", _wrap_new_mention, METH_VARARGS, NULL},
	 { (char *)"mention___lt__", _wrap_mention___lt__, METH_VARARGS, NULL},
	 { (char *)"mention_set_id", _wrap_mention_set_id, METH_VARARGS, NULL},
	 { (char *)"mention_set_type", _wrap_mention_set_type, METH_VARARGS, NULL},
	 { (char *)"mention_set_initial", _wrap_mention_set_initial, METH_VARARGS, NULL},
	 { (char *)"mention_set_group", _wrap_mention_set_group, METH_VARARGS, NULL},
	 { (char *)"mention_subsumed_with_no_verb", _wrap_mention_subsumed_with_no_verb, METH_VARARGS, NULL},
	 { (char *)"mention_get_id", _wrap_mention_get_id, METH_VARARGS, NULL},
	 { (char *)"mention_get_n_sentence", _wrap_mention_get_n_sentence, METH_VARARGS, NULL},
	 { (char *)"mention_get_sentence", _wrap_mention_get_sentence, METH_VARARGS, NULL},
	 { (char *)"mention_get_pos_begin", _wrap_mention_get_pos_begin, METH_VARARGS, NULL},
	 { (char *)"mention_get_pos_end", _wrap_mention_get_pos_end, METH_VARARGS, NULL},
	 { (char *)"mention_get_it_begin", _wrap_mention_get_it_begin, METH_VARARGS, NULL},
	 { (char *)"mention_get_it_end", _wrap_mention_get_it_end, METH_VARARGS, NULL},
	 { (char *)"mention_get_it_head", _wrap_mention_get_it_head, METH_VARARGS, NULL},
	 { (char *)"mention_get_type", _wrap_mention_get_type, METH_VARARGS, NULL},
	 { (char *)"mention_get_group", _wrap_mention_get_group, METH_VARARGS, NULL},
	 { (char *)"mention_is_type", _wrap_mention_is_type, METH_VARARGS, NULL},
	 { (char *)"mention_is_initial", _wrap_mention_is_initial, METH_VARARGS, NULL},
	 { (char *)"mention_is_subsumed_with_no_verb", _wrap_mention_is_subsumed_with_no_verb, METH_VARARGS, NULL},
	 { (char *)"mention_get_ptree", _wrap_mention_get_ptree, METH_VARARGS, NULL},
	 { (char *)"mention_get_head", _wrap_mention_get_head, METH_VARARGS, NULL},
	 { (char *)"mention_value", _wrap_mention_value, METH_VARARGS, NULL},
	 { (char *)"delete_mention", _wrap_delete_mention, METH_VARARGS, NULL},
	 { (char *)"mention_swigregister", mention_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SG_mention", _wrap_new_SG_mention, METH_VARARGS, NULL},
	 { (char *)"delete_SG_mention", _wrap_delete_SG_mention, METH_VARARGS, NULL},
	 { (char *)"SG_mention_get_id", _wrap_SG_mention_get_id, METH_VARARGS, NULL},
	 { (char *)"SG_mention_get_sentence_id", _wrap_SG_mention_get_sentence_id, METH_VARARGS, NULL},
	 { (char *)"SG_mention_get_words", _wrap_SG_mention_get_words, METH_VARARGS, NULL},
	 { (char *)"SG_mention_swigregister", SG_mention_swigregister, METH_VARARGS, NULL},
	 { (char *)"ENTITY_swigconstant", ENTITY_swigconstant, METH_VARARGS, NULL},
	 { (char *)"WORD_swigconstant", WORD_swigconstant, METH_VARARGS, NULL},
	 { (char *)"new_SG_entity", _wrap_new_SG_entity, METH_VARARGS, NULL},
	 { (char *)"delete_SG_entity", _wrap_delete_SG_entity, METH_VARARGS, NULL},
	 { (char *)"SG_entity_set_lemma", _wrap_SG_entity_set_lemma, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_id", _wrap_SG_entity_get_id, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_lemma", _wrap_SG_entity_get_lemma, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_semclass", _wrap_SG_entity_get_semclass, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_type", _wrap_SG_entity_get_type, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_sense", _wrap_SG_entity_get_sense, METH_VARARGS, NULL},
	 { (char *)"SG_entity_get_mentions", _wrap_SG_entity_get_mentions, METH_VARARGS, NULL},
	 { (char *)"SG_entity_swigregister", SG_entity_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SG_argument", _wrap_new_SG_argument, METH_VARARGS, NULL},
	 { (char *)"delete_SG_argument", _wrap_delete_SG_argument, METH_VARARGS, NULL},
	 { (char *)"SG_argument_get_role", _wrap_SG_argument_get_role, METH_VARARGS, NULL},
	 { (char *)"SG_argument_get_entity", _wrap_SG_argument_get_entity, METH_VARARGS, NULL},
	 { (char *)"SG_argument_swigregister", SG_argument_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SG_frame", _wrap_new_SG_frame, METH_VARARGS, NULL},
	 { (char *)"delete_SG_frame", _wrap_delete_SG_frame, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_id", _wrap_SG_frame_get_id, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_lemma", _wrap_SG_frame_get_lemma, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_sense", _wrap_SG_frame_get_sense, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_token_id", _wrap_SG_frame_get_token_id, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_sentence_id", _wrap_SG_frame_get_sentence_id, METH_VARARGS, NULL},
	 { (char *)"SG_frame_get_arguments", _wrap_SG_frame_get_arguments, METH_VARARGS, NULL},
	 { (char *)"SG_frame_swigregister", SG_frame_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_semantic_graph", _wrap_new_semantic_graph, METH_VARARGS, NULL},
	 { (char *)"delete_semantic_graph", _wrap_delete_semantic_graph, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_add_entity", _wrap_semantic_graph_add_entity, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_add_frame", _wrap_semantic_graph_add_frame, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_frame", _wrap_semantic_graph_get_frame, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_entity_id_by_mention", _wrap_semantic_graph_get_entity_id_by_mention, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_entity_id_by_lemma", _wrap_semantic_graph_get_entity_id_by_lemma, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_entity", _wrap_semantic_graph_get_entity, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_entities", _wrap_semantic_graph_get_entities, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_get_frames", _wrap_semantic_graph_get_frames, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_add_mention_to_entity", _wrap_semantic_graph_add_mention_to_entity, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_add_argument_to_frame", _wrap_semantic_graph_add_argument_to_frame, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_is_argument", _wrap_semantic_graph_is_argument, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_has_arguments", _wrap_semantic_graph_has_arguments, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_empty", _wrap_semantic_graph_empty, METH_VARARGS, NULL},
	 { (char *)"semantic_graph_swigregister", semantic_graph_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_document", _wrap_new_document, METH_VARARGS, NULL},
	 { (char *)"document_is_parsed", _wrap_document_is_parsed, METH_VARARGS, NULL},
	 { (char *)"document_is_dep_parsed", _wrap_document_is_dep_parsed, METH_VARARGS, NULL},
	 { (char *)"document_add_mention", _wrap_document_add_mention, METH_VARARGS, NULL},
	 { (char *)"document_get_num_words", _wrap_document_get_num_words, METH_VARARGS, NULL},
	 { (char *)"document_get_num_groups", _wrap_document_get_num_groups, METH_VARARGS, NULL},
	 { (char *)"document_get_groups", _wrap_document_get_groups, METH_VARARGS, NULL},
	 { (char *)"document_begin_mentions", _wrap_document_begin_mentions, METH_VARARGS, NULL},
	 { (char *)"document_end_mentions", _wrap_document_end_mentions, METH_VARARGS, NULL},
	 { (char *)"document_get_semantic_graph", _wrap_document_get_semantic_graph, METH_VARARGS, NULL},
	 { (char *)"document_get_mention", _wrap_document_get_mention, METH_VARARGS, NULL},
	 { (char *)"document_get_coref_id_mentions", _wrap_document_get_coref_id_mentions, METH_VARARGS, NULL},
	 { (char *)"delete_document", _wrap_delete_document, METH_VARARGS, NULL},
	 { (char *)"document_swigregister", document_swigregister, METH_VARARGS, NULL},
	 { (char *)"traces_TraceLevel_get", _wrap_traces_TraceLevel_get, METH_VARARGS, NULL},
	 { (char *)"traces_TraceLevel_set", _wrap_traces_TraceLevel_set, METH_VARARGS, NULL},
	 { (char *)"traces_TraceModule_get", _wrap_traces_TraceModule_get, METH_VARARGS, NULL},
	 { (char *)"traces_TraceModule_set", _wrap_traces_TraceModule_set, METH_VARARGS, NULL},
	 { (char *)"new_traces", _wrap_new_traces, METH_VARARGS, NULL},
	 { (char *)"delete_traces", _wrap_delete_traces, METH_VARARGS, NULL},
	 { (char *)"traces_swigregister", traces_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_lang_ident", _wrap_new_lang_ident, METH_VARARGS, NULL},
	 { (char *)"delete_lang_ident", _wrap_delete_lang_ident, METH_VARARGS, NULL},
	 { (char *)"lang_ident_add_language", _wrap_lang_ident_add_language, METH_VARARGS, NULL},
	 { (char *)"lang_ident_train_language", _wrap_lang_ident_train_language, METH_VARARGS, NULL},
	 { (char *)"lang_ident_identify_language", _wrap_lang_ident_identify_language, METH_VARARGS, NULL},
	 { (char *)"lang_ident_rank_languages", _wrap_lang_ident_rank_languages, METH_VARARGS, NULL},
	 { (char *)"lang_ident_swigregister", lang_ident_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tokenizer", _wrap_new_tokenizer, METH_VARARGS, NULL},
	 { (char *)"delete_tokenizer", _wrap_delete_tokenizer, METH_VARARGS, NULL},
	 { (char *)"tokenizer_tokenize", _wrap_tokenizer_tokenize, METH_VARARGS, NULL},
	 { (char *)"tokenizer_swigregister", tokenizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_splitter", _wrap_new_splitter, METH_VARARGS, NULL},
	 { (char *)"delete_splitter", _wrap_delete_splitter, METH_VARARGS, NULL},
	 { (char *)"splitter_open_session", _wrap_splitter_open_session, METH_VARARGS, NULL},
	 { (char *)"splitter_close_session", _wrap_splitter_close_session, METH_VARARGS, NULL},
	 { (char *)"splitter_split", _wrap_splitter_split, METH_VARARGS, NULL},
	 { (char *)"splitter_swigregister", splitter_swigregister, METH_VARARGS, NULL},
	 { (char *)"maco_options_Lang_set", _wrap_maco_options_Lang_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_Lang_get", _wrap_maco_options_Lang_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_LocutionsFile_set", _wrap_maco_options_LocutionsFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_LocutionsFile_get", _wrap_maco_options_LocutionsFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_QuantitiesFile_set", _wrap_maco_options_QuantitiesFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_QuantitiesFile_get", _wrap_maco_options_QuantitiesFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_AffixFile_set", _wrap_maco_options_AffixFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_AffixFile_get", _wrap_maco_options_AffixFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_CompoundFile_set", _wrap_maco_options_CompoundFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_CompoundFile_get", _wrap_maco_options_CompoundFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_DictionaryFile_set", _wrap_maco_options_DictionaryFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_DictionaryFile_get", _wrap_maco_options_DictionaryFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_ProbabilityFile_set", _wrap_maco_options_ProbabilityFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_ProbabilityFile_get", _wrap_maco_options_ProbabilityFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_NPdataFile_set", _wrap_maco_options_NPdataFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_NPdataFile_get", _wrap_maco_options_NPdataFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_PunctuationFile_set", _wrap_maco_options_PunctuationFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_PunctuationFile_get", _wrap_maco_options_PunctuationFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_UserMapFile_set", _wrap_maco_options_UserMapFile_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_UserMapFile_get", _wrap_maco_options_UserMapFile_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_Decimal_set", _wrap_maco_options_Decimal_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_Decimal_get", _wrap_maco_options_Decimal_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_Thousand_set", _wrap_maco_options_Thousand_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_Thousand_get", _wrap_maco_options_Thousand_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_ProbabilityThreshold_set", _wrap_maco_options_ProbabilityThreshold_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_ProbabilityThreshold_get", _wrap_maco_options_ProbabilityThreshold_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_InverseDict_set", _wrap_maco_options_InverseDict_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_InverseDict_get", _wrap_maco_options_InverseDict_get, METH_VARARGS, NULL},
	 { (char *)"maco_options_RetokContractions_set", _wrap_maco_options_RetokContractions_set, METH_VARARGS, NULL},
	 { (char *)"maco_options_RetokContractions_get", _wrap_maco_options_RetokContractions_get, METH_VARARGS, NULL},
	 { (char *)"new_maco_options", _wrap_new_maco_options, METH_VARARGS, NULL},
	 { (char *)"delete_maco_options", _wrap_delete_maco_options, METH_VARARGS, NULL},
	 { (char *)"maco_options_set_data_files", _wrap_maco_options_set_data_files, METH_VARARGS, NULL},
	 { (char *)"maco_options_set_nummerical_points", _wrap_maco_options_set_nummerical_points, METH_VARARGS, NULL},
	 { (char *)"maco_options_set_threshold", _wrap_maco_options_set_threshold, METH_VARARGS, NULL},
	 { (char *)"maco_options_set_inverse_dict", _wrap_maco_options_set_inverse_dict, METH_VARARGS, NULL},
	 { (char *)"maco_options_set_retok_contractions", _wrap_maco_options_set_retok_contractions, METH_VARARGS, NULL},
	 { (char *)"maco_options_swigregister", maco_options_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_maco", _wrap_new_maco, METH_VARARGS, NULL},
	 { (char *)"delete_maco", _wrap_delete_maco, METH_VARARGS, NULL},
	 { (char *)"maco_set_active_options", _wrap_maco_set_active_options, METH_VARARGS, NULL},
	 { (char *)"maco_analyze", _wrap_maco_analyze, METH_VARARGS, NULL},
	 { (char *)"maco_swigregister", maco_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RE_map", _wrap_new_RE_map, METH_VARARGS, NULL},
	 { (char *)"delete_RE_map", _wrap_delete_RE_map, METH_VARARGS, NULL},
	 { (char *)"RE_map_annotate_word", _wrap_RE_map_annotate_word, METH_VARARGS, NULL},
	 { (char *)"RE_map_analyze", _wrap_RE_map_analyze, METH_VARARGS, NULL},
	 { (char *)"RE_map_swigregister", RE_map_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_numbers", _wrap_new_numbers, METH_VARARGS, NULL},
	 { (char *)"delete_numbers", _wrap_delete_numbers, METH_VARARGS, NULL},
	 { (char *)"numbers_analyze", _wrap_numbers_analyze, METH_VARARGS, NULL},
	 { (char *)"numbers_swigregister", numbers_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_punts", _wrap_new_punts, METH_VARARGS, NULL},
	 { (char *)"delete_punts", _wrap_delete_punts, METH_VARARGS, NULL},
	 { (char *)"punts_analyze", _wrap_punts_analyze, METH_VARARGS, NULL},
	 { (char *)"punts_swigregister", punts_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dates", _wrap_new_dates, METH_VARARGS, NULL},
	 { (char *)"delete_dates", _wrap_delete_dates, METH_VARARGS, NULL},
	 { (char *)"dates_analyze", _wrap_dates_analyze, METH_VARARGS, NULL},
	 { (char *)"dates_swigregister", dates_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dictionary", _wrap_new_dictionary, METH_VARARGS, NULL},
	 { (char *)"delete_dictionary", _wrap_delete_dictionary, METH_VARARGS, NULL},
	 { (char *)"dictionary_add_analysis", _wrap_dictionary_add_analysis, METH_VARARGS, NULL},
	 { (char *)"dictionary_remove_entry", _wrap_dictionary_remove_entry, METH_VARARGS, NULL},
	 { (char *)"dictionary_set_retokenize_contractions", _wrap_dictionary_set_retokenize_contractions, METH_VARARGS, NULL},
	 { (char *)"dictionary_set_affix_analysis", _wrap_dictionary_set_affix_analysis, METH_VARARGS, NULL},
	 { (char *)"dictionary_set_compound_analysis", _wrap_dictionary_set_compound_analysis, METH_VARARGS, NULL},
	 { (char *)"dictionary_has_affixes", _wrap_dictionary_has_affixes, METH_VARARGS, NULL},
	 { (char *)"dictionary_has_compounds", _wrap_dictionary_has_compounds, METH_VARARGS, NULL},
	 { (char *)"dictionary_search_form", _wrap_dictionary_search_form, METH_VARARGS, NULL},
	 { (char *)"dictionary_annotate_word", _wrap_dictionary_annotate_word, METH_VARARGS, NULL},
	 { (char *)"dictionary_get_forms", _wrap_dictionary_get_forms, METH_VARARGS, NULL},
	 { (char *)"dictionary_analyze", _wrap_dictionary_analyze, METH_VARARGS, NULL},
	 { (char *)"dictionary_swigregister", dictionary_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_locutions", _wrap_new_locutions, METH_VARARGS, NULL},
	 { (char *)"delete_locutions", _wrap_delete_locutions, METH_VARARGS, NULL},
	 { (char *)"locutions_add_locution", _wrap_locutions_add_locution, METH_VARARGS, NULL},
	 { (char *)"locutions_set_OnlySelected", _wrap_locutions_set_OnlySelected, METH_VARARGS, NULL},
	 { (char *)"locutions_analyze", _wrap_locutions_analyze, METH_VARARGS, NULL},
	 { (char *)"locutions_swigregister", locutions_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ner", _wrap_new_ner, METH_VARARGS, NULL},
	 { (char *)"delete_ner", _wrap_delete_ner, METH_VARARGS, NULL},
	 { (char *)"ner_analyze", _wrap_ner_analyze, METH_VARARGS, NULL},
	 { (char *)"ner_swigregister", ner_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_quantities", _wrap_new_quantities, METH_VARARGS, NULL},
	 { (char *)"delete_quantities", _wrap_delete_quantities, METH_VARARGS, NULL},
	 { (char *)"quantities_analyze", _wrap_quantities_analyze, METH_VARARGS, NULL},
	 { (char *)"quantities_swigregister", quantities_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_probabilities", _wrap_new_probabilities, METH_VARARGS, NULL},
	 { (char *)"delete_probabilities", _wrap_delete_probabilities, METH_VARARGS, NULL},
	 { (char *)"probabilities_annotate_word", _wrap_probabilities_annotate_word, METH_VARARGS, NULL},
	 { (char *)"probabilities_set_activate_guesser", _wrap_probabilities_set_activate_guesser, METH_VARARGS, NULL},
	 { (char *)"probabilities_analyze", _wrap_probabilities_analyze, METH_VARARGS, NULL},
	 { (char *)"probabilities_swigregister", probabilities_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_hmm_tagger", _wrap_new_hmm_tagger, METH_VARARGS, NULL},
	 { (char *)"delete_hmm_tagger", _wrap_delete_hmm_tagger, METH_VARARGS, NULL},
	 { (char *)"hmm_tagger_SequenceProb_log", _wrap_hmm_tagger_SequenceProb_log, METH_VARARGS, NULL},
	 { (char *)"hmm_tagger_analyze", _wrap_hmm_tagger_analyze, METH_VARARGS, NULL},
	 { (char *)"hmm_tagger_swigregister", hmm_tagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_relax_tagger", _wrap_new_relax_tagger, METH_VARARGS, NULL},
	 { (char *)"delete_relax_tagger", _wrap_delete_relax_tagger, METH_VARARGS, NULL},
	 { (char *)"relax_tagger_analyze", _wrap_relax_tagger_analyze, METH_VARARGS, NULL},
	 { (char *)"relax_tagger_swigregister", relax_tagger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_alternatives", _wrap_new_alternatives, METH_VARARGS, NULL},
	 { (char *)"delete_alternatives", _wrap_delete_alternatives, METH_VARARGS, NULL},
	 { (char *)"alternatives_get_similar_words", _wrap_alternatives_get_similar_words, METH_VARARGS, NULL},
	 { (char *)"alternatives_analyze", _wrap_alternatives_analyze, METH_VARARGS, NULL},
	 { (char *)"alternatives_swigregister", alternatives_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_phonetics", _wrap_new_phonetics, METH_VARARGS, NULL},
	 { (char *)"delete_phonetics", _wrap_delete_phonetics, METH_VARARGS, NULL},
	 { (char *)"phonetics_get_sound", _wrap_phonetics_get_sound, METH_VARARGS, NULL},
	 { (char *)"phonetics_analyze", _wrap_phonetics_analyze, METH_VARARGS, NULL},
	 { (char *)"phonetics_swigregister", phonetics_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_nec", _wrap_new_nec, METH_VARARGS, NULL},
	 { (char *)"delete_nec", _wrap_delete_nec, METH_VARARGS, NULL},
	 { (char *)"nec_analyze", _wrap_nec_analyze, METH_VARARGS, NULL},
	 { (char *)"nec_swigregister", nec_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_chart_parser", _wrap_new_chart_parser, METH_VARARGS, NULL},
	 { (char *)"delete_chart_parser", _wrap_delete_chart_parser, METH_VARARGS, NULL},
	 { (char *)"chart_parser_get_start_symbol", _wrap_chart_parser_get_start_symbol, METH_VARARGS, NULL},
	 { (char *)"chart_parser_analyze", _wrap_chart_parser_analyze, METH_VARARGS, NULL},
	 { (char *)"chart_parser_swigregister", chart_parser_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dep_txala", _wrap_new_dep_txala, METH_VARARGS, NULL},
	 { (char *)"delete_dep_txala", _wrap_delete_dep_txala, METH_VARARGS, NULL},
	 { (char *)"dep_txala_complete_parse_tree", _wrap_dep_txala_complete_parse_tree, METH_VARARGS, NULL},
	 { (char *)"dep_txala_analyze", _wrap_dep_txala_analyze, METH_VARARGS, NULL},
	 { (char *)"dep_txala_swigregister", dep_txala_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_dep_treeler", _wrap_new_dep_treeler, METH_VARARGS, NULL},
	 { (char *)"delete_dep_treeler", _wrap_delete_dep_treeler, METH_VARARGS, NULL},
	 { (char *)"dep_treeler_analyze", _wrap_dep_treeler_analyze, METH_VARARGS, NULL},
	 { (char *)"dep_treeler_swigregister", dep_treeler_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_senses", _wrap_new_senses, METH_VARARGS, NULL},
	 { (char *)"delete_senses", _wrap_delete_senses, METH_VARARGS, NULL},
	 { (char *)"senses_analyze", _wrap_senses_analyze, METH_VARARGS, NULL},
	 { (char *)"senses_swigregister", senses_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_relaxcor", _wrap_new_relaxcor, METH_VARARGS, NULL},
	 { (char *)"delete_relaxcor", _wrap_delete_relaxcor, METH_VARARGS, NULL},
	 { (char *)"relaxcor_set_provide_singletons", _wrap_relaxcor_set_provide_singletons, METH_VARARGS, NULL},
	 { (char *)"relaxcor_get_provide_singletons", _wrap_relaxcor_get_provide_singletons, METH_VARARGS, NULL},
	 { (char *)"relaxcor_analyze", _wrap_relaxcor_analyze, METH_VARARGS, NULL},
	 { (char *)"relaxcor_swigregister", relaxcor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_semgraph_extract", _wrap_new_semgraph_extract, METH_VARARGS, NULL},
	 { (char *)"delete_semgraph_extract", _wrap_delete_semgraph_extract, METH_VARARGS, NULL},
	 { (char *)"semgraph_extract_extract", _wrap_semgraph_extract_extract, METH_VARARGS, NULL},
	 { (char *)"semgraph_extract_swigregister", semgraph_extract_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ukb", _wrap_new_ukb, METH_VARARGS, NULL},
	 { (char *)"delete_ukb", _wrap_delete_ukb, METH_VARARGS, NULL},
	 { (char *)"ukb_analyze", _wrap_ukb_analyze, METH_VARARGS, NULL},
	 { (char *)"ukb_swigregister", ukb_swigregister, METH_VARARGS, NULL},
	 { (char *)"sense_info_sense_set", _wrap_sense_info_sense_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_sense_get", _wrap_sense_info_sense_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_parents_set", _wrap_sense_info_parents_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_parents_get", _wrap_sense_info_parents_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_semfile_set", _wrap_sense_info_semfile_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_semfile_get", _wrap_sense_info_semfile_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_words_set", _wrap_sense_info_words_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_words_get", _wrap_sense_info_words_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_tonto_set", _wrap_sense_info_tonto_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_tonto_get", _wrap_sense_info_tonto_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_sumo_set", _wrap_sense_info_sumo_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_sumo_get", _wrap_sense_info_sumo_get, METH_VARARGS, NULL},
	 { (char *)"sense_info_cyc_set", _wrap_sense_info_cyc_set, METH_VARARGS, NULL},
	 { (char *)"sense_info_cyc_get", _wrap_sense_info_cyc_get, METH_VARARGS, NULL},
	 { (char *)"new_sense_info", _wrap_new_sense_info, METH_VARARGS, NULL},
	 { (char *)"sense_info_get_parents_string", _wrap_sense_info_get_parents_string, METH_VARARGS, NULL},
	 { (char *)"delete_sense_info", _wrap_delete_sense_info, METH_VARARGS, NULL},
	 { (char *)"sense_info_swigregister", sense_info_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_semanticDB", _wrap_new_semanticDB, METH_VARARGS, NULL},
	 { (char *)"delete_semanticDB", _wrap_delete_semanticDB, METH_VARARGS, NULL},
	 { (char *)"semanticDB_get_WN_keys", _wrap_semanticDB_get_WN_keys, METH_VARARGS, NULL},
	 { (char *)"semanticDB_get_sense_words", _wrap_semanticDB_get_sense_words, METH_VARARGS, NULL},
	 { (char *)"semanticDB_get_word_senses", _wrap_semanticDB_get_word_senses, METH_VARARGS, NULL},
	 { (char *)"semanticDB_get_sense_info", _wrap_semanticDB_get_sense_info, METH_VARARGS, NULL},
	 { (char *)"semanticDB_swigregister", semanticDB_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tagset", _wrap_new_tagset, METH_VARARGS, NULL},
	 { (char *)"delete_tagset", _wrap_delete_tagset, METH_VARARGS, NULL},
	 { (char *)"tagset_get_short_tag", _wrap_tagset_get_short_tag, METH_VARARGS, NULL},
	 { (char *)"tagset_get_msd_features_map", _wrap_tagset_get_msd_features_map, METH_VARARGS, NULL},
	 { (char *)"tagset_get_msd_features", _wrap_tagset_get_msd_features, METH_VARARGS, NULL},
	 { (char *)"tagset_get_msd_string", _wrap_tagset_get_msd_string, METH_VARARGS, NULL},
	 { (char *)"tagset_msd_to_tag", _wrap_tagset_msd_to_tag, METH_VARARGS, NULL},
	 { (char *)"tagset_swigregister", tagset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_foma_FSM", _wrap_new_foma_FSM, METH_VARARGS, NULL},
	 { (char *)"delete_foma_FSM", _wrap_delete_foma_FSM, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_get_similar_words", _wrap_foma_FSM_get_similar_words, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_set_cutoff_threshold", _wrap_foma_FSM_set_cutoff_threshold, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_set_num_matches", _wrap_foma_FSM_set_num_matches, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_set_basic_operation_cost", _wrap_foma_FSM_set_basic_operation_cost, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_set_operation_cost", _wrap_foma_FSM_set_operation_cost, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_get_alphabet", _wrap_foma_FSM_get_alphabet, METH_VARARGS, NULL},
	 { (char *)"foma_FSM_swigregister", foma_FSM_swigregister, METH_VARARGS, NULL},
	 { (char *)"util_init_locale", _wrap_util_init_locale, METH_VARARGS, NULL},
	 { (char *)"util_wstring2int", _wrap_util_wstring2int, METH_VARARGS, NULL},
	 { (char *)"util_int2wstring", _wrap_util_int2wstring, METH_VARARGS, NULL},
	 { (char *)"util_wstring2double", _wrap_util_wstring2double, METH_VARARGS, NULL},
	 { (char *)"util_double2wstring", _wrap_util_double2wstring, METH_VARARGS, NULL},
	 { (char *)"util_wstring2longdouble", _wrap_util_wstring2longdouble, METH_VARARGS, NULL},
	 { (char *)"util_longdouble2wstring", _wrap_util_longdouble2wstring, METH_VARARGS, NULL},
	 { (char *)"util_vector2wstring", _wrap_util_vector2wstring, METH_VARARGS, NULL},
	 { (char *)"util_list2wstring", _wrap_util_list2wstring, METH_VARARGS, NULL},
	 { (char *)"util_pairlist2wstring", _wrap_util_pairlist2wstring, METH_VARARGS, NULL},
	 { (char *)"util_wstring2list", _wrap_util_wstring2list, METH_VARARGS, NULL},
	 { (char *)"util_wstring2vector", _wrap_util_wstring2vector, METH_VARARGS, NULL},
	 { (char *)"new_util", _wrap_new_util, METH_VARARGS, NULL},
	 { (char *)"delete_util", _wrap_delete_util, METH_VARARGS, NULL},
	 { (char *)"util_swigregister", util_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_input_conll", _wrap_new_input_conll, METH_VARARGS, NULL},
	 { (char *)"delete_input_conll", _wrap_delete_input_conll, METH_VARARGS, NULL},
	 { (char *)"input_conll_input_sentences", _wrap_input_conll_input_sentences, METH_VARARGS, NULL},
	 { (char *)"input_conll_input_document", _wrap_input_conll_input_document, METH_VARARGS, NULL},
	 { (char *)"input_conll_swigregister", input_conll_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_conll", _wrap_new_output_conll, METH_VARARGS, NULL},
	 { (char *)"delete_output_conll", _wrap_delete_output_conll, METH_VARARGS, NULL},
	 { (char *)"output_conll_PrintHeader", _wrap_output_conll_PrintHeader, METH_VARARGS, NULL},
	 { (char *)"output_conll_PrintFooter", _wrap_output_conll_PrintFooter, METH_VARARGS, NULL},
	 { (char *)"output_conll_PrintResults", _wrap_output_conll_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_conll_swigregister", output_conll_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_input_freeling", _wrap_new_input_freeling, METH_VARARGS, NULL},
	 { (char *)"delete_input_freeling", _wrap_delete_input_freeling, METH_VARARGS, NULL},
	 { (char *)"input_freeling_input_sentences", _wrap_input_freeling_input_sentences, METH_VARARGS, NULL},
	 { (char *)"input_freeling_swigregister", input_freeling_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_freeling", _wrap_new_output_freeling, METH_VARARGS, NULL},
	 { (char *)"delete_output_freeling", _wrap_delete_output_freeling, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintTree", _wrap_output_freeling_PrintTree, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintDepTree", _wrap_output_freeling_PrintDepTree, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintPredArgs", _wrap_output_freeling_PrintPredArgs, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintWord", _wrap_output_freeling_PrintWord, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintCorefs", _wrap_output_freeling_PrintCorefs, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintSemgraph", _wrap_output_freeling_PrintSemgraph, METH_VARARGS, NULL},
	 { (char *)"output_freeling_PrintResults", _wrap_output_freeling_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_senses", _wrap_output_freeling_output_senses, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_all_senses", _wrap_output_freeling_output_all_senses, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_phonetics", _wrap_output_freeling_output_phonetics, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_dep_tree", _wrap_output_freeling_output_dep_tree, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_corefs", _wrap_output_freeling_output_corefs, METH_VARARGS, NULL},
	 { (char *)"output_freeling_output_semgraph", _wrap_output_freeling_output_semgraph, METH_VARARGS, NULL},
	 { (char *)"output_freeling_swigregister", output_freeling_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_json", _wrap_new_output_json, METH_VARARGS, NULL},
	 { (char *)"delete_output_json", _wrap_delete_output_json, METH_VARARGS, NULL},
	 { (char *)"output_json_PrintResults", _wrap_output_json_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_json_swigregister", output_json_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_naf", _wrap_new_output_naf, METH_VARARGS, NULL},
	 { (char *)"delete_output_naf", _wrap_delete_output_naf, METH_VARARGS, NULL},
	 { (char *)"output_naf_PrintResults", _wrap_output_naf_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_naf_PrintHeader", _wrap_output_naf_PrintHeader, METH_VARARGS, NULL},
	 { (char *)"output_naf_PrintFooter", _wrap_output_naf_PrintFooter, METH_VARARGS, NULL},
	 { (char *)"output_naf_ActivateLayer", _wrap_output_naf_ActivateLayer, METH_VARARGS, NULL},
	 { (char *)"output_naf_swigregister", output_naf_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_train", _wrap_new_output_train, METH_VARARGS, NULL},
	 { (char *)"delete_output_train", _wrap_delete_output_train, METH_VARARGS, NULL},
	 { (char *)"output_train_PrintResults", _wrap_output_train_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_train_swigregister", output_train_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_output_xml", _wrap_new_output_xml, METH_VARARGS, NULL},
	 { (char *)"delete_output_xml", _wrap_delete_output_xml, METH_VARARGS, NULL},
	 { (char *)"output_xml_PrintHeader", _wrap_output_xml_PrintHeader, METH_VARARGS, NULL},
	 { (char *)"output_xml_PrintFooter", _wrap_output_xml_PrintFooter, METH_VARARGS, NULL},
	 { (char *)"output_xml_PrintResults", _wrap_output_xml_PrintResults, METH_VARARGS, NULL},
	 { (char *)"output_xml_swigregister", output_xml_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_freeling__paragraphTo_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::sentence,std::allocator< freeling::sentence > > *)  ((freeling::paragraph *) x));
}
static void *_p_freeling__wordTo_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::analysis,std::allocator< freeling::analysis > > *)  ((freeling::word *) x));
}
static void *_p_freeling__documentTo_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *)  ((freeling::document *) x));
}
static void *_p_freeling__depnodeTo_p_freeling__node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::node *)  ((freeling::depnode *) x));
}
static void *_p_freeling__dep_treeTo_p_freeling__treeT_freeling__depnode_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree< freeling::depnode > *)  ((freeling::dep_tree *) x));
}
static void *_p_freeling__parse_treeTo_p_freeling__treeT_freeling__node_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((freeling::tree< freeling::node > *)  ((freeling::parse_tree *) x));
}
static void *_p_freeling__predicateTo_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< freeling::argument,std::allocator< freeling::argument > > *)  ((freeling::predicate *) x));
}
static void *_p_freeling__sentenceTo_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::list< freeling::word,std::allocator< freeling::word > > *)  ((freeling::sentence *) x));
}
static swig_type_info _swigt__p_SEMmentionType = {"_p_SEMmentionType", "SEMmentionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_preorder_iterator = {"_p_const_preorder_iterator", "const_preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_sibling_iterator = {"_p_const_sibling_iterator", "const_sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coref_model = {"_p_coref_model", "coref_model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__RE_map = {"_p_freeling__RE_map", "freeling::RE_map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__alternatives = {"_p_freeling__alternatives", "freeling::alternatives *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__analysis = {"_p_freeling__analysis", "std::list< freeling::analysis >::value_type *|freeling::analysis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__argument = {"_p_freeling__argument", "std::vector< freeling::argument >::value_type *|freeling::argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__chart_parser = {"_p_freeling__chart_parser", "freeling::chart_parser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t = {"_p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t", "freeling::const_tree_preorder_iterator< freeling::depnode > *|freeling::tree< freeling::depnode >::const_preorder_iterator *|freeling::dep_tree::const_iterator *|freeling::tree< freeling::depnode >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__const_tree_preorder_iteratorT_freeling__node_t = {"_p_freeling__const_tree_preorder_iteratorT_freeling__node_t", "freeling::const_tree_preorder_iterator< freeling::node > *|freeling::parse_tree::const_iterator *|freeling::tree< freeling::node >::const_iterator *|freeling::tree< freeling::node >::const_preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t = {"_p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t", "freeling::const_tree_sibling_iterator< freeling::depnode > *|freeling::tree< freeling::depnode >::const_sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__const_tree_sibling_iteratorT_freeling__node_t = {"_p_freeling__const_tree_sibling_iteratorT_freeling__node_t", "freeling::tree< freeling::node >::const_sibling_iterator *|freeling::const_tree_sibling_iterator< freeling::node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__dates = {"_p_freeling__dates", "freeling::dates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__dep_tree = {"_p_freeling__dep_tree", "freeling::dep_tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__dep_treeler = {"_p_freeling__dep_treeler", "freeling::dep_treeler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__dep_txala = {"_p_freeling__dep_txala", "freeling::dep_txala *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__depnode = {"_p_freeling__depnode", "freeling::depnode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__dictionary = {"_p_freeling__dictionary", "freeling::dictionary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__document = {"_p_freeling__document", "freeling::document *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__foma_FSM = {"_p_freeling__foma_FSM", "freeling::foma_FSM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__hmm_tagger = {"_p_freeling__hmm_tagger", "freeling::hmm_tagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__input_conll = {"_p_freeling__io__input_conll", "freeling::io::input_conll *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__input_freeling = {"_p_freeling__io__input_freeling", "freeling::io::input_freeling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_conll = {"_p_freeling__io__output_conll", "freeling::io::output_conll *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_freeling = {"_p_freeling__io__output_freeling", "freeling::io::output_freeling *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_json = {"_p_freeling__io__output_json", "freeling::io::output_json *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_naf = {"_p_freeling__io__output_naf", "freeling::io::output_naf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_train = {"_p_freeling__io__output_train", "freeling::io::output_train *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__io__output_xml = {"_p_freeling__io__output_xml", "freeling::io::output_xml *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__lang_ident = {"_p_freeling__lang_ident", "freeling::lang_ident *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__locutions = {"_p_freeling__locutions", "freeling::locutions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__maco = {"_p_freeling__maco", "freeling::maco *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__maco_options = {"_p_freeling__maco_options", "freeling::maco_options *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__mention = {"_p_freeling__mention", "freeling::mention *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__nec = {"_p_freeling__nec", "freeling::nec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__ner = {"_p_freeling__ner", "freeling::ner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__node = {"_p_freeling__node", "freeling::node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__numbers = {"_p_freeling__numbers", "freeling::numbers *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__paragraph = {"_p_freeling__paragraph", "std::list< freeling::paragraph >::value_type *|freeling::paragraph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__parse_tree = {"_p_freeling__parse_tree", "freeling::parse_tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__phonetics = {"_p_freeling__phonetics", "freeling::phonetics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__predicate = {"_p_freeling__predicate", "freeling::predicate *|std::vector< freeling::predicate >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__probabilities = {"_p_freeling__probabilities", "freeling::probabilities *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__punts = {"_p_freeling__punts", "freeling::punts *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__quantities = {"_p_freeling__quantities", "freeling::quantities *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__regexp = {"_p_freeling__regexp", "freeling::regexp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__relax_tagger = {"_p_freeling__relax_tagger", "freeling::relax_tagger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__relaxcor = {"_p_freeling__relaxcor", "freeling::relaxcor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semanticDB = {"_p_freeling__semanticDB", "freeling::semanticDB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__SG_argument = {"_p_freeling__semgraph__SG_argument", "freeling::semgraph::SG_argument *|std::vector< freeling::semgraph::SG_argument >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__SG_entity = {"_p_freeling__semgraph__SG_entity", "freeling::semgraph::SG_entity *|std::vector< freeling::semgraph::SG_entity >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__SG_frame = {"_p_freeling__semgraph__SG_frame", "std::vector< freeling::semgraph::SG_frame >::value_type *|freeling::semgraph::SG_frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__SG_mention = {"_p_freeling__semgraph__SG_mention", "freeling::semgraph::SG_mention *|std::vector< freeling::semgraph::SG_mention >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__entityType = {"_p_freeling__semgraph__entityType", "enum freeling::semgraph::entityType *|freeling::semgraph::entityType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph__semantic_graph = {"_p_freeling__semgraph__semantic_graph", "freeling::semgraph::semantic_graph *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__semgraph_extract = {"_p_freeling__semgraph_extract", "freeling::semgraph_extract *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__sense_info = {"_p_freeling__sense_info", "freeling::sense_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__senses = {"_p_freeling__senses", "freeling::senses *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__sentence = {"_p_freeling__sentence", "std::list< freeling::sentence >::value_type *|freeling::sentence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__splitter = {"_p_freeling__splitter", "freeling::splitter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tagset = {"_p_freeling__tagset", "freeling::tagset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tokenizer = {"_p_freeling__tokenizer", "freeling::tokenizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__traces = {"_p_freeling__traces", "freeling::traces *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__treeT_freeling__depnode_t = {"_p_freeling__treeT_freeling__depnode_t", "freeling::tree< freeling::depnode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__treeT_freeling__node_t = {"_p_freeling__treeT_freeling__node_t", "freeling::tree< freeling::node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tree_preorder_iteratorT_freeling__depnode_t = {"_p_freeling__tree_preorder_iteratorT_freeling__depnode_t", "freeling::tree_preorder_iterator< freeling::depnode > *|freeling::dep_tree::iterator *|freeling::tree< freeling::depnode >::preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tree_preorder_iteratorT_freeling__node_t = {"_p_freeling__tree_preorder_iteratorT_freeling__node_t", "freeling::parse_tree::iterator *|freeling::tree< freeling::node >::preorder_iterator *|freeling::tree_preorder_iterator< freeling::node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tree_sibling_iteratorT_freeling__depnode_t = {"_p_freeling__tree_sibling_iteratorT_freeling__depnode_t", "freeling::tree< freeling::depnode >::sibling_iterator *|freeling::tree_sibling_iterator< freeling::depnode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__tree_sibling_iteratorT_freeling__node_t = {"_p_freeling__tree_sibling_iteratorT_freeling__node_t", "freeling::tree_sibling_iterator< freeling::node > *|freeling::tree< freeling::node >::sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__ukb = {"_p_freeling__ukb", "freeling::ukb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__util = {"_p_freeling__util", "freeling::util *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_freeling__word = {"_p_freeling__word", "std::vector< freeling::word >::value_type *|std::list< freeling::word >::value_type *|freeling::word *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mentionType = {"_p_mentionType", "mentionType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_predicates = {"_p_predicates", "predicates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_preorder_iterator = {"_p_preorder_iterator", "preorder_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sibling_iterator = {"_p_sibling_iterator", "sibling_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_splitter_status = {"_p_splitter_status", "freeling::splitter::session_id|splitter_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__analysis_t = {"_p_std__allocatorT_freeling__analysis_t", "std::list< freeling::analysis >::allocator_type *|std::allocator< freeling::analysis > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__argument_t = {"_p_std__allocatorT_freeling__argument_t", "std::vector< freeling::argument >::allocator_type *|std::allocator< freeling::argument > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__paragraph_t = {"_p_std__allocatorT_freeling__paragraph_t", "std::list< freeling::paragraph >::allocator_type *|std::allocator< freeling::paragraph > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__predicate_t = {"_p_std__allocatorT_freeling__predicate_t", "std::allocator< freeling::predicate > *|std::vector< freeling::predicate >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__semgraph__SG_argument_t = {"_p_std__allocatorT_freeling__semgraph__SG_argument_t", "std::allocator< freeling::semgraph::SG_argument > *|std::vector< freeling::semgraph::SG_argument >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__semgraph__SG_entity_t = {"_p_std__allocatorT_freeling__semgraph__SG_entity_t", "std::vector< freeling::semgraph::SG_entity >::allocator_type *|std::allocator< freeling::semgraph::SG_entity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__semgraph__SG_frame_t = {"_p_std__allocatorT_freeling__semgraph__SG_frame_t", "std::allocator< freeling::semgraph::SG_frame > *|std::vector< freeling::semgraph::SG_frame >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__semgraph__SG_mention_t = {"_p_std__allocatorT_freeling__semgraph__SG_mention_t", "std::vector< freeling::semgraph::SG_mention >::allocator_type *|std::allocator< freeling::semgraph::SG_mention > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__sentence_t = {"_p_std__allocatorT_freeling__sentence_t", "std::list< freeling::sentence >::allocator_type *|std::allocator< freeling::sentence > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_freeling__word_t = {"_p_std__allocatorT_freeling__word_t", "std::vector< freeling::word >::allocator_type *|std::list< freeling::word >::allocator_type *|std::allocator< freeling::word > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::list< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t = {"_p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t", "std::vector< std::list< int > >::allocator_type *|std::allocator< std::list< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t = {"_p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t", "std::vector< std::list< std::wstring > >::allocator_type *|std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_double_std__wstring_t_t = {"_p_std__allocatorT_std__pairT_double_std__wstring_t_t", "std::allocator< std::pair< double,std::wstring > > *|std::vector< std::pair< double,std::wstring > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__wstring_double_t_t = {"_p_std__allocatorT_std__pairT_std__wstring_double_t_t", "std::list< std::pair< std::wstring,double > >::allocator_type *|std::allocator< std::pair< std::wstring,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t = {"_p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t", "std::allocator< std::pair< std::wstring,std::wstring > > *|std::vector< std::pair< std::wstring,std::wstring > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__wstring_t = {"_p_std__allocatorT_std__wstring_t", "std::list< std::wstring >::allocator_type *|std::vector< std::wstring >::allocator_type *|std::allocator< std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__wstring_t = {"_p_std__lessT_std__wstring_t", "std::less< std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t = {"_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t", "std::list< freeling::analysis,std::allocator< freeling::analysis > > *|std::list< freeling::analysis > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t = {"_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t", "std::list< freeling::paragraph > *|std::list< freeling::paragraph,std::allocator< freeling::paragraph > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t = {"_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t", "std::list< freeling::sentence > *|std::list< freeling::sentence,std::allocator< freeling::sentence > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t = {"_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t", "std::list< freeling::word,std::allocator< freeling::word > > *|std::list< freeling::word > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_int_std__allocatorT_int_t_t = {"_p_std__listT_int_std__allocatorT_int_t_t", "std::list< int,std::allocator< int > > *|std::list< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t = {"_p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t", "std::list< std::pair< std::wstring,double > > *|std::list< std::pair< std::wstring,double >,std::allocator< std::pair< std::wstring,double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t = {"_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t", "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator = {"_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator", "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator = {"_p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator", "std::list< std::pair< std::wstring,int >,std::allocator< std::pair< std::wstring,int > > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t = {"_p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t", "std::list< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t = {"_p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t", "std::list< std::wstring,std::allocator< std::wstring > > *|std::list< std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t = {"_p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t", "std::map< std::wstring,std::wstring,std::less< std::wstring >,std::allocator< std::pair< std::wstring const,std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_std__wstring_t = {"_p_std__pairT_double_std__wstring_t", "std::pair< double,std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__wstring_double_t = {"_p_std__pairT_std__wstring_double_t", "std::pair< std::wstring,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__wstring_int_t = {"_p_std__pairT_std__wstring_int_t", "std::pair< std::wstring,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__wstring_std__wstring_t = {"_p_std__pairT_std__wstring_std__wstring_t", "std::pair< std::wstring,std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t = {"_p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t", "std::set< std::wstring > *|std::set< std::wstring,std::less< std::wstring >,std::allocator< std::wstring > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t = {"_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t", "std::vector< freeling::argument,std::allocator< freeling::argument > > *|std::vector< freeling::argument > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator = {"_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator", "std::vector< freeling::mention,std::allocator< freeling::mention > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator = {"_p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator", "std::vector< freeling::mention,std::allocator< freeling::mention > >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t = {"_p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t", "std::vector< freeling::predicate > *|std::vector< freeling::predicate,std::allocator< freeling::predicate > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t = {"_p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t", "std::vector< freeling::semgraph::SG_argument,std::allocator< freeling::semgraph::SG_argument > > *|std::vector< freeling::semgraph::SG_argument > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t = {"_p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t", "std::vector< freeling::semgraph::SG_entity > *|std::vector< freeling::semgraph::SG_entity,std::allocator< freeling::semgraph::SG_entity > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t = {"_p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t", "std::vector< freeling::semgraph::SG_frame > *|std::vector< freeling::semgraph::SG_frame,std::allocator< freeling::semgraph::SG_frame > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t = {"_p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t", "std::vector< freeling::semgraph::SG_mention,std::allocator< freeling::semgraph::SG_mention > > *|std::vector< freeling::semgraph::SG_mention > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t = {"_p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t", "std::vector< freeling::word,std::allocator< freeling::word > > *|std::vector< freeling::word > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::list< int > > *|std::vector< std::list< int,std::allocator< int > >,std::allocator< std::list< int,std::allocator< int > > > > *|std::vector< std::list< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t = {"_p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t", "std::vector< std::list< std::wstring > > *|std::vector< std::list< std::wstring,std::allocator< std::wstring > >,std::allocator< std::list< std::wstring,std::allocator< std::wstring > > > > *|std::vector< std::list< std::wstring,std::allocator< std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t = {"_p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t", "std::vector< std::pair< double,std::wstring > > *|std::vector< std::pair< double,std::wstring >,std::allocator< std::pair< double,std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t = {"_p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t", "std::vector< std::pair< std::wstring,std::wstring > > *|std::vector< std::pair< std::wstring,std::wstring >,std::allocator< std::pair< std::wstring,std::wstring > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t = {"_p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t", "std::vector< std::wstring,std::allocator< std::wstring > > *|std::vector< std::wstring > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wistream = {"_p_std__wistream", "std::wistream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wostream = {"_p_std__wostream", "std::wostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SEMmentionType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_preorder_iterator,
  &_swigt__p_const_sibling_iterator,
  &_swigt__p_coref_model,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_freeling__RE_map,
  &_swigt__p_freeling__alternatives,
  &_swigt__p_freeling__analysis,
  &_swigt__p_freeling__argument,
  &_swigt__p_freeling__chart_parser,
  &_swigt__p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__const_tree_preorder_iteratorT_freeling__node_t,
  &_swigt__p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__const_tree_sibling_iteratorT_freeling__node_t,
  &_swigt__p_freeling__dates,
  &_swigt__p_freeling__dep_tree,
  &_swigt__p_freeling__dep_treeler,
  &_swigt__p_freeling__dep_txala,
  &_swigt__p_freeling__depnode,
  &_swigt__p_freeling__dictionary,
  &_swigt__p_freeling__document,
  &_swigt__p_freeling__foma_FSM,
  &_swigt__p_freeling__hmm_tagger,
  &_swigt__p_freeling__io__input_conll,
  &_swigt__p_freeling__io__input_freeling,
  &_swigt__p_freeling__io__output_conll,
  &_swigt__p_freeling__io__output_freeling,
  &_swigt__p_freeling__io__output_json,
  &_swigt__p_freeling__io__output_naf,
  &_swigt__p_freeling__io__output_train,
  &_swigt__p_freeling__io__output_xml,
  &_swigt__p_freeling__lang_ident,
  &_swigt__p_freeling__locutions,
  &_swigt__p_freeling__maco,
  &_swigt__p_freeling__maco_options,
  &_swigt__p_freeling__mention,
  &_swigt__p_freeling__nec,
  &_swigt__p_freeling__ner,
  &_swigt__p_freeling__node,
  &_swigt__p_freeling__numbers,
  &_swigt__p_freeling__paragraph,
  &_swigt__p_freeling__parse_tree,
  &_swigt__p_freeling__phonetics,
  &_swigt__p_freeling__predicate,
  &_swigt__p_freeling__probabilities,
  &_swigt__p_freeling__punts,
  &_swigt__p_freeling__quantities,
  &_swigt__p_freeling__regexp,
  &_swigt__p_freeling__relax_tagger,
  &_swigt__p_freeling__relaxcor,
  &_swigt__p_freeling__semanticDB,
  &_swigt__p_freeling__semgraph__SG_argument,
  &_swigt__p_freeling__semgraph__SG_entity,
  &_swigt__p_freeling__semgraph__SG_frame,
  &_swigt__p_freeling__semgraph__SG_mention,
  &_swigt__p_freeling__semgraph__entityType,
  &_swigt__p_freeling__semgraph__semantic_graph,
  &_swigt__p_freeling__semgraph_extract,
  &_swigt__p_freeling__sense_info,
  &_swigt__p_freeling__senses,
  &_swigt__p_freeling__sentence,
  &_swigt__p_freeling__splitter,
  &_swigt__p_freeling__tagset,
  &_swigt__p_freeling__tokenizer,
  &_swigt__p_freeling__traces,
  &_swigt__p_freeling__treeT_freeling__depnode_t,
  &_swigt__p_freeling__treeT_freeling__node_t,
  &_swigt__p_freeling__tree_preorder_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__tree_preorder_iteratorT_freeling__node_t,
  &_swigt__p_freeling__tree_sibling_iteratorT_freeling__depnode_t,
  &_swigt__p_freeling__tree_sibling_iteratorT_freeling__node_t,
  &_swigt__p_freeling__ukb,
  &_swigt__p_freeling__util,
  &_swigt__p_freeling__word,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_long_double,
  &_swigt__p_mentionType,
  &_swigt__p_p_PyObject,
  &_swigt__p_predicates,
  &_swigt__p_preorder_iterator,
  &_swigt__p_second_type,
  &_swigt__p_sibling_iterator,
  &_swigt__p_size_type,
  &_swigt__p_splitter_status,
  &_swigt__p_std__allocatorT_freeling__analysis_t,
  &_swigt__p_std__allocatorT_freeling__argument_t,
  &_swigt__p_std__allocatorT_freeling__paragraph_t,
  &_swigt__p_std__allocatorT_freeling__predicate_t,
  &_swigt__p_std__allocatorT_freeling__semgraph__SG_argument_t,
  &_swigt__p_std__allocatorT_freeling__semgraph__SG_entity_t,
  &_swigt__p_std__allocatorT_freeling__semgraph__SG_frame_t,
  &_swigt__p_std__allocatorT_freeling__semgraph__SG_mention_t,
  &_swigt__p_std__allocatorT_freeling__sentence_t,
  &_swigt__p_std__allocatorT_freeling__word_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t,
  &_swigt__p_std__allocatorT_std__pairT_double_std__wstring_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__wstring_double_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t,
  &_swigt__p_std__allocatorT_std__wstring_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_std__wstring_t,
  &_swigt__p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t,
  &_swigt__p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t,
  &_swigt__p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,
  &_swigt__p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,
  &_swigt__p_std__listT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t,
  &_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t,
  &_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator,
  &_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator,
  &_swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,
  &_swigt__p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t,
  &_swigt__p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t,
  &_swigt__p_std__pairT_double_std__wstring_t,
  &_swigt__p_std__pairT_std__wstring_double_t,
  &_swigt__p_std__pairT_std__wstring_int_t,
  &_swigt__p_std__pairT_std__wstring_std__wstring_t,
  &_swigt__p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t,
  &_swigt__p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t,
  &_swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator,
  &_swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator,
  &_swigt__p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t,
  &_swigt__p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t,
  &_swigt__p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t,
  &_swigt__p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t,
  &_swigt__p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t,
  &_swigt__p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t,
  &_swigt__p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,
  &_swigt__p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t,
  &_swigt__p_std__wistream,
  &_swigt__p_std__wostream,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_SEMmentionType[] = {  {&_swigt__p_SEMmentionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_preorder_iterator[] = {  {&_swigt__p_const_preorder_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_sibling_iterator[] = {  {&_swigt__p_const_sibling_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coref_model[] = {  {&_swigt__p_coref_model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__RE_map[] = {  {&_swigt__p_freeling__RE_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__alternatives[] = {  {&_swigt__p_freeling__alternatives, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__analysis[] = {  {&_swigt__p_freeling__analysis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__argument[] = {  {&_swigt__p_freeling__argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__chart_parser[] = {  {&_swigt__p_freeling__chart_parser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_tree_preorder_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__const_tree_preorder_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__const_tree_sibling_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__const_tree_sibling_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dates[] = {  {&_swigt__p_freeling__dates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dep_tree[] = {  {&_swigt__p_freeling__dep_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dep_treeler[] = {  {&_swigt__p_freeling__dep_treeler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dep_txala[] = {  {&_swigt__p_freeling__dep_txala, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__depnode[] = {  {&_swigt__p_freeling__depnode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__dictionary[] = {  {&_swigt__p_freeling__dictionary, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__document[] = {  {&_swigt__p_freeling__document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__foma_FSM[] = {  {&_swigt__p_freeling__foma_FSM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__hmm_tagger[] = {  {&_swigt__p_freeling__hmm_tagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__input_conll[] = {  {&_swigt__p_freeling__io__input_conll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__input_freeling[] = {  {&_swigt__p_freeling__io__input_freeling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_conll[] = {  {&_swigt__p_freeling__io__output_conll, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_freeling[] = {  {&_swigt__p_freeling__io__output_freeling, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_json[] = {  {&_swigt__p_freeling__io__output_json, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_naf[] = {  {&_swigt__p_freeling__io__output_naf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_train[] = {  {&_swigt__p_freeling__io__output_train, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__io__output_xml[] = {  {&_swigt__p_freeling__io__output_xml, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__lang_ident[] = {  {&_swigt__p_freeling__lang_ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__locutions[] = {  {&_swigt__p_freeling__locutions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__maco[] = {  {&_swigt__p_freeling__maco, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__maco_options[] = {  {&_swigt__p_freeling__maco_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__mention[] = {  {&_swigt__p_freeling__mention, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__nec[] = {  {&_swigt__p_freeling__nec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__ner[] = {  {&_swigt__p_freeling__ner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__node[] = {  {&_swigt__p_freeling__node, 0, 0, 0},  {&_swigt__p_freeling__depnode, _p_freeling__depnodeTo_p_freeling__node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__numbers[] = {  {&_swigt__p_freeling__numbers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__paragraph[] = {  {&_swigt__p_freeling__paragraph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__parse_tree[] = {  {&_swigt__p_freeling__parse_tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__phonetics[] = {  {&_swigt__p_freeling__phonetics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__predicate[] = {  {&_swigt__p_freeling__predicate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__probabilities[] = {  {&_swigt__p_freeling__probabilities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__punts[] = {  {&_swigt__p_freeling__punts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__quantities[] = {  {&_swigt__p_freeling__quantities, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__regexp[] = {  {&_swigt__p_freeling__regexp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__relax_tagger[] = {  {&_swigt__p_freeling__relax_tagger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__relaxcor[] = {  {&_swigt__p_freeling__relaxcor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semanticDB[] = {  {&_swigt__p_freeling__semanticDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__SG_argument[] = {  {&_swigt__p_freeling__semgraph__SG_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__SG_entity[] = {  {&_swigt__p_freeling__semgraph__SG_entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__SG_frame[] = {  {&_swigt__p_freeling__semgraph__SG_frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__SG_mention[] = {  {&_swigt__p_freeling__semgraph__SG_mention, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__entityType[] = {  {&_swigt__p_freeling__semgraph__entityType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph__semantic_graph[] = {  {&_swigt__p_freeling__semgraph__semantic_graph, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__semgraph_extract[] = {  {&_swigt__p_freeling__semgraph_extract, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sense_info[] = {  {&_swigt__p_freeling__sense_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__senses[] = {  {&_swigt__p_freeling__senses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__sentence[] = {  {&_swigt__p_freeling__sentence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__splitter[] = {  {&_swigt__p_freeling__splitter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tagset[] = {  {&_swigt__p_freeling__tagset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tokenizer[] = {  {&_swigt__p_freeling__tokenizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__traces[] = {  {&_swigt__p_freeling__traces, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__treeT_freeling__depnode_t[] = {  {&_swigt__p_freeling__dep_tree, _p_freeling__dep_treeTo_p_freeling__treeT_freeling__depnode_t, 0, 0},  {&_swigt__p_freeling__treeT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__treeT_freeling__node_t[] = {  {&_swigt__p_freeling__parse_tree, _p_freeling__parse_treeTo_p_freeling__treeT_freeling__node_t, 0, 0},  {&_swigt__p_freeling__treeT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_preorder_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__tree_preorder_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_preorder_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__tree_preorder_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_sibling_iteratorT_freeling__depnode_t[] = {  {&_swigt__p_freeling__tree_sibling_iteratorT_freeling__depnode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__tree_sibling_iteratorT_freeling__node_t[] = {  {&_swigt__p_freeling__tree_sibling_iteratorT_freeling__node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__ukb[] = {  {&_swigt__p_freeling__ukb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__util[] = {  {&_swigt__p_freeling__util, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_freeling__word[] = {  {&_swigt__p_freeling__word, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mentionType[] = {  {&_swigt__p_mentionType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_predicates[] = {  {&_swigt__p_predicates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_preorder_iterator[] = {  {&_swigt__p_preorder_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sibling_iterator[] = {  {&_swigt__p_sibling_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_splitter_status[] = {  {&_swigt__p_splitter_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__analysis_t[] = {  {&_swigt__p_std__allocatorT_freeling__analysis_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__argument_t[] = {  {&_swigt__p_std__allocatorT_freeling__argument_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__paragraph_t[] = {  {&_swigt__p_std__allocatorT_freeling__paragraph_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__predicate_t[] = {  {&_swigt__p_std__allocatorT_freeling__predicate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__semgraph__SG_argument_t[] = {  {&_swigt__p_std__allocatorT_freeling__semgraph__SG_argument_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__semgraph__SG_entity_t[] = {  {&_swigt__p_std__allocatorT_freeling__semgraph__SG_entity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__semgraph__SG_frame_t[] = {  {&_swigt__p_std__allocatorT_freeling__semgraph__SG_frame_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__semgraph__SG_mention_t[] = {  {&_swigt__p_std__allocatorT_freeling__semgraph__SG_mention_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__sentence_t[] = {  {&_swigt__p_std__allocatorT_freeling__sentence_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_freeling__word_t[] = {  {&_swigt__p_std__allocatorT_freeling__word_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_double_std__wstring_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_double_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__wstring_double_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__wstring_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__wstring_t[] = {  {&_swigt__p_std__allocatorT_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__wstring_t[] = {  {&_swigt__p_std__lessT_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t[] = {  {&_swigt__p_freeling__word, _p_freeling__wordTo_p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0, 0},  {&_swigt__p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t[] = {  {&_swigt__p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0, 0, 0},  {&_swigt__p_freeling__document, _p_freeling__documentTo_p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t[] = {  {&_swigt__p_freeling__paragraph, _p_freeling__paragraphTo_p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0, 0},  {&_swigt__p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t[] = {  {&_swigt__p_freeling__sentence, _p_freeling__sentenceTo_p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0, 0},  {&_swigt__p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__listT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t[] = {  {&_swigt__p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t[] = {  {&_swigt__p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_std__wstring_t[] = {  {&_swigt__p_std__pairT_double_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__wstring_double_t[] = {  {&_swigt__p_std__pairT_std__wstring_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__wstring_int_t[] = {  {&_swigt__p_std__pairT_std__wstring_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__wstring_std__wstring_t[] = {  {&_swigt__p_std__pairT_std__wstring_std__wstring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t[] = {  {&_swigt__p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t[] = {  {&_swigt__p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0, 0, 0},  {&_swigt__p_freeling__predicate, _p_freeling__predicateTo_p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator[] = {  {&_swigt__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t[] = {  {&_swigt__p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t[] = {  {&_swigt__p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t[] = {  {&_swigt__p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t[] = {  {&_swigt__p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t[] = {  {&_swigt__p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t[] = {  {&_swigt__p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t[] = {  {&_swigt__p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wistream[] = {  {&_swigt__p_std__wistream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wostream[] = {  {&_swigt__p_std__wostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SEMmentionType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_preorder_iterator,
  _swigc__p_const_sibling_iterator,
  _swigc__p_coref_model,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_freeling__RE_map,
  _swigc__p_freeling__alternatives,
  _swigc__p_freeling__analysis,
  _swigc__p_freeling__argument,
  _swigc__p_freeling__chart_parser,
  _swigc__p_freeling__const_tree_preorder_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__const_tree_preorder_iteratorT_freeling__node_t,
  _swigc__p_freeling__const_tree_sibling_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__const_tree_sibling_iteratorT_freeling__node_t,
  _swigc__p_freeling__dates,
  _swigc__p_freeling__dep_tree,
  _swigc__p_freeling__dep_treeler,
  _swigc__p_freeling__dep_txala,
  _swigc__p_freeling__depnode,
  _swigc__p_freeling__dictionary,
  _swigc__p_freeling__document,
  _swigc__p_freeling__foma_FSM,
  _swigc__p_freeling__hmm_tagger,
  _swigc__p_freeling__io__input_conll,
  _swigc__p_freeling__io__input_freeling,
  _swigc__p_freeling__io__output_conll,
  _swigc__p_freeling__io__output_freeling,
  _swigc__p_freeling__io__output_json,
  _swigc__p_freeling__io__output_naf,
  _swigc__p_freeling__io__output_train,
  _swigc__p_freeling__io__output_xml,
  _swigc__p_freeling__lang_ident,
  _swigc__p_freeling__locutions,
  _swigc__p_freeling__maco,
  _swigc__p_freeling__maco_options,
  _swigc__p_freeling__mention,
  _swigc__p_freeling__nec,
  _swigc__p_freeling__ner,
  _swigc__p_freeling__node,
  _swigc__p_freeling__numbers,
  _swigc__p_freeling__paragraph,
  _swigc__p_freeling__parse_tree,
  _swigc__p_freeling__phonetics,
  _swigc__p_freeling__predicate,
  _swigc__p_freeling__probabilities,
  _swigc__p_freeling__punts,
  _swigc__p_freeling__quantities,
  _swigc__p_freeling__regexp,
  _swigc__p_freeling__relax_tagger,
  _swigc__p_freeling__relaxcor,
  _swigc__p_freeling__semanticDB,
  _swigc__p_freeling__semgraph__SG_argument,
  _swigc__p_freeling__semgraph__SG_entity,
  _swigc__p_freeling__semgraph__SG_frame,
  _swigc__p_freeling__semgraph__SG_mention,
  _swigc__p_freeling__semgraph__entityType,
  _swigc__p_freeling__semgraph__semantic_graph,
  _swigc__p_freeling__semgraph_extract,
  _swigc__p_freeling__sense_info,
  _swigc__p_freeling__senses,
  _swigc__p_freeling__sentence,
  _swigc__p_freeling__splitter,
  _swigc__p_freeling__tagset,
  _swigc__p_freeling__tokenizer,
  _swigc__p_freeling__traces,
  _swigc__p_freeling__treeT_freeling__depnode_t,
  _swigc__p_freeling__treeT_freeling__node_t,
  _swigc__p_freeling__tree_preorder_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__tree_preorder_iteratorT_freeling__node_t,
  _swigc__p_freeling__tree_sibling_iteratorT_freeling__depnode_t,
  _swigc__p_freeling__tree_sibling_iteratorT_freeling__node_t,
  _swigc__p_freeling__ukb,
  _swigc__p_freeling__util,
  _swigc__p_freeling__word,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_long_double,
  _swigc__p_mentionType,
  _swigc__p_p_PyObject,
  _swigc__p_predicates,
  _swigc__p_preorder_iterator,
  _swigc__p_second_type,
  _swigc__p_sibling_iterator,
  _swigc__p_size_type,
  _swigc__p_splitter_status,
  _swigc__p_std__allocatorT_freeling__analysis_t,
  _swigc__p_std__allocatorT_freeling__argument_t,
  _swigc__p_std__allocatorT_freeling__paragraph_t,
  _swigc__p_std__allocatorT_freeling__predicate_t,
  _swigc__p_std__allocatorT_freeling__semgraph__SG_argument_t,
  _swigc__p_std__allocatorT_freeling__semgraph__SG_entity_t,
  _swigc__p_std__allocatorT_freeling__semgraph__SG_frame_t,
  _swigc__p_std__allocatorT_freeling__semgraph__SG_mention_t,
  _swigc__p_std__allocatorT_freeling__sentence_t,
  _swigc__p_std__allocatorT_freeling__word_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t,
  _swigc__p_std__allocatorT_std__pairT_double_std__wstring_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__wstring_double_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t,
  _swigc__p_std__allocatorT_std__wstring_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_std__wstring_t,
  _swigc__p_std__listT_freeling__analysis_std__allocatorT_freeling__analysis_t_t,
  _swigc__p_std__listT_freeling__paragraph_std__allocatorT_freeling__paragraph_t_t,
  _swigc__p_std__listT_freeling__sentence_std__allocatorT_freeling__sentence_t_t,
  _swigc__p_std__listT_freeling__word_std__allocatorT_freeling__word_t_t,
  _swigc__p_std__listT_int_std__allocatorT_int_t_t,
  _swigc__p_std__listT_std__pairT_std__wstring_double_t_std__allocatorT_std__pairT_std__wstring_double_t_t_t,
  _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t,
  _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__const_iterator,
  _swigc__p_std__listT_std__pairT_std__wstring_int_t_std__allocatorT_std__pairT_std__wstring_int_t_t_t__iterator,
  _swigc__p_std__listT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,
  _swigc__p_std__listT_std__wstring_std__allocatorT_std__wstring_t_t,
  _swigc__p_std__mapT_std__wstring_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__pairT_std__wstring_const_std__wstring_t_t_t,
  _swigc__p_std__pairT_double_std__wstring_t,
  _swigc__p_std__pairT_std__wstring_double_t,
  _swigc__p_std__pairT_std__wstring_int_t,
  _swigc__p_std__pairT_std__wstring_std__wstring_t,
  _swigc__p_std__setT_std__wstring_std__lessT_std__wstring_t_std__allocatorT_std__wstring_t_t,
  _swigc__p_std__vectorT_freeling__argument_std__allocatorT_freeling__argument_t_t,
  _swigc__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__const_iterator,
  _swigc__p_std__vectorT_freeling__mention_std__allocatorT_freeling__mention_t_t__iterator,
  _swigc__p_std__vectorT_freeling__predicate_std__allocatorT_freeling__predicate_t_t,
  _swigc__p_std__vectorT_freeling__semgraph__SG_argument_std__allocatorT_freeling__semgraph__SG_argument_t_t,
  _swigc__p_std__vectorT_freeling__semgraph__SG_entity_std__allocatorT_freeling__semgraph__SG_entity_t_t,
  _swigc__p_std__vectorT_freeling__semgraph__SG_frame_std__allocatorT_freeling__semgraph__SG_frame_t_t,
  _swigc__p_std__vectorT_freeling__semgraph__SG_mention_std__allocatorT_freeling__semgraph__SG_mention_t_t,
  _swigc__p_std__vectorT_freeling__word_std__allocatorT_freeling__word_t_t,
  _swigc__p_std__vectorT_std__listT_int_std__allocatorT_int_t_t_std__allocatorT_std__listT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_std__allocatorT_std__listT_std__wstring_std__allocatorT_std__wstring_t_t_t_t,
  _swigc__p_std__vectorT_std__pairT_double_std__wstring_t_std__allocatorT_std__pairT_double_std__wstring_t_t_t,
  _swigc__p_std__vectorT_std__pairT_std__wstring_std__wstring_t_std__allocatorT_std__pairT_std__wstring_std__wstring_t_t_t,
  _swigc__p_std__vectorT_std__wstring_std__allocatorT_std__wstring_t_t,
  _swigc__p_std__wistream,
  _swigc__p_std__wostream,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"argument_EMPTY_ROLE",Swig_var_argument_EMPTY_ROLE_get, Swig_var_argument_EMPTY_ROLE_set);
  SWIG_Python_SetConstant(d, "mention_PROPER_NOUN",SWIG_From_int(static_cast< int >(freeling::mention::PROPER_NOUN)));
  SWIG_Python_SetConstant(d, "mention_PRONOUN",SWIG_From_int(static_cast< int >(freeling::mention::PRONOUN)));
  SWIG_Python_SetConstant(d, "mention_NOUN_PHRASE",SWIG_From_int(static_cast< int >(freeling::mention::NOUN_PHRASE)));
  SWIG_Python_SetConstant(d, "mention_COMPOSITE",SWIG_From_int(static_cast< int >(freeling::mention::COMPOSITE)));
  SWIG_Python_SetConstant(d, "mention_VERB_PHRASE",SWIG_From_int(static_cast< int >(freeling::mention::VERB_PHRASE)));
  SWIG_Python_SetConstant(d, "mention_PER",SWIG_From_int(static_cast< int >(freeling::mention::PER)));
  SWIG_Python_SetConstant(d, "mention_MALE",SWIG_From_int(static_cast< int >(freeling::mention::MALE)));
  SWIG_Python_SetConstant(d, "mention_FEMALE",SWIG_From_int(static_cast< int >(freeling::mention::FEMALE)));
  SWIG_Python_SetConstant(d, "mention_NOTPER",SWIG_From_int(static_cast< int >(freeling::mention::NOTPER)));
  SWIG_Python_SetConstant(d, "mention_ORG",SWIG_From_int(static_cast< int >(freeling::mention::ORG)));
  SWIG_Python_SetConstant(d, "mention_GEO",SWIG_From_int(static_cast< int >(freeling::mention::GEO)));
  SWIG_Python_SetConstant(d, "mention_OTHER",SWIG_From_int(static_cast< int >(freeling::mention::OTHER)));
  SWIG_addvarlink(SWIG_globals(),(char*)"traces_TraceLevel",Swig_var_traces_TraceLevel_get, Swig_var_traces_TraceLevel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"traces_TraceModule",Swig_var_traces_TraceModule_get, Swig_var_traces_TraceModule_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

